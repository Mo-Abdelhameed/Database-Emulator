// Generated from F:/sem6/dbsubmission/Database-Emulator33\MySqlParser.g4 by ANTLR 4.9.1
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class MySqlParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.9.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		SPACE=1, SPEC_MYSQL_COMMENT=2, COMMENT_INPUT=3, LINE_COMMENT=4, ADD=5, 
		ALL=6, ALTER=7, ALWAYS=8, ANALYZE=9, AND=10, AS=11, ASC=12, BEFORE=13, 
		BETWEEN=14, BOTH=15, BY=16, CALL=17, CASCADE=18, CASE=19, CAST=20, CHANGE=21, 
		CHARACTER=22, CHECK=23, COLLATE=24, COLUMN=25, CONDITION=26, CONSTRAINT=27, 
		CONTINUE=28, CONVERT=29, CREATE=30, CROSS=31, CURRENT=32, CURRENT_USER=33, 
		CURSOR=34, DATABASE=35, DATABASES=36, DECLARE=37, DEFAULT=38, DELAYED=39, 
		DELETE=40, DESC=41, DESCRIBE=42, DETERMINISTIC=43, DIAGNOSTICS=44, DISTINCT=45, 
		DISTINCTROW=46, DROP=47, EACH=48, ELSE=49, ELSEIF=50, ENCLOSED=51, ESCAPED=52, 
		EXISTS=53, EXIT=54, EXPLAIN=55, FALSE=56, FETCH=57, FOR=58, FORCE=59, 
		FOREIGN=60, FROM=61, FULLTEXT=62, GENERATED=63, GET=64, GRANT=65, GROUP=66, 
		HAVING=67, HIGH_PRIORITY=68, IF=69, IGNORE=70, IN=71, INDEX=72, INFILE=73, 
		INNER=74, INOUT=75, INSERT=76, INTERVAL=77, INTO=78, IS=79, ITERATE=80, 
		JOIN=81, KEY=82, KEYS=83, KILL=84, LEADING=85, LEAVE=86, LEFT=87, LIKE=88, 
		LIMIT=89, LINEAR=90, LINES=91, LOAD=92, LOCK=93, LOOP=94, LOW_PRIORITY=95, 
		MASTER_BIND=96, MASTER_SSL_VERIFY_SERVER_CERT=97, MATCH=98, MAXVALUE=99, 
		MODIFIES=100, NATURAL=101, NOT=102, NO_WRITE_TO_BINLOG=103, NULL_LITERAL=104, 
		NUMBER=105, ON=106, OPTIMIZE=107, OPTION=108, OPTIONALLY=109, OR=110, 
		ORDER=111, OUT=112, OUTER=113, OUTFILE=114, PARTITION=115, PRIMARY=116, 
		PROCEDURE=117, PURGE=118, RANGE=119, READ=120, READS=121, REFERENCES=122, 
		REGEXP=123, RELEASE=124, RENAME=125, REPEAT=126, REPLACE=127, REQUIRE=128, 
		RESIGNAL=129, RESTRICT=130, RETURN=131, REVOKE=132, RIGHT=133, RLIKE=134, 
		SCHEMA=135, SCHEMAS=136, SELECT=137, SET=138, SEPARATOR=139, SHOW=140, 
		SIGNAL=141, SPATIAL=142, SQL=143, SQLEXCEPTION=144, SQLSTATE=145, SQLWARNING=146, 
		SQL_BIG_RESULT=147, SQL_CALC_FOUND_ROWS=148, SQL_SMALL_RESULT=149, SSL=150, 
		STACKED=151, STARTING=152, STRAIGHT_JOIN=153, TABLE=154, TERMINATED=155, 
		THEN=156, TO=157, TRAILING=158, TRIGGER=159, TRUE=160, UNDO=161, UNION=162, 
		UNIQUE=163, UNLOCK=164, UNSIGNED=165, UPDATE=166, USAGE=167, USE=168, 
		USING=169, VALUES=170, WHEN=171, WHERE=172, WHILE=173, WITH=174, WRITE=175, 
		XOR=176, ZEROFILL=177, TINYINT=178, SMALLINT=179, MEDIUMINT=180, MIDDLEINT=181, 
		INT=182, INT1=183, INT2=184, INT3=185, INT4=186, INT8=187, INTEGER=188, 
		BIGINT=189, REAL=190, DOUBLE=191, PRECISION=192, FLOAT=193, FLOAT4=194, 
		FLOAT8=195, DECIMAL=196, DEC=197, NUMERIC=198, DATE=199, TIME=200, TIMESTAMP=201, 
		DATETIME=202, YEAR=203, CHAR=204, VARCHAR=205, NVARCHAR=206, NATIONAL=207, 
		BINARY=208, VARBINARY=209, TINYBLOB=210, BLOB=211, MEDIUMBLOB=212, LONG=213, 
		LONGBLOB=214, TINYTEXT=215, TEXT=216, MEDIUMTEXT=217, LONGTEXT=218, ENUM=219, 
		VARYING=220, SERIAL=221, YEAR_MONTH=222, DAY_HOUR=223, DAY_MINUTE=224, 
		DAY_SECOND=225, HOUR_MINUTE=226, HOUR_SECOND=227, MINUTE_SECOND=228, SECOND_MICROSECOND=229, 
		MINUTE_MICROSECOND=230, HOUR_MICROSECOND=231, DAY_MICROSECOND=232, JSON_VALID=233, 
		JSON_SCHEMA_VALID=234, AVG=235, BIT_AND=236, BIT_OR=237, BIT_XOR=238, 
		COUNT=239, GROUP_CONCAT=240, MAX=241, MIN=242, STD=243, STDDEV=244, STDDEV_POP=245, 
		STDDEV_SAMP=246, SUM=247, VAR_POP=248, VAR_SAMP=249, VARIANCE=250, CURRENT_DATE=251, 
		CURRENT_TIME=252, CURRENT_TIMESTAMP=253, LOCALTIME=254, CURDATE=255, CURTIME=256, 
		DATE_ADD=257, DATE_SUB=258, EXTRACT=259, LOCALTIMESTAMP=260, NOW=261, 
		POSITION=262, SUBSTR=263, SUBSTRING=264, SYSDATE=265, TRIM=266, UTC_DATE=267, 
		UTC_TIME=268, UTC_TIMESTAMP=269, ACCOUNT=270, ACTION=271, AFTER=272, AGGREGATE=273, 
		ALGORITHM=274, ANY=275, AT=276, AUTHORS=277, AUTOCOMMIT=278, AUTOEXTEND_SIZE=279, 
		AUTO_INCREMENT=280, AVG_ROW_LENGTH=281, BEGIN=282, BINLOG=283, BIT=284, 
		BLOCK=285, BOOL=286, BOOLEAN=287, BTREE=288, CACHE=289, CASCADED=290, 
		CHAIN=291, CHANGED=292, CHANNEL=293, CHECKSUM=294, PAGE_CHECKSUM=295, 
		CIPHER=296, CLASS_ORIGIN=297, CLIENT=298, CLOSE=299, COALESCE=300, CODE=301, 
		COLUMNS=302, COLUMN_FORMAT=303, COLUMN_NAME=304, COMMENT=305, COMMIT=306, 
		COMPACT=307, COMPLETION=308, COMPRESSED=309, COMPRESSION=310, CONCURRENT=311, 
		CONNECTION=312, CONSISTENT=313, CONSTRAINT_CATALOG=314, CONSTRAINT_SCHEMA=315, 
		CONSTRAINT_NAME=316, CONTAINS=317, CONTEXT=318, CONTRIBUTORS=319, COPY=320, 
		CPU=321, CURSOR_NAME=322, DATA=323, DATAFILE=324, DEALLOCATE=325, DEFAULT_AUTH=326, 
		DEFINER=327, DELAY_KEY_WRITE=328, DES_KEY_FILE=329, DIRECTORY=330, DISABLE=331, 
		DISCARD=332, DISK=333, DO=334, DUMPFILE=335, DUPLICATE=336, DYNAMIC=337, 
		ENABLE=338, ENCRYPTION=339, END=340, ENDS=341, ENGINE=342, ENGINES=343, 
		ERROR=344, ERRORS=345, ESCAPE=346, EVEN=347, EVENT=348, EVENTS=349, EVERY=350, 
		EXCHANGE=351, EXCLUSIVE=352, EXPIRE=353, EXPORT=354, EXTENDED=355, EXTENT_SIZE=356, 
		FAST=357, FAULTS=358, FIELDS=359, FILE_BLOCK_SIZE=360, FILTER=361, FIRST=362, 
		FIXED=363, FLUSH=364, FOLLOWS=365, FOUND=366, FULL=367, FUNCTION=368, 
		GENERAL=369, GLOBAL=370, GRANTS=371, GROUP_REPLICATION=372, HANDLER=373, 
		HASH=374, HELP=375, HOST=376, HOSTS=377, IDENTIFIED=378, IGNORE_SERVER_IDS=379, 
		IMPORT=380, INDEXES=381, INITIAL_SIZE=382, INPLACE=383, INSERT_METHOD=384, 
		INSTALL=385, INSTANCE=386, INVISIBLE=387, INVOKER=388, IO=389, IO_THREAD=390, 
		IPC=391, ISOLATION=392, ISSUER=393, JSON=394, KEY_BLOCK_SIZE=395, LANGUAGE=396, 
		LAST=397, LEAVES=398, LESS=399, LEVEL=400, LIST=401, LOCAL=402, LOGFILE=403, 
		LOGS=404, MASTER=405, MASTER_AUTO_POSITION=406, MASTER_CONNECT_RETRY=407, 
		MASTER_DELAY=408, MASTER_HEARTBEAT_PERIOD=409, MASTER_HOST=410, MASTER_LOG_FILE=411, 
		MASTER_LOG_POS=412, MASTER_PASSWORD=413, MASTER_PORT=414, MASTER_RETRY_COUNT=415, 
		MASTER_SSL=416, MASTER_SSL_CA=417, MASTER_SSL_CAPATH=418, MASTER_SSL_CERT=419, 
		MASTER_SSL_CIPHER=420, MASTER_SSL_CRL=421, MASTER_SSL_CRLPATH=422, MASTER_SSL_KEY=423, 
		MASTER_TLS_VERSION=424, MASTER_USER=425, MAX_CONNECTIONS_PER_HOUR=426, 
		MAX_QUERIES_PER_HOUR=427, MAX_ROWS=428, MAX_SIZE=429, MAX_UPDATES_PER_HOUR=430, 
		MAX_USER_CONNECTIONS=431, MEDIUM=432, MEMBER=433, MERGE=434, MESSAGE_TEXT=435, 
		MID=436, MIGRATE=437, MIN_ROWS=438, MODE=439, MODIFY=440, MUTEX=441, MYSQL=442, 
		MYSQL_ERRNO=443, NAME=444, NAMES=445, NCHAR=446, NEVER=447, NEXT=448, 
		NO=449, NODEGROUP=450, NONE=451, OFFLINE=452, OFFSET=453, OF=454, OJ=455, 
		OLD_PASSWORD=456, ONE=457, ONLINE=458, ONLY=459, OPEN=460, OPTIMIZER_COSTS=461, 
		OPTIONS=462, OWNER=463, PACK_KEYS=464, PAGE=465, PARSER=466, PARTIAL=467, 
		PARTITIONING=468, PARTITIONS=469, PASSWORD=470, PHASE=471, PLUGIN=472, 
		PLUGIN_DIR=473, PLUGINS=474, PORT=475, PRECEDES=476, PREPARE=477, PRESERVE=478, 
		PREV=479, PROCESSLIST=480, PROFILE=481, PROFILES=482, PROXY=483, QUERY=484, 
		QUICK=485, REBUILD=486, RECOVER=487, REDO_BUFFER_SIZE=488, REDUNDANT=489, 
		RELAY=490, RELAY_LOG_FILE=491, RELAY_LOG_POS=492, RELAYLOG=493, REMOVE=494, 
		REORGANIZE=495, REPAIR=496, REPLICATE_DO_DB=497, REPLICATE_DO_TABLE=498, 
		REPLICATE_IGNORE_DB=499, REPLICATE_IGNORE_TABLE=500, REPLICATE_REWRITE_DB=501, 
		REPLICATE_WILD_DO_TABLE=502, REPLICATE_WILD_IGNORE_TABLE=503, REPLICATION=504, 
		RESET=505, RESUME=506, RETURNED_SQLSTATE=507, RETURNS=508, ROLE=509, ROLLBACK=510, 
		ROLLUP=511, ROTATE=512, ROW=513, ROWS=514, ROW_FORMAT=515, SAVEPOINT=516, 
		SCHEDULE=517, SECURITY=518, SERVER=519, SESSION=520, SHARE=521, SHARED=522, 
		SIGNED=523, SIMPLE=524, SLAVE=525, SLOW=526, SNAPSHOT=527, SOCKET=528, 
		SOME=529, SONAME=530, SOUNDS=531, SOURCE=532, SQL_AFTER_GTIDS=533, SQL_AFTER_MTS_GAPS=534, 
		SQL_BEFORE_GTIDS=535, SQL_BUFFER_RESULT=536, SQL_CACHE=537, SQL_NO_CACHE=538, 
		SQL_THREAD=539, START=540, STARTS=541, STATS_AUTO_RECALC=542, STATS_PERSISTENT=543, 
		STATS_SAMPLE_PAGES=544, STATUS=545, STOP=546, STORAGE=547, STORED=548, 
		STRING=549, SUBCLASS_ORIGIN=550, SUBJECT=551, SUBPARTITION=552, SUBPARTITIONS=553, 
		SUSPEND=554, SWAPS=555, SWITCHES=556, TABLE_NAME=557, TABLESPACE=558, 
		TEMPORARY=559, TEMPTABLE=560, THAN=561, TRADITIONAL=562, TRANSACTION=563, 
		TRANSACTIONAL=564, TRIGGERS=565, TRUNCATE=566, UNDEFINED=567, UNDOFILE=568, 
		UNDO_BUFFER_SIZE=569, UNINSTALL=570, UNKNOWN=571, UNTIL=572, UPGRADE=573, 
		USER=574, USE_FRM=575, USER_RESOURCES=576, VALIDATION=577, VALUE=578, 
		VARIABLES=579, VIEW=580, VIRTUAL=581, VISIBLE=582, WAIT=583, WARNINGS=584, 
		WITHOUT=585, WORK=586, WRAPPER=587, X509=588, XA=589, XML=590, EUR=591, 
		USA=592, JIS=593, ISO=594, INTERNAL=595, QUARTER=596, MONTH=597, DAY=598, 
		HOUR=599, MINUTE=600, WEEK=601, SECOND=602, MICROSECOND=603, TABLES=604, 
		ROUTINE=605, EXECUTE=606, FILE=607, PROCESS=608, RELOAD=609, SHUTDOWN=610, 
		SUPER=611, PRIVILEGES=612, APPLICATION_PASSWORD_ADMIN=613, AUDIT_ADMIN=614, 
		BACKUP_ADMIN=615, BINLOG_ADMIN=616, BINLOG_ENCRYPTION_ADMIN=617, CLONE_ADMIN=618, 
		CONNECTION_ADMIN=619, ENCRYPTION_KEY_ADMIN=620, FIREWALL_ADMIN=621, FIREWALL_USER=622, 
		FLUSH_OPTIMIZER_COSTS=623, FLUSH_STATUS=624, FLUSH_TABLES=625, FLUSH_USER_RESOURCES=626, 
		GROUP_REPLICATION_ADMIN=627, INNODB_REDO_LOG_ARCHIVE=628, INNODB_REDO_LOG_ENABLE=629, 
		NDB_STORED_USER=630, PERSIST_RO_VARIABLES_ADMIN=631, REPLICATION_APPLIER=632, 
		REPLICATION_SLAVE_ADMIN=633, RESOURCE_GROUP_ADMIN=634, RESOURCE_GROUP_USER=635, 
		ROLE_ADMIN=636, SERVICE_CONNECTION_ADMIN=637, SESSION_VARIABLES_ADMIN=638, 
		SET_USER_ID=639, SHOW_ROUTINE=640, SYSTEM_VARIABLES_ADMIN=641, TABLE_ENCRYPTION_ADMIN=642, 
		VERSION_TOKEN_ADMIN=643, XA_RECOVER_ADMIN=644, ARMSCII8=645, ASCII=646, 
		BIG5=647, CP1250=648, CP1251=649, CP1256=650, CP1257=651, CP850=652, CP852=653, 
		CP866=654, CP932=655, DEC8=656, EUCJPMS=657, EUCKR=658, GB2312=659, GBK=660, 
		GEOSTD8=661, GREEK=662, HEBREW=663, HP8=664, KEYBCS2=665, KOI8R=666, KOI8U=667, 
		LATIN1=668, LATIN2=669, LATIN5=670, LATIN7=671, MACCE=672, MACROMAN=673, 
		SJIS=674, SWE7=675, TIS620=676, UCS2=677, UJIS=678, UTF16=679, UTF16LE=680, 
		UTF32=681, UTF8=682, UTF8MB3=683, UTF8MB4=684, ARCHIVE=685, BLACKHOLE=686, 
		CSV=687, FEDERATED=688, INNODB=689, MEMORY=690, MRG_MYISAM=691, MYISAM=692, 
		NDB=693, NDBCLUSTER=694, PERFORMANCE_SCHEMA=695, TOKUDB=696, REPEATABLE=697, 
		COMMITTED=698, UNCOMMITTED=699, SERIALIZABLE=700, GEOMETRYCOLLECTION=701, 
		GEOMCOLLECTION=702, GEOMETRY=703, LINESTRING=704, MULTILINESTRING=705, 
		MULTIPOINT=706, MULTIPOLYGON=707, POINT=708, POLYGON=709, ABS=710, ACOS=711, 
		ADDDATE=712, ADDTIME=713, AES_DECRYPT=714, AES_ENCRYPT=715, AREA=716, 
		ASBINARY=717, ASIN=718, ASTEXT=719, ASWKB=720, ASWKT=721, ASYMMETRIC_DECRYPT=722, 
		ASYMMETRIC_DERIVE=723, ASYMMETRIC_ENCRYPT=724, ASYMMETRIC_SIGN=725, ASYMMETRIC_VERIFY=726, 
		ATAN=727, ATAN2=728, BENCHMARK=729, BIN=730, BIT_COUNT=731, BIT_LENGTH=732, 
		BUFFER=733, CATALOG_NAME=734, CEIL=735, CEILING=736, CENTROID=737, CHARACTER_LENGTH=738, 
		CHARSET=739, CHAR_LENGTH=740, COERCIBILITY=741, COLLATION=742, COMPRESS=743, 
		CONCAT=744, CONCAT_WS=745, CONNECTION_ID=746, CONV=747, CONVERT_TZ=748, 
		COS=749, COT=750, CRC32=751, CREATE_ASYMMETRIC_PRIV_KEY=752, CREATE_ASYMMETRIC_PUB_KEY=753, 
		CREATE_DH_PARAMETERS=754, CREATE_DIGEST=755, CROSSES=756, DATEDIFF=757, 
		DATE_FORMAT=758, DAYNAME=759, DAYOFMONTH=760, DAYOFWEEK=761, DAYOFYEAR=762, 
		DECODE=763, DEGREES=764, DES_DECRYPT=765, DES_ENCRYPT=766, DIMENSION=767, 
		DISJOINT=768, ELT=769, ENCODE=770, ENCRYPT=771, ENDPOINT=772, ENVELOPE=773, 
		EQUALS=774, EXP=775, EXPORT_SET=776, EXTERIORRING=777, EXTRACTVALUE=778, 
		FIELD=779, FIND_IN_SET=780, FLOOR=781, FORMAT=782, FOUND_ROWS=783, FROM_BASE64=784, 
		FROM_DAYS=785, FROM_UNIXTIME=786, GEOMCOLLFROMTEXT=787, GEOMCOLLFROMWKB=788, 
		GEOMETRYCOLLECTIONFROMTEXT=789, GEOMETRYCOLLECTIONFROMWKB=790, GEOMETRYFROMTEXT=791, 
		GEOMETRYFROMWKB=792, GEOMETRYN=793, GEOMETRYTYPE=794, GEOMFROMTEXT=795, 
		GEOMFROMWKB=796, GET_FORMAT=797, GET_LOCK=798, GLENGTH=799, GREATEST=800, 
		GTID_SUBSET=801, GTID_SUBTRACT=802, HEX=803, IFNULL=804, INET6_ATON=805, 
		INET6_NTOA=806, INET_ATON=807, INET_NTOA=808, INSTR=809, INTERIORRINGN=810, 
		INTERSECTS=811, ISCLOSED=812, ISEMPTY=813, ISNULL=814, ISSIMPLE=815, IS_FREE_LOCK=816, 
		IS_IPV4=817, IS_IPV4_COMPAT=818, IS_IPV4_MAPPED=819, IS_IPV6=820, IS_USED_LOCK=821, 
		LAST_INSERT_ID=822, LCASE=823, LEAST=824, LENGTH=825, LINEFROMTEXT=826, 
		LINEFROMWKB=827, LINESTRINGFROMTEXT=828, LINESTRINGFROMWKB=829, LN=830, 
		LOAD_FILE=831, LOCATE=832, LOG=833, LOG10=834, LOG2=835, LOWER=836, LPAD=837, 
		LTRIM=838, MAKEDATE=839, MAKETIME=840, MAKE_SET=841, MASTER_POS_WAIT=842, 
		MBRCONTAINS=843, MBRDISJOINT=844, MBREQUAL=845, MBRINTERSECTS=846, MBROVERLAPS=847, 
		MBRTOUCHES=848, MBRWITHIN=849, MD5=850, MLINEFROMTEXT=851, MLINEFROMWKB=852, 
		MONTHNAME=853, MPOINTFROMTEXT=854, MPOINTFROMWKB=855, MPOLYFROMTEXT=856, 
		MPOLYFROMWKB=857, MULTILINESTRINGFROMTEXT=858, MULTILINESTRINGFROMWKB=859, 
		MULTIPOINTFROMTEXT=860, MULTIPOINTFROMWKB=861, MULTIPOLYGONFROMTEXT=862, 
		MULTIPOLYGONFROMWKB=863, NAME_CONST=864, NULLIF=865, NUMGEOMETRIES=866, 
		NUMINTERIORRINGS=867, NUMPOINTS=868, OCT=869, OCTET_LENGTH=870, ORD=871, 
		OVERLAPS=872, PERIOD_ADD=873, PERIOD_DIFF=874, PI=875, POINTFROMTEXT=876, 
		POINTFROMWKB=877, POINTN=878, POLYFROMTEXT=879, POLYFROMWKB=880, POLYGONFROMTEXT=881, 
		POLYGONFROMWKB=882, POW=883, POWER=884, QUOTE=885, RADIANS=886, RAND=887, 
		RANDOM_BYTES=888, RELEASE_LOCK=889, REVERSE=890, ROUND=891, ROW_COUNT=892, 
		RPAD=893, RTRIM=894, SEC_TO_TIME=895, SESSION_USER=896, SHA=897, SHA1=898, 
		SHA2=899, SCHEMA_NAME=900, SIGN=901, SIN=902, SLEEP=903, SOUNDEX=904, 
		SQL_THREAD_WAIT_AFTER_GTIDS=905, SQRT=906, SRID=907, STARTPOINT=908, STRCMP=909, 
		STR_TO_DATE=910, ST_AREA=911, ST_ASBINARY=912, ST_ASTEXT=913, ST_ASWKB=914, 
		ST_ASWKT=915, ST_BUFFER=916, ST_CENTROID=917, ST_CONTAINS=918, ST_CROSSES=919, 
		ST_DIFFERENCE=920, ST_DIMENSION=921, ST_DISJOINT=922, ST_DISTANCE=923, 
		ST_ENDPOINT=924, ST_ENVELOPE=925, ST_EQUALS=926, ST_EXTERIORRING=927, 
		ST_GEOMCOLLFROMTEXT=928, ST_GEOMCOLLFROMTXT=929, ST_GEOMCOLLFROMWKB=930, 
		ST_GEOMETRYCOLLECTIONFROMTEXT=931, ST_GEOMETRYCOLLECTIONFROMWKB=932, ST_GEOMETRYFROMTEXT=933, 
		ST_GEOMETRYFROMWKB=934, ST_GEOMETRYN=935, ST_GEOMETRYTYPE=936, ST_GEOMFROMTEXT=937, 
		ST_GEOMFROMWKB=938, ST_INTERIORRINGN=939, ST_INTERSECTION=940, ST_INTERSECTS=941, 
		ST_ISCLOSED=942, ST_ISEMPTY=943, ST_ISSIMPLE=944, ST_LINEFROMTEXT=945, 
		ST_LINEFROMWKB=946, ST_LINESTRINGFROMTEXT=947, ST_LINESTRINGFROMWKB=948, 
		ST_NUMGEOMETRIES=949, ST_NUMINTERIORRING=950, ST_NUMINTERIORRINGS=951, 
		ST_NUMPOINTS=952, ST_OVERLAPS=953, ST_POINTFROMTEXT=954, ST_POINTFROMWKB=955, 
		ST_POINTN=956, ST_POLYFROMTEXT=957, ST_POLYFROMWKB=958, ST_POLYGONFROMTEXT=959, 
		ST_POLYGONFROMWKB=960, ST_SRID=961, ST_STARTPOINT=962, ST_SYMDIFFERENCE=963, 
		ST_TOUCHES=964, ST_UNION=965, ST_WITHIN=966, ST_X=967, ST_Y=968, SUBDATE=969, 
		SUBSTRING_INDEX=970, SUBTIME=971, SYSTEM_USER=972, TAN=973, TIMEDIFF=974, 
		TIMESTAMPADD=975, TIMESTAMPDIFF=976, TIME_FORMAT=977, TIME_TO_SEC=978, 
		TOUCHES=979, TO_BASE64=980, TO_DAYS=981, TO_SECONDS=982, UCASE=983, UNCOMPRESS=984, 
		UNCOMPRESSED_LENGTH=985, UNHEX=986, UNIX_TIMESTAMP=987, UPDATEXML=988, 
		UPPER=989, UUID=990, UUID_SHORT=991, VALIDATE_PASSWORD_STRENGTH=992, VERSION=993, 
		WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS=994, WEEKDAY=995, WEEKOFYEAR=996, WEIGHT_STRING=997, 
		WITHIN=998, YEARWEEK=999, Y_FUNCTION=1000, X_FUNCTION=1001, VAR_ASSIGN=1002, 
		PLUS_ASSIGN=1003, MINUS_ASSIGN=1004, MULT_ASSIGN=1005, DIV_ASSIGN=1006, 
		MOD_ASSIGN=1007, AND_ASSIGN=1008, XOR_ASSIGN=1009, OR_ASSIGN=1010, STAR=1011, 
		DIVIDE=1012, MODULE=1013, PLUS=1014, MINUSMINUS=1015, MINUS=1016, DIV=1017, 
		MOD=1018, EQUAL_SYMBOL=1019, GREATER_SYMBOL=1020, LESS_SYMBOL=1021, EXCLAMATION_SYMBOL=1022, 
		BIT_NOT_OP=1023, BIT_OR_OP=1024, BIT_AND_OP=1025, BIT_XOR_OP=1026, DOT=1027, 
		LR_BRACKET=1028, RR_BRACKET=1029, COMMA=1030, SEMI=1031, AT_SIGN=1032, 
		ZERO_DECIMAL=1033, ONE_DECIMAL=1034, TWO_DECIMAL=1035, SINGLE_QUOTE_SYMB=1036, 
		DOUBLE_QUOTE_SYMB=1037, REVERSE_QUOTE_SYMB=1038, COLON_SYMB=1039, CHARSET_REVERSE_QOUTE_STRING=1040, 
		FILESIZE_LITERAL=1041, START_NATIONAL_STRING_LITERAL=1042, STRING_LITERAL=1043, 
		DECIMAL_LITERAL=1044, HEXADECIMAL_LITERAL=1045, REAL_LITERAL=1046, NULL_SPEC_LITERAL=1047, 
		BIT_STRING=1048, STRING_CHARSET_NAME=1049, DOT_ID=1050, ID=1051, REVERSE_QUOTE_ID=1052, 
		STRING_USER_NAME=1053, IP_ADDRESS=1054, LOCAL_ID=1055, GLOBAL_ID=1056, 
		ERROR_RECONGNIGION=1057;
	public static final int
		RULE_root = 0, RULE_sqlStatements = 1, RULE_sqlStatement = 2, RULE_emptyStatement = 3, 
		RULE_ddlStatement = 4, RULE_dmlStatement = 5, RULE_createIndex = 6, RULE_indexType = 7, 
		RULE_indexOption = 8, RULE_createTable = 9, RULE_ifNotExists = 10, RULE_createDefinitions = 11, 
		RULE_createDefinition = 12, RULE_columnDefinition = 13, RULE_columnConstraint = 14, 
		RULE_defaultValue = 15, RULE_currentTimestamp = 16, RULE_tableConstraint = 17, 
		RULE_referenceDefinition = 18, RULE_referenceAction = 19, RULE_referenceControlType = 20, 
		RULE_indexColumnDefinition = 21, RULE_tableOption = 22, RULE_tablespaceStorage = 23, 
		RULE_partitionDefinitions = 24, RULE_partitionFunctionDefinition = 25, 
		RULE_subpartitionFunctionDefinition = 26, RULE_partitionDefinition = 27, 
		RULE_partitionDefinerAtom = 28, RULE_partitionDefinerVector = 29, RULE_subpartitionDefinition = 30, 
		RULE_partitionOption = 31, RULE_intervalType = 32, RULE_deleteStatement = 33, 
		RULE_insertStatement = 34, RULE_selectStatement = 35, RULE_updateStatement = 36, 
		RULE_insertStatementValue = 37, RULE_updatedElement = 38, RULE_assignmentField = 39, 
		RULE_lockClause = 40, RULE_singleDeleteStatement = 41, RULE_multipleDeleteStatement = 42, 
		RULE_singleUpdateStatement = 43, RULE_multipleUpdateStatement = 44, RULE_orderByClause = 45, 
		RULE_orderByExpression = 46, RULE_tableSources = 47, RULE_tableSource = 48, 
		RULE_tableSourceItem = 49, RULE_indexHint = 50, RULE_indexHintType = 51, 
		RULE_joinPart = 52, RULE_queryExpression = 53, RULE_queryExpressionNointo = 54, 
		RULE_querySpecification = 55, RULE_querySpecificationNointo = 56, RULE_unionParenthesis = 57, 
		RULE_unionStatement = 58, RULE_selectSpec = 59, RULE_selectElements = 60, 
		RULE_selectElement = 61, RULE_selectIntoExpression = 62, RULE_selectFieldsInto = 63, 
		RULE_selectLinesInto = 64, RULE_fromClause = 65, RULE_groupByClause = 66, 
		RULE_havingClause = 67, RULE_groupByItem = 68, RULE_limitClause = 69, 
		RULE_limitClauseAtom = 70, RULE_describeObjectClause = 71, RULE_fullId = 72, 
		RULE_tableName = 73, RULE_fullColumnName = 74, RULE_indexColumnName = 75, 
		RULE_mysqlVariable = 76, RULE_charsetName = 77, RULE_collationName = 78, 
		RULE_engineName = 79, RULE_uuidSet = 80, RULE_xid = 81, RULE_xuidStringId = 82, 
		RULE_authPlugin = 83, RULE_uid = 84, RULE_simpleId = 85, RULE_dottedId = 86, 
		RULE_decimalLiteral = 87, RULE_fileSizeLiteral = 88, RULE_stringLiteral = 89, 
		RULE_booleanLiteral = 90, RULE_hexadecimalLiteral = 91, RULE_nullNotnull = 92, 
		RULE_constant = 93, RULE_dataType = 94, RULE_collectionOptions = 95, RULE_convertedDataType = 96, 
		RULE_lengthOneDimension = 97, RULE_lengthTwoDimension = 98, RULE_lengthTwoOptionalDimension = 99, 
		RULE_uidList = 100, RULE_tables = 101, RULE_indexColumnNames = 102, RULE_expressions = 103, 
		RULE_expressionsWithDefaults = 104, RULE_expressionOrDefault = 105, RULE_functionCall = 106, 
		RULE_specificFunction = 107, RULE_caseFuncAlternative = 108, RULE_levelsInWeightString = 109, 
		RULE_levelInWeightListElement = 110, RULE_aggregateWindowedFunction = 111, 
		RULE_scalarFunctionName = 112, RULE_passwordFunctionClause = 113, RULE_functionArgs = 114, 
		RULE_functionArg = 115, RULE_expression = 116, RULE_predicate = 117, RULE_expressionAtom = 118, 
		RULE_unaryOperator = 119, RULE_comparisonOperator = 120, RULE_logicalOperator = 121, 
		RULE_bitOperator = 122, RULE_mathOperator = 123, RULE_jsonOperator = 124, 
		RULE_charsetNameBase = 125, RULE_transactionLevelBase = 126, RULE_privilegesBase = 127, 
		RULE_intervalTypeBase = 128, RULE_dataTypeBase = 129, RULE_keywordsCanBeId = 130, 
		RULE_functionNameBase = 131;
	private static String[] makeRuleNames() {
		return new String[] {
			"root", "sqlStatements", "sqlStatement", "emptyStatement", "ddlStatement", 
			"dmlStatement", "createIndex", "indexType", "indexOption", "createTable", 
			"ifNotExists", "createDefinitions", "createDefinition", "columnDefinition", 
			"columnConstraint", "defaultValue", "currentTimestamp", "tableConstraint", 
			"referenceDefinition", "referenceAction", "referenceControlType", "indexColumnDefinition", 
			"tableOption", "tablespaceStorage", "partitionDefinitions", "partitionFunctionDefinition", 
			"subpartitionFunctionDefinition", "partitionDefinition", "partitionDefinerAtom", 
			"partitionDefinerVector", "subpartitionDefinition", "partitionOption", 
			"intervalType", "deleteStatement", "insertStatement", "selectStatement", 
			"updateStatement", "insertStatementValue", "updatedElement", "assignmentField", 
			"lockClause", "singleDeleteStatement", "multipleDeleteStatement", "singleUpdateStatement", 
			"multipleUpdateStatement", "orderByClause", "orderByExpression", "tableSources", 
			"tableSource", "tableSourceItem", "indexHint", "indexHintType", "joinPart", 
			"queryExpression", "queryExpressionNointo", "querySpecification", "querySpecificationNointo", 
			"unionParenthesis", "unionStatement", "selectSpec", "selectElements", 
			"selectElement", "selectIntoExpression", "selectFieldsInto", "selectLinesInto", 
			"fromClause", "groupByClause", "havingClause", "groupByItem", "limitClause", 
			"limitClauseAtom", "describeObjectClause", "fullId", "tableName", "fullColumnName", 
			"indexColumnName", "mysqlVariable", "charsetName", "collationName", "engineName", 
			"uuidSet", "xid", "xuidStringId", "authPlugin", "uid", "simpleId", "dottedId", 
			"decimalLiteral", "fileSizeLiteral", "stringLiteral", "booleanLiteral", 
			"hexadecimalLiteral", "nullNotnull", "constant", "dataType", "collectionOptions", 
			"convertedDataType", "lengthOneDimension", "lengthTwoDimension", "lengthTwoOptionalDimension", 
			"uidList", "tables", "indexColumnNames", "expressions", "expressionsWithDefaults", 
			"expressionOrDefault", "functionCall", "specificFunction", "caseFuncAlternative", 
			"levelsInWeightString", "levelInWeightListElement", "aggregateWindowedFunction", 
			"scalarFunctionName", "passwordFunctionClause", "functionArgs", "functionArg", 
			"expression", "predicate", "expressionAtom", "unaryOperator", "comparisonOperator", 
			"logicalOperator", "bitOperator", "mathOperator", "jsonOperator", "charsetNameBase", 
			"transactionLevelBase", "privilegesBase", "intervalTypeBase", "dataTypeBase", 
			"keywordsCanBeId", "functionNameBase"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, null, null, null, null, "'ADD'", "'ALL'", "'ALTER'", "'ALWAYS'", 
			"'ANALYZE'", null, "'AS'", "'ASC'", "'BEFORE'", null, "'BOTH'", "'BY'", 
			"'CALL'", "'CASCADE'", "'CASE'", "'CAST'", "'CHANGE'", "'CHARACTER'", 
			null, "'COLLATE'", "'COLUMN'", "'CONDITION'", "'CONSTRAINT'", "'CONTINUE'", 
			"'CONVERT'", null, "'CROSS'", "'CURRENT'", "'CURRENT_USER'", "'CURSOR'", 
			"'DATABASE'", "'DATABASES'", "'DECLARE'", "'DEFAULT'", "'DELAYED'", null, 
			"'DESC'", "'DESCRIBE'", "'DETERMINISTIC'", "'DIAGNOSTICS'", "'DISTINCT'", 
			"'DISTINCTROW'", "'DROP'", "'EACH'", "'ELSE'", "'ELSEIF'", "'ENCLOSED'", 
			"'ESCAPED'", "'EXISTS'", "'EXIT'", "'EXPLAIN'", "'FALSE'", "'FETCH'", 
			"'FOR'", "'FORCE'", "'FOREIGN'", null, "'FULLTEXT'", "'GENERATED'", "'GET'", 
			"'GRANT'", "'GROUP'", "'HAVING'", "'HIGH_PRIORITY'", "'IF'", "'IGNORE'", 
			"'IN'", null, "'INFILE'", "'INNER'", "'INOUT'", null, "'INTERVAL'", "'INTO'", 
			"'IS'", "'ITERATE'", "'JOIN'", null, "'KEYS'", "'KILL'", "'LEADING'", 
			"'LEAVE'", "'LEFT'", "'LIKE'", "'LIMIT'", "'LINEAR'", "'LINES'", "'LOAD'", 
			"'LOCK'", "'LOOP'", "'LOW_PRIORITY'", "'MASTER_BIND'", "'MASTER_SSL_VERIFY_SERVER_CERT'", 
			"'MATCH'", "'MAXVALUE'", "'MODIFIES'", "'NATURAL'", "'NOT'", "'NO_WRITE_TO_BINLOG'", 
			"'NULL'", "'NUMBER'", "'ON'", "'OPTIMIZE'", "'OPTION'", "'OPTIONALLY'", 
			null, "'ORDER'", "'OUT'", "'OUTER'", "'OUTFILE'", "'PARTITION'", null, 
			"'PROCEDURE'", "'PURGE'", "'RANGE'", "'READ'", "'READS'", "'REFERENCES'", 
			"'REGEXP'", "'RELEASE'", "'RENAME'", "'REPEAT'", "'REPLACE'", "'REQUIRE'", 
			"'RESIGNAL'", "'RESTRICT'", "'RETURN'", "'REVOKE'", "'RIGHT'", "'RLIKE'", 
			"'SCHEMA'", "'SCHEMAS'", null, null, "'SEPARATOR'", "'SHOW'", "'SIGNAL'", 
			"'SPATIAL'", "'SQL'", "'SQLEXCEPTION'", "'SQLSTATE'", "'SQLWARNING'", 
			"'SQL_BIG_RESULT'", "'SQL_CALC_FOUND_ROWS'", "'SQL_SMALL_RESULT'", "'SSL'", 
			"'STACKED'", "'STARTING'", "'STRAIGHT_JOIN'", null, "'TERMINATED'", "'THEN'", 
			"'TO'", "'TRAILING'", "'TRIGGER'", "'TRUE'", "'UNDO'", "'UNION'", "'UNIQUE'", 
			"'UNLOCK'", "'UNSIGNED'", null, "'USAGE'", "'USE'", "'USING'", null, 
			"'WHEN'", null, "'WHILE'", "'WITH'", "'WRITE'", null, "'ZEROFILL'", "'TINYINT'", 
			"'SMALLINT'", "'MEDIUMINT'", "'MIDDLEINT'", null, "'INT1'", "'INT2'", 
			"'INT3'", "'INT4'", "'INT8'", null, "'BIGINT'", "'REAL'", "'DOUBLE'", 
			"'PRECISION'", "'FLOAT'", "'FLOAT4'", "'FLOAT8'", "'DECIMAL'", "'DEC'", 
			"'NUMERIC'", null, "'TIME'", "'TIMESTAMP'", "'DATETIME'", "'YEAR'", null, 
			null, "'NVARCHAR'", "'NATIONAL'", "'BINARY'", "'VARBINARY'", "'TINYBLOB'", 
			"'BLOB'", "'MEDIUMBLOB'", "'LONG'", "'LONGBLOB'", "'TINYTEXT'", "'TEXT'", 
			"'MEDIUMTEXT'", "'LONGTEXT'", "'ENUM'", "'VARYING'", "'SERIAL'", "'YEAR_MONTH'", 
			"'DAY_HOUR'", "'DAY_MINUTE'", "'DAY_SECOND'", "'HOUR_MINUTE'", "'HOUR_SECOND'", 
			"'MINUTE_SECOND'", "'SECOND_MICROSECOND'", "'MINUTE_MICROSECOND'", "'HOUR_MICROSECOND'", 
			"'DAY_MICROSECOND'", "'JSON_VALID'", "'JSON_SCHEMA_VALID'", "'AVG'", 
			"'BIT_AND'", "'BIT_OR'", "'BIT_XOR'", "'COUNT'", "'GROUP_CONCAT'", "'MAX'", 
			"'MIN'", "'STD'", "'STDDEV'", "'STDDEV_POP'", "'STDDEV_SAMP'", "'SUM'", 
			"'VAR_POP'", "'VAR_SAMP'", "'VARIANCE'", "'CURRENT_DATE'", "'CURRENT_TIME'", 
			"'CURRENT_TIMESTAMP'", "'LOCALTIME'", "'CURDATE'", "'CURTIME'", "'DATE_ADD'", 
			"'DATE_SUB'", "'EXTRACT'", "'LOCALTIMESTAMP'", "'NOW'", "'POSITION'", 
			"'SUBSTR'", "'SUBSTRING'", "'SYSDATE'", "'TRIM'", "'UTC_DATE'", "'UTC_TIME'", 
			"'UTC_TIMESTAMP'", "'ACCOUNT'", "'ACTION'", "'AFTER'", "'AGGREGATE'", 
			"'ALGORITHM'", "'ANY'", "'AT'", "'AUTHORS'", "'AUTOCOMMIT'", "'AUTOEXTEND_SIZE'", 
			"'AUTO_INCREMENT'", "'AVG_ROW_LENGTH'", "'BEGIN'", "'BINLOG'", "'BIT'", 
			"'BLOCK'", "'BOOL'", "'BOOLEAN'", "'BTREE'", "'CACHE'", "'CASCADED'", 
			"'CHAIN'", "'CHANGED'", "'CHANNEL'", "'CHECKSUM'", "'PAGE_CHECKSUM'", 
			"'CIPHER'", "'CLASS_ORIGIN'", "'CLIENT'", "'CLOSE'", "'COALESCE'", "'CODE'", 
			"'COLUMNS'", "'COLUMN_FORMAT'", "'COLUMN_NAME'", "'COMMENT'", "'COMMIT'", 
			"'COMPACT'", "'COMPLETION'", "'COMPRESSED'", "'COMPRESSION'", "'CONCURRENT'", 
			"'CONNECTION'", "'CONSISTENT'", "'CONSTRAINT_CATALOG'", "'CONSTRAINT_SCHEMA'", 
			"'CONSTRAINT_NAME'", "'CONTAINS'", "'CONTEXT'", "'CONTRIBUTORS'", "'COPY'", 
			"'CPU'", "'CURSOR_NAME'", "'DATA'", "'DATAFILE'", "'DEALLOCATE'", "'DEFAULT_AUTH'", 
			"'DEFINER'", "'DELAY_KEY_WRITE'", "'DES_KEY_FILE'", "'DIRECTORY'", "'DISABLE'", 
			"'DISCARD'", "'DISK'", "'DO'", "'DUMPFILE'", "'DUPLICATE'", "'DYNAMIC'", 
			"'ENABLE'", "'ENCRYPTION'", "'END'", "'ENDS'", "'ENGINE'", "'ENGINES'", 
			"'ERROR'", "'ERRORS'", "'ESCAPE'", "'EVEN'", "'EVENT'", "'EVENTS'", "'EVERY'", 
			"'EXCHANGE'", "'EXCLUSIVE'", "'EXPIRE'", "'EXPORT'", "'EXTENDED'", "'EXTENT_SIZE'", 
			"'FAST'", "'FAULTS'", "'FIELDS'", "'FILE_BLOCK_SIZE'", "'FILTER'", "'FIRST'", 
			"'FIXED'", "'FLUSH'", "'FOLLOWS'", "'FOUND'", "'FULL'", "'FUNCTION'", 
			"'GENERAL'", "'GLOBAL'", "'GRANTS'", "'GROUP_REPLICATION'", "'HANDLER'", 
			"'HASH'", "'HELP'", "'HOST'", "'HOSTS'", "'IDENTIFIED'", "'IGNORE_SERVER_IDS'", 
			"'IMPORT'", "'INDEXES'", "'INITIAL_SIZE'", "'INPLACE'", "'INSERT_METHOD'", 
			"'INSTALL'", "'INSTANCE'", "'INVISIBLE'", "'INVOKER'", "'IO'", "'IO_THREAD'", 
			"'IPC'", "'ISOLATION'", "'ISSUER'", "'JSON'", "'KEY_BLOCK_SIZE'", "'LANGUAGE'", 
			"'LAST'", "'LEAVES'", "'LESS'", "'LEVEL'", "'LIST'", "'LOCAL'", "'LOGFILE'", 
			"'LOGS'", "'MASTER'", "'MASTER_AUTO_POSITION'", "'MASTER_CONNECT_RETRY'", 
			"'MASTER_DELAY'", "'MASTER_HEARTBEAT_PERIOD'", "'MASTER_HOST'", "'MASTER_LOG_FILE'", 
			"'MASTER_LOG_POS'", "'MASTER_PASSWORD'", "'MASTER_PORT'", "'MASTER_RETRY_COUNT'", 
			"'MASTER_SSL'", "'MASTER_SSL_CA'", "'MASTER_SSL_CAPATH'", "'MASTER_SSL_CERT'", 
			"'MASTER_SSL_CIPHER'", "'MASTER_SSL_CRL'", "'MASTER_SSL_CRLPATH'", "'MASTER_SSL_KEY'", 
			"'MASTER_TLS_VERSION'", "'MASTER_USER'", "'MAX_CONNECTIONS_PER_HOUR'", 
			"'MAX_QUERIES_PER_HOUR'", "'MAX_ROWS'", "'MAX_SIZE'", "'MAX_UPDATES_PER_HOUR'", 
			"'MAX_USER_CONNECTIONS'", "'MEDIUM'", "'MEMBER'", "'MERGE'", "'MESSAGE_TEXT'", 
			"'MID'", "'MIGRATE'", "'MIN_ROWS'", "'MODE'", "'MODIFY'", "'MUTEX'", 
			"'MYSQL'", "'MYSQL_ERRNO'", "'NAME'", "'NAMES'", "'NCHAR'", "'NEVER'", 
			"'NEXT'", "'NO'", "'NODEGROUP'", "'NONE'", "'OFFLINE'", "'OFFSET'", "'OF'", 
			"'OJ'", "'OLD_PASSWORD'", "'ONE'", "'ONLINE'", "'ONLY'", "'OPEN'", "'OPTIMIZER_COSTS'", 
			"'OPTIONS'", "'OWNER'", "'PACK_KEYS'", "'PAGE'", "'PARSER'", "'PARTIAL'", 
			"'PARTITIONING'", "'PARTITIONS'", "'PASSWORD'", "'PHASE'", "'PLUGIN'", 
			"'PLUGIN_DIR'", "'PLUGINS'", "'PORT'", "'PRECEDES'", "'PREPARE'", "'PRESERVE'", 
			"'PREV'", "'PROCESSLIST'", "'PROFILE'", "'PROFILES'", "'PROXY'", "'QUERY'", 
			"'QUICK'", "'REBUILD'", "'RECOVER'", "'REDO_BUFFER_SIZE'", "'REDUNDANT'", 
			"'RELAY'", "'RELAY_LOG_FILE'", "'RELAY_LOG_POS'", "'RELAYLOG'", "'REMOVE'", 
			"'REORGANIZE'", "'REPAIR'", "'REPLICATE_DO_DB'", "'REPLICATE_DO_TABLE'", 
			"'REPLICATE_IGNORE_DB'", "'REPLICATE_IGNORE_TABLE'", "'REPLICATE_REWRITE_DB'", 
			"'REPLICATE_WILD_DO_TABLE'", "'REPLICATE_WILD_IGNORE_TABLE'", "'REPLICATION'", 
			"'RESET'", "'RESUME'", "'RETURNED_SQLSTATE'", "'RETURNS'", "'ROLE'", 
			"'ROLLBACK'", "'ROLLUP'", "'ROTATE'", "'ROW'", "'ROWS'", "'ROW_FORMAT'", 
			"'SAVEPOINT'", "'SCHEDULE'", "'SECURITY'", "'SERVER'", "'SESSION'", "'SHARE'", 
			"'SHARED'", "'SIGNED'", "'SIMPLE'", "'SLAVE'", "'SLOW'", "'SNAPSHOT'", 
			"'SOCKET'", "'SOME'", "'SONAME'", "'SOUNDS'", "'SOURCE'", "'SQL_AFTER_GTIDS'", 
			"'SQL_AFTER_MTS_GAPS'", "'SQL_BEFORE_GTIDS'", "'SQL_BUFFER_RESULT'", 
			"'SQL_CACHE'", "'SQL_NO_CACHE'", "'SQL_THREAD'", "'START'", "'STARTS'", 
			"'STATS_AUTO_RECALC'", "'STATS_PERSISTENT'", "'STATS_SAMPLE_PAGES'", 
			"'STATUS'", "'STOP'", "'STORAGE'", "'STORED'", "'STRING'", "'SUBCLASS_ORIGIN'", 
			"'SUBJECT'", "'SUBPARTITION'", "'SUBPARTITIONS'", "'SUSPEND'", "'SWAPS'", 
			"'SWITCHES'", "'TABLE_NAME'", "'TABLESPACE'", "'TEMPORARY'", "'TEMPTABLE'", 
			"'THAN'", "'TRADITIONAL'", "'TRANSACTION'", "'TRANSACTIONAL'", "'TRIGGERS'", 
			"'TRUNCATE'", "'UNDEFINED'", "'UNDOFILE'", "'UNDO_BUFFER_SIZE'", "'UNINSTALL'", 
			"'UNKNOWN'", "'UNTIL'", "'UPGRADE'", "'USER'", "'USE_FRM'", "'USER_RESOURCES'", 
			"'VALIDATION'", "'VALUE'", "'VARIABLES'", "'VIEW'", "'VIRTUAL'", "'VISIBLE'", 
			"'WAIT'", "'WARNINGS'", "'WITHOUT'", "'WORK'", "'WRAPPER'", "'X509'", 
			"'XA'", "'XML'", "'EUR'", "'USA'", "'JIS'", "'ISO'", "'INTERNAL'", "'QUARTER'", 
			"'MONTH'", "'DAY'", "'HOUR'", "'MINUTE'", "'WEEK'", "'SECOND'", "'MICROSECOND'", 
			"'TABLES'", "'ROUTINE'", "'EXECUTE'", "'FILE'", "'PROCESS'", "'RELOAD'", 
			"'SHUTDOWN'", "'SUPER'", "'PRIVILEGES'", "'APPLICATION_PASSWORD_ADMIN'", 
			"'AUDIT_ADMIN'", "'BACKUP_ADMIN'", "'BINLOG_ADMIN'", "'BINLOG_ENCRYPTION_ADMIN'", 
			"'CLONE_ADMIN'", "'CONNECTION_ADMIN'", "'ENCRYPTION_KEY_ADMIN'", "'FIREWALL_ADMIN'", 
			"'FIREWALL_USER'", "'FLUSH_OPTIMIZER_COSTS'", "'FLUSH_STATUS'", "'FLUSH_TABLES'", 
			"'FLUSH_USER_RESOURCES'", "'GROUP_REPLICATION_ADMIN'", "'INNODB_REDO_LOG_ARCHIVE'", 
			"'INNODB_REDO_LOG_ENABLE'", "'NDB_STORED_USER'", "'PERSIST_RO_VARIABLES_ADMIN'", 
			"'REPLICATION_APPLIER'", "'REPLICATION_SLAVE_ADMIN'", "'RESOURCE_GROUP_ADMIN'", 
			"'RESOURCE_GROUP_USER'", "'ROLE_ADMIN'", "'SERVICE_CONNECTION_ADMIN'", 
			null, "'SET_USER_ID'", "'SHOW_ROUTINE'", "'SYSTEM_VARIABLES_ADMIN'", 
			"'TABLE_ENCRYPTION_ADMIN'", "'VERSION_TOKEN_ADMIN'", "'XA_RECOVER_ADMIN'", 
			"'ARMSCII8'", "'ASCII'", "'BIG5'", "'CP1250'", "'CP1251'", "'CP1256'", 
			"'CP1257'", "'CP850'", "'CP852'", "'CP866'", "'CP932'", "'DEC8'", "'EUCJPMS'", 
			"'EUCKR'", "'GB2312'", "'GBK'", "'GEOSTD8'", "'GREEK'", "'HEBREW'", "'HP8'", 
			"'KEYBCS2'", "'KOI8R'", "'KOI8U'", "'LATIN1'", "'LATIN2'", "'LATIN5'", 
			"'LATIN7'", "'MACCE'", "'MACROMAN'", "'SJIS'", "'SWE7'", "'TIS620'", 
			"'UCS2'", "'UJIS'", "'UTF16'", "'UTF16LE'", "'UTF32'", "'UTF8'", "'UTF8MB3'", 
			"'UTF8MB4'", "'ARCHIVE'", "'BLACKHOLE'", "'CSV'", "'FEDERATED'", "'INNODB'", 
			"'MEMORY'", "'MRG_MYISAM'", "'MYISAM'", "'NDB'", "'NDBCLUSTER'", "'PERFORMANCE_SCHEMA'", 
			"'TOKUDB'", "'REPEATABLE'", "'COMMITTED'", "'UNCOMMITTED'", "'SERIALIZABLE'", 
			"'GEOMETRYCOLLECTION'", "'GEOMCOLLECTION'", "'GEOMETRY'", "'LINESTRING'", 
			"'MULTILINESTRING'", "'MULTIPOINT'", "'MULTIPOLYGON'", "'POINT'", "'POLYGON'", 
			"'ABS'", "'ACOS'", "'ADDDATE'", "'ADDTIME'", "'AES_DECRYPT'", "'AES_ENCRYPT'", 
			"'AREA'", "'ASBINARY'", "'ASIN'", "'ASTEXT'", "'ASWKB'", "'ASWKT'", "'ASYMMETRIC_DECRYPT'", 
			"'ASYMMETRIC_DERIVE'", "'ASYMMETRIC_ENCRYPT'", "'ASYMMETRIC_SIGN'", "'ASYMMETRIC_VERIFY'", 
			"'ATAN'", "'ATAN2'", "'BENCHMARK'", "'BIN'", "'BIT_COUNT'", "'BIT_LENGTH'", 
			"'BUFFER'", "'CATALOG_NAME'", "'CEIL'", "'CEILING'", "'CENTROID'", "'CHARACTER_LENGTH'", 
			"'CHARSET'", "'CHAR_LENGTH'", "'COERCIBILITY'", "'COLLATION'", "'COMPRESS'", 
			"'CONCAT'", "'CONCAT_WS'", "'CONNECTION_ID'", "'CONV'", "'CONVERT_TZ'", 
			"'COS'", "'COT'", "'CRC32'", "'CREATE_ASYMMETRIC_PRIV_KEY'", "'CREATE_ASYMMETRIC_PUB_KEY'", 
			"'CREATE_DH_PARAMETERS'", "'CREATE_DIGEST'", "'CROSSES'", "'DATEDIFF'", 
			"'DATE_FORMAT'", "'DAYNAME'", "'DAYOFMONTH'", "'DAYOFWEEK'", "'DAYOFYEAR'", 
			"'DECODE'", "'DEGREES'", "'DES_DECRYPT'", "'DES_ENCRYPT'", "'DIMENSION'", 
			"'DISJOINT'", "'ELT'", "'ENCODE'", "'ENCRYPT'", "'ENDPOINT'", "'ENVELOPE'", 
			"'EQUALS'", "'EXP'", "'EXPORT_SET'", "'EXTERIORRING'", "'EXTRACTVALUE'", 
			"'FIELD'", "'FIND_IN_SET'", "'FLOOR'", "'FORMAT'", "'FOUND_ROWS'", "'FROM_BASE64'", 
			"'FROM_DAYS'", "'FROM_UNIXTIME'", "'GEOMCOLLFROMTEXT'", "'GEOMCOLLFROMWKB'", 
			"'GEOMETRYCOLLECTIONFROMTEXT'", "'GEOMETRYCOLLECTIONFROMWKB'", "'GEOMETRYFROMTEXT'", 
			"'GEOMETRYFROMWKB'", "'GEOMETRYN'", "'GEOMETRYTYPE'", "'GEOMFROMTEXT'", 
			"'GEOMFROMWKB'", "'GET_FORMAT'", "'GET_LOCK'", "'GLENGTH'", "'GREATEST'", 
			"'GTID_SUBSET'", "'GTID_SUBTRACT'", "'HEX'", "'IFNULL'", "'INET6_ATON'", 
			"'INET6_NTOA'", "'INET_ATON'", "'INET_NTOA'", "'INSTR'", "'INTERIORRINGN'", 
			"'INTERSECTS'", "'ISCLOSED'", "'ISEMPTY'", "'ISNULL'", "'ISSIMPLE'", 
			"'IS_FREE_LOCK'", "'IS_IPV4'", "'IS_IPV4_COMPAT'", "'IS_IPV4_MAPPED'", 
			"'IS_IPV6'", "'IS_USED_LOCK'", "'LAST_INSERT_ID'", "'LCASE'", "'LEAST'", 
			"'LENGTH'", "'LINEFROMTEXT'", "'LINEFROMWKB'", "'LINESTRINGFROMTEXT'", 
			"'LINESTRINGFROMWKB'", "'LN'", "'LOAD_FILE'", "'LOCATE'", "'LOG'", "'LOG10'", 
			"'LOG2'", "'LOWER'", "'LPAD'", "'LTRIM'", "'MAKEDATE'", "'MAKETIME'", 
			"'MAKE_SET'", "'MASTER_POS_WAIT'", "'MBRCONTAINS'", "'MBRDISJOINT'", 
			"'MBREQUAL'", "'MBRINTERSECTS'", "'MBROVERLAPS'", "'MBRTOUCHES'", "'MBRWITHIN'", 
			"'MD5'", "'MLINEFROMTEXT'", "'MLINEFROMWKB'", "'MONTHNAME'", "'MPOINTFROMTEXT'", 
			"'MPOINTFROMWKB'", "'MPOLYFROMTEXT'", "'MPOLYFROMWKB'", "'MULTILINESTRINGFROMTEXT'", 
			"'MULTILINESTRINGFROMWKB'", "'MULTIPOINTFROMTEXT'", "'MULTIPOINTFROMWKB'", 
			"'MULTIPOLYGONFROMTEXT'", "'MULTIPOLYGONFROMWKB'", "'NAME_CONST'", "'NULLIF'", 
			"'NUMGEOMETRIES'", "'NUMINTERIORRINGS'", "'NUMPOINTS'", "'OCT'", "'OCTET_LENGTH'", 
			"'ORD'", "'OVERLAPS'", "'PERIOD_ADD'", "'PERIOD_DIFF'", "'PI'", "'POINTFROMTEXT'", 
			"'POINTFROMWKB'", "'POINTN'", "'POLYFROMTEXT'", "'POLYFROMWKB'", "'POLYGONFROMTEXT'", 
			"'POLYGONFROMWKB'", "'POW'", "'POWER'", "'QUOTE'", "'RADIANS'", "'RAND'", 
			"'RANDOM_BYTES'", "'RELEASE_LOCK'", "'REVERSE'", "'ROUND'", "'ROW_COUNT'", 
			"'RPAD'", "'RTRIM'", "'SEC_TO_TIME'", "'SESSION_USER'", "'SHA'", "'SHA1'", 
			"'SHA2'", "'SCHEMA_NAME'", "'SIGN'", "'SIN'", "'SLEEP'", "'SOUNDEX'", 
			"'SQL_THREAD_WAIT_AFTER_GTIDS'", "'SQRT'", "'SRID'", "'STARTPOINT'", 
			"'STRCMP'", "'STR_TO_DATE'", "'ST_AREA'", "'ST_ASBINARY'", "'ST_ASTEXT'", 
			"'ST_ASWKB'", "'ST_ASWKT'", "'ST_BUFFER'", "'ST_CENTROID'", "'ST_CONTAINS'", 
			"'ST_CROSSES'", "'ST_DIFFERENCE'", "'ST_DIMENSION'", "'ST_DISJOINT'", 
			"'ST_DISTANCE'", "'ST_ENDPOINT'", "'ST_ENVELOPE'", "'ST_EQUALS'", "'ST_EXTERIORRING'", 
			"'ST_GEOMCOLLFROMTEXT'", "'ST_GEOMCOLLFROMTXT'", "'ST_GEOMCOLLFROMWKB'", 
			"'ST_GEOMETRYCOLLECTIONFROMTEXT'", "'ST_GEOMETRYCOLLECTIONFROMWKB'", 
			"'ST_GEOMETRYFROMTEXT'", "'ST_GEOMETRYFROMWKB'", "'ST_GEOMETRYN'", "'ST_GEOMETRYTYPE'", 
			"'ST_GEOMFROMTEXT'", "'ST_GEOMFROMWKB'", "'ST_INTERIORRINGN'", "'ST_INTERSECTION'", 
			"'ST_INTERSECTS'", "'ST_ISCLOSED'", "'ST_ISEMPTY'", "'ST_ISSIMPLE'", 
			"'ST_LINEFROMTEXT'", "'ST_LINEFROMWKB'", "'ST_LINESTRINGFROMTEXT'", "'ST_LINESTRINGFROMWKB'", 
			"'ST_NUMGEOMETRIES'", "'ST_NUMINTERIORRING'", "'ST_NUMINTERIORRINGS'", 
			"'ST_NUMPOINTS'", "'ST_OVERLAPS'", "'ST_POINTFROMTEXT'", "'ST_POINTFROMWKB'", 
			"'ST_POINTN'", "'ST_POLYFROMTEXT'", "'ST_POLYFROMWKB'", "'ST_POLYGONFROMTEXT'", 
			"'ST_POLYGONFROMWKB'", "'ST_SRID'", "'ST_STARTPOINT'", "'ST_SYMDIFFERENCE'", 
			"'ST_TOUCHES'", "'ST_UNION'", "'ST_WITHIN'", "'ST_X'", "'ST_Y'", "'SUBDATE'", 
			"'SUBSTRING_INDEX'", "'SUBTIME'", "'SYSTEM_USER'", "'TAN'", "'TIMEDIFF'", 
			"'TIMESTAMPADD'", "'TIMESTAMPDIFF'", "'TIME_FORMAT'", "'TIME_TO_SEC'", 
			"'TOUCHES'", "'TO_BASE64'", "'TO_DAYS'", "'TO_SECONDS'", "'UCASE'", "'UNCOMPRESS'", 
			"'UNCOMPRESSED_LENGTH'", "'UNHEX'", "'UNIX_TIMESTAMP'", "'UPDATEXML'", 
			"'UPPER'", "'UUID'", "'UUID_SHORT'", "'VALIDATE_PASSWORD_STRENGTH'", 
			"'VERSION'", "'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS'", "'WEEKDAY'", "'WEEKOFYEAR'", 
			"'WEIGHT_STRING'", "'WITHIN'", "'YEARWEEK'", "'Y'", "'X'", "':='", "'+='", 
			"'-='", "'*='", "'/='", "'%='", "'&='", "'^='", "'|='", "'*'", "'/'", 
			"'%'", "'+'", "'--'", "'-'", "'DIV'", "'MOD'", "'='", "'>'", "'<'", "'!'", 
			"'~'", "'|'", "'&'", "'^'", "'.'", "'('", "')'", "','", "';'", "'@'", 
			"'0'", "'1'", "'2'", "'''", "'\"'", "'`'", "':'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "SPACE", "SPEC_MYSQL_COMMENT", "COMMENT_INPUT", "LINE_COMMENT", 
			"ADD", "ALL", "ALTER", "ALWAYS", "ANALYZE", "AND", "AS", "ASC", "BEFORE", 
			"BETWEEN", "BOTH", "BY", "CALL", "CASCADE", "CASE", "CAST", "CHANGE", 
			"CHARACTER", "CHECK", "COLLATE", "COLUMN", "CONDITION", "CONSTRAINT", 
			"CONTINUE", "CONVERT", "CREATE", "CROSS", "CURRENT", "CURRENT_USER", 
			"CURSOR", "DATABASE", "DATABASES", "DECLARE", "DEFAULT", "DELAYED", "DELETE", 
			"DESC", "DESCRIBE", "DETERMINISTIC", "DIAGNOSTICS", "DISTINCT", "DISTINCTROW", 
			"DROP", "EACH", "ELSE", "ELSEIF", "ENCLOSED", "ESCAPED", "EXISTS", "EXIT", 
			"EXPLAIN", "FALSE", "FETCH", "FOR", "FORCE", "FOREIGN", "FROM", "FULLTEXT", 
			"GENERATED", "GET", "GRANT", "GROUP", "HAVING", "HIGH_PRIORITY", "IF", 
			"IGNORE", "IN", "INDEX", "INFILE", "INNER", "INOUT", "INSERT", "INTERVAL", 
			"INTO", "IS", "ITERATE", "JOIN", "KEY", "KEYS", "KILL", "LEADING", "LEAVE", 
			"LEFT", "LIKE", "LIMIT", "LINEAR", "LINES", "LOAD", "LOCK", "LOOP", "LOW_PRIORITY", 
			"MASTER_BIND", "MASTER_SSL_VERIFY_SERVER_CERT", "MATCH", "MAXVALUE", 
			"MODIFIES", "NATURAL", "NOT", "NO_WRITE_TO_BINLOG", "NULL_LITERAL", "NUMBER", 
			"ON", "OPTIMIZE", "OPTION", "OPTIONALLY", "OR", "ORDER", "OUT", "OUTER", 
			"OUTFILE", "PARTITION", "PRIMARY", "PROCEDURE", "PURGE", "RANGE", "READ", 
			"READS", "REFERENCES", "REGEXP", "RELEASE", "RENAME", "REPEAT", "REPLACE", 
			"REQUIRE", "RESIGNAL", "RESTRICT", "RETURN", "REVOKE", "RIGHT", "RLIKE", 
			"SCHEMA", "SCHEMAS", "SELECT", "SET", "SEPARATOR", "SHOW", "SIGNAL", 
			"SPATIAL", "SQL", "SQLEXCEPTION", "SQLSTATE", "SQLWARNING", "SQL_BIG_RESULT", 
			"SQL_CALC_FOUND_ROWS", "SQL_SMALL_RESULT", "SSL", "STACKED", "STARTING", 
			"STRAIGHT_JOIN", "TABLE", "TERMINATED", "THEN", "TO", "TRAILING", "TRIGGER", 
			"TRUE", "UNDO", "UNION", "UNIQUE", "UNLOCK", "UNSIGNED", "UPDATE", "USAGE", 
			"USE", "USING", "VALUES", "WHEN", "WHERE", "WHILE", "WITH", "WRITE", 
			"XOR", "ZEROFILL", "TINYINT", "SMALLINT", "MEDIUMINT", "MIDDLEINT", "INT", 
			"INT1", "INT2", "INT3", "INT4", "INT8", "INTEGER", "BIGINT", "REAL", 
			"DOUBLE", "PRECISION", "FLOAT", "FLOAT4", "FLOAT8", "DECIMAL", "DEC", 
			"NUMERIC", "DATE", "TIME", "TIMESTAMP", "DATETIME", "YEAR", "CHAR", "VARCHAR", 
			"NVARCHAR", "NATIONAL", "BINARY", "VARBINARY", "TINYBLOB", "BLOB", "MEDIUMBLOB", 
			"LONG", "LONGBLOB", "TINYTEXT", "TEXT", "MEDIUMTEXT", "LONGTEXT", "ENUM", 
			"VARYING", "SERIAL", "YEAR_MONTH", "DAY_HOUR", "DAY_MINUTE", "DAY_SECOND", 
			"HOUR_MINUTE", "HOUR_SECOND", "MINUTE_SECOND", "SECOND_MICROSECOND", 
			"MINUTE_MICROSECOND", "HOUR_MICROSECOND", "DAY_MICROSECOND", "JSON_VALID", 
			"JSON_SCHEMA_VALID", "AVG", "BIT_AND", "BIT_OR", "BIT_XOR", "COUNT", 
			"GROUP_CONCAT", "MAX", "MIN", "STD", "STDDEV", "STDDEV_POP", "STDDEV_SAMP", 
			"SUM", "VAR_POP", "VAR_SAMP", "VARIANCE", "CURRENT_DATE", "CURRENT_TIME", 
			"CURRENT_TIMESTAMP", "LOCALTIME", "CURDATE", "CURTIME", "DATE_ADD", "DATE_SUB", 
			"EXTRACT", "LOCALTIMESTAMP", "NOW", "POSITION", "SUBSTR", "SUBSTRING", 
			"SYSDATE", "TRIM", "UTC_DATE", "UTC_TIME", "UTC_TIMESTAMP", "ACCOUNT", 
			"ACTION", "AFTER", "AGGREGATE", "ALGORITHM", "ANY", "AT", "AUTHORS", 
			"AUTOCOMMIT", "AUTOEXTEND_SIZE", "AUTO_INCREMENT", "AVG_ROW_LENGTH", 
			"BEGIN", "BINLOG", "BIT", "BLOCK", "BOOL", "BOOLEAN", "BTREE", "CACHE", 
			"CASCADED", "CHAIN", "CHANGED", "CHANNEL", "CHECKSUM", "PAGE_CHECKSUM", 
			"CIPHER", "CLASS_ORIGIN", "CLIENT", "CLOSE", "COALESCE", "CODE", "COLUMNS", 
			"COLUMN_FORMAT", "COLUMN_NAME", "COMMENT", "COMMIT", "COMPACT", "COMPLETION", 
			"COMPRESSED", "COMPRESSION", "CONCURRENT", "CONNECTION", "CONSISTENT", 
			"CONSTRAINT_CATALOG", "CONSTRAINT_SCHEMA", "CONSTRAINT_NAME", "CONTAINS", 
			"CONTEXT", "CONTRIBUTORS", "COPY", "CPU", "CURSOR_NAME", "DATA", "DATAFILE", 
			"DEALLOCATE", "DEFAULT_AUTH", "DEFINER", "DELAY_KEY_WRITE", "DES_KEY_FILE", 
			"DIRECTORY", "DISABLE", "DISCARD", "DISK", "DO", "DUMPFILE", "DUPLICATE", 
			"DYNAMIC", "ENABLE", "ENCRYPTION", "END", "ENDS", "ENGINE", "ENGINES", 
			"ERROR", "ERRORS", "ESCAPE", "EVEN", "EVENT", "EVENTS", "EVERY", "EXCHANGE", 
			"EXCLUSIVE", "EXPIRE", "EXPORT", "EXTENDED", "EXTENT_SIZE", "FAST", "FAULTS", 
			"FIELDS", "FILE_BLOCK_SIZE", "FILTER", "FIRST", "FIXED", "FLUSH", "FOLLOWS", 
			"FOUND", "FULL", "FUNCTION", "GENERAL", "GLOBAL", "GRANTS", "GROUP_REPLICATION", 
			"HANDLER", "HASH", "HELP", "HOST", "HOSTS", "IDENTIFIED", "IGNORE_SERVER_IDS", 
			"IMPORT", "INDEXES", "INITIAL_SIZE", "INPLACE", "INSERT_METHOD", "INSTALL", 
			"INSTANCE", "INVISIBLE", "INVOKER", "IO", "IO_THREAD", "IPC", "ISOLATION", 
			"ISSUER", "JSON", "KEY_BLOCK_SIZE", "LANGUAGE", "LAST", "LEAVES", "LESS", 
			"LEVEL", "LIST", "LOCAL", "LOGFILE", "LOGS", "MASTER", "MASTER_AUTO_POSITION", 
			"MASTER_CONNECT_RETRY", "MASTER_DELAY", "MASTER_HEARTBEAT_PERIOD", "MASTER_HOST", 
			"MASTER_LOG_FILE", "MASTER_LOG_POS", "MASTER_PASSWORD", "MASTER_PORT", 
			"MASTER_RETRY_COUNT", "MASTER_SSL", "MASTER_SSL_CA", "MASTER_SSL_CAPATH", 
			"MASTER_SSL_CERT", "MASTER_SSL_CIPHER", "MASTER_SSL_CRL", "MASTER_SSL_CRLPATH", 
			"MASTER_SSL_KEY", "MASTER_TLS_VERSION", "MASTER_USER", "MAX_CONNECTIONS_PER_HOUR", 
			"MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE", "MAX_UPDATES_PER_HOUR", 
			"MAX_USER_CONNECTIONS", "MEDIUM", "MEMBER", "MERGE", "MESSAGE_TEXT", 
			"MID", "MIGRATE", "MIN_ROWS", "MODE", "MODIFY", "MUTEX", "MYSQL", "MYSQL_ERRNO", 
			"NAME", "NAMES", "NCHAR", "NEVER", "NEXT", "NO", "NODEGROUP", "NONE", 
			"OFFLINE", "OFFSET", "OF", "OJ", "OLD_PASSWORD", "ONE", "ONLINE", "ONLY", 
			"OPEN", "OPTIMIZER_COSTS", "OPTIONS", "OWNER", "PACK_KEYS", "PAGE", "PARSER", 
			"PARTIAL", "PARTITIONING", "PARTITIONS", "PASSWORD", "PHASE", "PLUGIN", 
			"PLUGIN_DIR", "PLUGINS", "PORT", "PRECEDES", "PREPARE", "PRESERVE", "PREV", 
			"PROCESSLIST", "PROFILE", "PROFILES", "PROXY", "QUERY", "QUICK", "REBUILD", 
			"RECOVER", "REDO_BUFFER_SIZE", "REDUNDANT", "RELAY", "RELAY_LOG_FILE", 
			"RELAY_LOG_POS", "RELAYLOG", "REMOVE", "REORGANIZE", "REPAIR", "REPLICATE_DO_DB", 
			"REPLICATE_DO_TABLE", "REPLICATE_IGNORE_DB", "REPLICATE_IGNORE_TABLE", 
			"REPLICATE_REWRITE_DB", "REPLICATE_WILD_DO_TABLE", "REPLICATE_WILD_IGNORE_TABLE", 
			"REPLICATION", "RESET", "RESUME", "RETURNED_SQLSTATE", "RETURNS", "ROLE", 
			"ROLLBACK", "ROLLUP", "ROTATE", "ROW", "ROWS", "ROW_FORMAT", "SAVEPOINT", 
			"SCHEDULE", "SECURITY", "SERVER", "SESSION", "SHARE", "SHARED", "SIGNED", 
			"SIMPLE", "SLAVE", "SLOW", "SNAPSHOT", "SOCKET", "SOME", "SONAME", "SOUNDS", 
			"SOURCE", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS", "SQL_BEFORE_GTIDS", 
			"SQL_BUFFER_RESULT", "SQL_CACHE", "SQL_NO_CACHE", "SQL_THREAD", "START", 
			"STARTS", "STATS_AUTO_RECALC", "STATS_PERSISTENT", "STATS_SAMPLE_PAGES", 
			"STATUS", "STOP", "STORAGE", "STORED", "STRING", "SUBCLASS_ORIGIN", "SUBJECT", 
			"SUBPARTITION", "SUBPARTITIONS", "SUSPEND", "SWAPS", "SWITCHES", "TABLE_NAME", 
			"TABLESPACE", "TEMPORARY", "TEMPTABLE", "THAN", "TRADITIONAL", "TRANSACTION", 
			"TRANSACTIONAL", "TRIGGERS", "TRUNCATE", "UNDEFINED", "UNDOFILE", "UNDO_BUFFER_SIZE", 
			"UNINSTALL", "UNKNOWN", "UNTIL", "UPGRADE", "USER", "USE_FRM", "USER_RESOURCES", 
			"VALIDATION", "VALUE", "VARIABLES", "VIEW", "VIRTUAL", "VISIBLE", "WAIT", 
			"WARNINGS", "WITHOUT", "WORK", "WRAPPER", "X509", "XA", "XML", "EUR", 
			"USA", "JIS", "ISO", "INTERNAL", "QUARTER", "MONTH", "DAY", "HOUR", "MINUTE", 
			"WEEK", "SECOND", "MICROSECOND", "TABLES", "ROUTINE", "EXECUTE", "FILE", 
			"PROCESS", "RELOAD", "SHUTDOWN", "SUPER", "PRIVILEGES", "APPLICATION_PASSWORD_ADMIN", 
			"AUDIT_ADMIN", "BACKUP_ADMIN", "BINLOG_ADMIN", "BINLOG_ENCRYPTION_ADMIN", 
			"CLONE_ADMIN", "CONNECTION_ADMIN", "ENCRYPTION_KEY_ADMIN", "FIREWALL_ADMIN", 
			"FIREWALL_USER", "FLUSH_OPTIMIZER_COSTS", "FLUSH_STATUS", "FLUSH_TABLES", 
			"FLUSH_USER_RESOURCES", "GROUP_REPLICATION_ADMIN", "INNODB_REDO_LOG_ARCHIVE", 
			"INNODB_REDO_LOG_ENABLE", "NDB_STORED_USER", "PERSIST_RO_VARIABLES_ADMIN", 
			"REPLICATION_APPLIER", "REPLICATION_SLAVE_ADMIN", "RESOURCE_GROUP_ADMIN", 
			"RESOURCE_GROUP_USER", "ROLE_ADMIN", "SERVICE_CONNECTION_ADMIN", "SESSION_VARIABLES_ADMIN", 
			"SET_USER_ID", "SHOW_ROUTINE", "SYSTEM_VARIABLES_ADMIN", "TABLE_ENCRYPTION_ADMIN", 
			"VERSION_TOKEN_ADMIN", "XA_RECOVER_ADMIN", "ARMSCII8", "ASCII", "BIG5", 
			"CP1250", "CP1251", "CP1256", "CP1257", "CP850", "CP852", "CP866", "CP932", 
			"DEC8", "EUCJPMS", "EUCKR", "GB2312", "GBK", "GEOSTD8", "GREEK", "HEBREW", 
			"HP8", "KEYBCS2", "KOI8R", "KOI8U", "LATIN1", "LATIN2", "LATIN5", "LATIN7", 
			"MACCE", "MACROMAN", "SJIS", "SWE7", "TIS620", "UCS2", "UJIS", "UTF16", 
			"UTF16LE", "UTF32", "UTF8", "UTF8MB3", "UTF8MB4", "ARCHIVE", "BLACKHOLE", 
			"CSV", "FEDERATED", "INNODB", "MEMORY", "MRG_MYISAM", "MYISAM", "NDB", 
			"NDBCLUSTER", "PERFORMANCE_SCHEMA", "TOKUDB", "REPEATABLE", "COMMITTED", 
			"UNCOMMITTED", "SERIALIZABLE", "GEOMETRYCOLLECTION", "GEOMCOLLECTION", 
			"GEOMETRY", "LINESTRING", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON", 
			"POINT", "POLYGON", "ABS", "ACOS", "ADDDATE", "ADDTIME", "AES_DECRYPT", 
			"AES_ENCRYPT", "AREA", "ASBINARY", "ASIN", "ASTEXT", "ASWKB", "ASWKT", 
			"ASYMMETRIC_DECRYPT", "ASYMMETRIC_DERIVE", "ASYMMETRIC_ENCRYPT", "ASYMMETRIC_SIGN", 
			"ASYMMETRIC_VERIFY", "ATAN", "ATAN2", "BENCHMARK", "BIN", "BIT_COUNT", 
			"BIT_LENGTH", "BUFFER", "CATALOG_NAME", "CEIL", "CEILING", "CENTROID", 
			"CHARACTER_LENGTH", "CHARSET", "CHAR_LENGTH", "COERCIBILITY", "COLLATION", 
			"COMPRESS", "CONCAT", "CONCAT_WS", "CONNECTION_ID", "CONV", "CONVERT_TZ", 
			"COS", "COT", "CRC32", "CREATE_ASYMMETRIC_PRIV_KEY", "CREATE_ASYMMETRIC_PUB_KEY", 
			"CREATE_DH_PARAMETERS", "CREATE_DIGEST", "CROSSES", "DATEDIFF", "DATE_FORMAT", 
			"DAYNAME", "DAYOFMONTH", "DAYOFWEEK", "DAYOFYEAR", "DECODE", "DEGREES", 
			"DES_DECRYPT", "DES_ENCRYPT", "DIMENSION", "DISJOINT", "ELT", "ENCODE", 
			"ENCRYPT", "ENDPOINT", "ENVELOPE", "EQUALS", "EXP", "EXPORT_SET", "EXTERIORRING", 
			"EXTRACTVALUE", "FIELD", "FIND_IN_SET", "FLOOR", "FORMAT", "FOUND_ROWS", 
			"FROM_BASE64", "FROM_DAYS", "FROM_UNIXTIME", "GEOMCOLLFROMTEXT", "GEOMCOLLFROMWKB", 
			"GEOMETRYCOLLECTIONFROMTEXT", "GEOMETRYCOLLECTIONFROMWKB", "GEOMETRYFROMTEXT", 
			"GEOMETRYFROMWKB", "GEOMETRYN", "GEOMETRYTYPE", "GEOMFROMTEXT", "GEOMFROMWKB", 
			"GET_FORMAT", "GET_LOCK", "GLENGTH", "GREATEST", "GTID_SUBSET", "GTID_SUBTRACT", 
			"HEX", "IFNULL", "INET6_ATON", "INET6_NTOA", "INET_ATON", "INET_NTOA", 
			"INSTR", "INTERIORRINGN", "INTERSECTS", "ISCLOSED", "ISEMPTY", "ISNULL", 
			"ISSIMPLE", "IS_FREE_LOCK", "IS_IPV4", "IS_IPV4_COMPAT", "IS_IPV4_MAPPED", 
			"IS_IPV6", "IS_USED_LOCK", "LAST_INSERT_ID", "LCASE", "LEAST", "LENGTH", 
			"LINEFROMTEXT", "LINEFROMWKB", "LINESTRINGFROMTEXT", "LINESTRINGFROMWKB", 
			"LN", "LOAD_FILE", "LOCATE", "LOG", "LOG10", "LOG2", "LOWER", "LPAD", 
			"LTRIM", "MAKEDATE", "MAKETIME", "MAKE_SET", "MASTER_POS_WAIT", "MBRCONTAINS", 
			"MBRDISJOINT", "MBREQUAL", "MBRINTERSECTS", "MBROVERLAPS", "MBRTOUCHES", 
			"MBRWITHIN", "MD5", "MLINEFROMTEXT", "MLINEFROMWKB", "MONTHNAME", "MPOINTFROMTEXT", 
			"MPOINTFROMWKB", "MPOLYFROMTEXT", "MPOLYFROMWKB", "MULTILINESTRINGFROMTEXT", 
			"MULTILINESTRINGFROMWKB", "MULTIPOINTFROMTEXT", "MULTIPOINTFROMWKB", 
			"MULTIPOLYGONFROMTEXT", "MULTIPOLYGONFROMWKB", "NAME_CONST", "NULLIF", 
			"NUMGEOMETRIES", "NUMINTERIORRINGS", "NUMPOINTS", "OCT", "OCTET_LENGTH", 
			"ORD", "OVERLAPS", "PERIOD_ADD", "PERIOD_DIFF", "PI", "POINTFROMTEXT", 
			"POINTFROMWKB", "POINTN", "POLYFROMTEXT", "POLYFROMWKB", "POLYGONFROMTEXT", 
			"POLYGONFROMWKB", "POW", "POWER", "QUOTE", "RADIANS", "RAND", "RANDOM_BYTES", 
			"RELEASE_LOCK", "REVERSE", "ROUND", "ROW_COUNT", "RPAD", "RTRIM", "SEC_TO_TIME", 
			"SESSION_USER", "SHA", "SHA1", "SHA2", "SCHEMA_NAME", "SIGN", "SIN", 
			"SLEEP", "SOUNDEX", "SQL_THREAD_WAIT_AFTER_GTIDS", "SQRT", "SRID", "STARTPOINT", 
			"STRCMP", "STR_TO_DATE", "ST_AREA", "ST_ASBINARY", "ST_ASTEXT", "ST_ASWKB", 
			"ST_ASWKT", "ST_BUFFER", "ST_CENTROID", "ST_CONTAINS", "ST_CROSSES", 
			"ST_DIFFERENCE", "ST_DIMENSION", "ST_DISJOINT", "ST_DISTANCE", "ST_ENDPOINT", 
			"ST_ENVELOPE", "ST_EQUALS", "ST_EXTERIORRING", "ST_GEOMCOLLFROMTEXT", 
			"ST_GEOMCOLLFROMTXT", "ST_GEOMCOLLFROMWKB", "ST_GEOMETRYCOLLECTIONFROMTEXT", 
			"ST_GEOMETRYCOLLECTIONFROMWKB", "ST_GEOMETRYFROMTEXT", "ST_GEOMETRYFROMWKB", 
			"ST_GEOMETRYN", "ST_GEOMETRYTYPE", "ST_GEOMFROMTEXT", "ST_GEOMFROMWKB", 
			"ST_INTERIORRINGN", "ST_INTERSECTION", "ST_INTERSECTS", "ST_ISCLOSED", 
			"ST_ISEMPTY", "ST_ISSIMPLE", "ST_LINEFROMTEXT", "ST_LINEFROMWKB", "ST_LINESTRINGFROMTEXT", 
			"ST_LINESTRINGFROMWKB", "ST_NUMGEOMETRIES", "ST_NUMINTERIORRING", "ST_NUMINTERIORRINGS", 
			"ST_NUMPOINTS", "ST_OVERLAPS", "ST_POINTFROMTEXT", "ST_POINTFROMWKB", 
			"ST_POINTN", "ST_POLYFROMTEXT", "ST_POLYFROMWKB", "ST_POLYGONFROMTEXT", 
			"ST_POLYGONFROMWKB", "ST_SRID", "ST_STARTPOINT", "ST_SYMDIFFERENCE", 
			"ST_TOUCHES", "ST_UNION", "ST_WITHIN", "ST_X", "ST_Y", "SUBDATE", "SUBSTRING_INDEX", 
			"SUBTIME", "SYSTEM_USER", "TAN", "TIMEDIFF", "TIMESTAMPADD", "TIMESTAMPDIFF", 
			"TIME_FORMAT", "TIME_TO_SEC", "TOUCHES", "TO_BASE64", "TO_DAYS", "TO_SECONDS", 
			"UCASE", "UNCOMPRESS", "UNCOMPRESSED_LENGTH", "UNHEX", "UNIX_TIMESTAMP", 
			"UPDATEXML", "UPPER", "UUID", "UUID_SHORT", "VALIDATE_PASSWORD_STRENGTH", 
			"VERSION", "WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS", "WEEKDAY", "WEEKOFYEAR", 
			"WEIGHT_STRING", "WITHIN", "YEARWEEK", "Y_FUNCTION", "X_FUNCTION", "VAR_ASSIGN", 
			"PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
			"AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "STAR", "DIVIDE", "MODULE", 
			"PLUS", "MINUSMINUS", "MINUS", "DIV", "MOD", "EQUAL_SYMBOL", "GREATER_SYMBOL", 
			"LESS_SYMBOL", "EXCLAMATION_SYMBOL", "BIT_NOT_OP", "BIT_OR_OP", "BIT_AND_OP", 
			"BIT_XOR_OP", "DOT", "LR_BRACKET", "RR_BRACKET", "COMMA", "SEMI", "AT_SIGN", 
			"ZERO_DECIMAL", "ONE_DECIMAL", "TWO_DECIMAL", "SINGLE_QUOTE_SYMB", "DOUBLE_QUOTE_SYMB", 
			"REVERSE_QUOTE_SYMB", "COLON_SYMB", "CHARSET_REVERSE_QOUTE_STRING", "FILESIZE_LITERAL", 
			"START_NATIONAL_STRING_LITERAL", "STRING_LITERAL", "DECIMAL_LITERAL", 
			"HEXADECIMAL_LITERAL", "REAL_LITERAL", "NULL_SPEC_LITERAL", "BIT_STRING", 
			"STRING_CHARSET_NAME", "DOT_ID", "ID", "REVERSE_QUOTE_ID", "STRING_USER_NAME", 
			"IP_ADDRESS", "LOCAL_ID", "GLOBAL_ID", "ERROR_RECONGNIGION"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "MySqlParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public MySqlParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	public static class RootContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(MySqlParser.EOF, 0); }
		public SqlStatementsContext sqlStatements() {
			return getRuleContext(SqlStatementsContext.class,0);
		}
		public TerminalNode MINUSMINUS() { return getToken(MySqlParser.MINUSMINUS, 0); }
		public RootContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_root; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoot(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoot(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRoot(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RootContext root() throws RecognitionException {
		RootContext _localctx = new RootContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(265);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & ((1L << (CREATE - 30)) | (1L << (DELETE - 30)) | (1L << (INSERT - 30)))) != 0) || _la==SELECT || _la==UPDATE || _la==LR_BRACKET || _la==SEMI) {
				{
				setState(264);
				sqlStatements();
				}
			}

			setState(268);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MINUSMINUS) {
				{
				setState(267);
				match(MINUSMINUS);
				}
			}

			setState(270);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlStatementsContext extends ParserRuleContext {
		public List<SqlStatementContext> sqlStatement() {
			return getRuleContexts(SqlStatementContext.class);
		}
		public SqlStatementContext sqlStatement(int i) {
			return getRuleContext(SqlStatementContext.class,i);
		}
		public List<EmptyStatementContext> emptyStatement() {
			return getRuleContexts(EmptyStatementContext.class);
		}
		public EmptyStatementContext emptyStatement(int i) {
			return getRuleContext(EmptyStatementContext.class,i);
		}
		public List<TerminalNode> SEMI() { return getTokens(MySqlParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(MySqlParser.SEMI, i);
		}
		public List<TerminalNode> MINUSMINUS() { return getTokens(MySqlParser.MINUSMINUS); }
		public TerminalNode MINUSMINUS(int i) {
			return getToken(MySqlParser.MINUSMINUS, i);
		}
		public SqlStatementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlStatements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSqlStatements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSqlStatements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSqlStatements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlStatementsContext sqlStatements() throws RecognitionException {
		SqlStatementsContext _localctx = new SqlStatementsContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_sqlStatements);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(282);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,5,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(280);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CREATE:
					case DELETE:
					case INSERT:
					case SELECT:
					case UPDATE:
					case LR_BRACKET:
						{
						setState(272);
						sqlStatement();
						setState(274);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==MINUSMINUS) {
							{
							setState(273);
							match(MINUSMINUS);
							}
						}

						setState(277);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
						case 1:
							{
							setState(276);
							match(SEMI);
							}
							break;
						}
						}
						break;
					case SEMI:
						{
						setState(279);
						emptyStatement();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(284);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,5,_ctx);
			}
			setState(293);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CREATE:
			case DELETE:
			case INSERT:
			case SELECT:
			case UPDATE:
			case LR_BRACKET:
				{
				setState(285);
				sqlStatement();
				setState(290);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,7,_ctx) ) {
				case 1:
					{
					setState(287);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==MINUSMINUS) {
						{
						setState(286);
						match(MINUSMINUS);
						}
					}

					setState(289);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case SEMI:
				{
				setState(292);
				emptyStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlStatementContext extends ParserRuleContext {
		public DmlStatementContext dmlStatement() {
			return getRuleContext(DmlStatementContext.class,0);
		}
		public DdlStatementContext ddlStatement() {
			return getRuleContext(DdlStatementContext.class,0);
		}
		public SqlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSqlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSqlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSqlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlStatementContext sqlStatement() throws RecognitionException {
		SqlStatementContext _localctx = new SqlStatementContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_sqlStatement);
		try {
			setState(297);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DELETE:
			case INSERT:
			case SELECT:
			case UPDATE:
			case LR_BRACKET:
				enterOuterAlt(_localctx, 1);
				{
				setState(295);
				dmlStatement();
				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 2);
				{
				setState(296);
				ddlStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EmptyStatementContext extends ParserRuleContext {
		public TerminalNode SEMI() { return getToken(MySqlParser.SEMI, 0); }
		public EmptyStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_emptyStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterEmptyStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitEmptyStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitEmptyStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EmptyStatementContext emptyStatement() throws RecognitionException {
		EmptyStatementContext _localctx = new EmptyStatementContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_emptyStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(299);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DdlStatementContext extends ParserRuleContext {
		public CreateIndexContext createIndex() {
			return getRuleContext(CreateIndexContext.class,0);
		}
		public CreateTableContext createTable() {
			return getRuleContext(CreateTableContext.class,0);
		}
		public DdlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ddlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDdlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDdlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDdlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DdlStatementContext ddlStatement() throws RecognitionException {
		DdlStatementContext _localctx = new DdlStatementContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_ddlStatement);
		try {
			setState(303);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,10,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(301);
				createIndex();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(302);
				createTable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DmlStatementContext extends ParserRuleContext {
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public InsertStatementContext insertStatement() {
			return getRuleContext(InsertStatementContext.class,0);
		}
		public UpdateStatementContext updateStatement() {
			return getRuleContext(UpdateStatementContext.class,0);
		}
		public DeleteStatementContext deleteStatement() {
			return getRuleContext(DeleteStatementContext.class,0);
		}
		public DmlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dmlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDmlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDmlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDmlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DmlStatementContext dmlStatement() throws RecognitionException {
		DmlStatementContext _localctx = new DmlStatementContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_dmlStatement);
		try {
			setState(309);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case LR_BRACKET:
				enterOuterAlt(_localctx, 1);
				{
				setState(305);
				selectStatement();
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 2);
				{
				setState(306);
				insertStatement();
				}
				break;
			case UPDATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(307);
				updateStatement();
				}
				break;
			case DELETE:
				enterOuterAlt(_localctx, 4);
				{
				setState(308);
				deleteStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateIndexContext extends ParserRuleContext {
		public Token intimeAction;
		public Token indexCategory;
		public Token algType;
		public Token lockType;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<TerminalNode> ALGORITHM() { return getTokens(MySqlParser.ALGORITHM); }
		public TerminalNode ALGORITHM(int i) {
			return getToken(MySqlParser.ALGORITHM, i);
		}
		public List<TerminalNode> LOCK() { return getTokens(MySqlParser.LOCK); }
		public TerminalNode LOCK(int i) {
			return getToken(MySqlParser.LOCK, i);
		}
		public TerminalNode ONLINE() { return getToken(MySqlParser.ONLINE, 0); }
		public TerminalNode OFFLINE() { return getToken(MySqlParser.OFFLINE, 0); }
		public TerminalNode UNIQUE() { return getToken(MySqlParser.UNIQUE, 0); }
		public TerminalNode FULLTEXT() { return getToken(MySqlParser.FULLTEXT, 0); }
		public TerminalNode SPATIAL() { return getToken(MySqlParser.SPATIAL, 0); }
		public List<TerminalNode> DEFAULT() { return getTokens(MySqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(MySqlParser.DEFAULT, i);
		}
		public List<TerminalNode> INPLACE() { return getTokens(MySqlParser.INPLACE); }
		public TerminalNode INPLACE(int i) {
			return getToken(MySqlParser.INPLACE, i);
		}
		public List<TerminalNode> COPY() { return getTokens(MySqlParser.COPY); }
		public TerminalNode COPY(int i) {
			return getToken(MySqlParser.COPY, i);
		}
		public List<TerminalNode> NONE() { return getTokens(MySqlParser.NONE); }
		public TerminalNode NONE(int i) {
			return getToken(MySqlParser.NONE, i);
		}
		public List<TerminalNode> SHARED() { return getTokens(MySqlParser.SHARED); }
		public TerminalNode SHARED(int i) {
			return getToken(MySqlParser.SHARED, i);
		}
		public List<TerminalNode> EXCLUSIVE() { return getTokens(MySqlParser.EXCLUSIVE); }
		public TerminalNode EXCLUSIVE(int i) {
			return getToken(MySqlParser.EXCLUSIVE, i);
		}
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public CreateIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateIndexContext createIndex() throws RecognitionException {
		CreateIndexContext _localctx = new CreateIndexContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_createIndex);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(311);
			match(CREATE);
			setState(313);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFFLINE || _la==ONLINE) {
				{
				setState(312);
				((CreateIndexContext)_localctx).intimeAction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					((CreateIndexContext)_localctx).intimeAction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(316);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FULLTEXT || _la==SPATIAL || _la==UNIQUE) {
				{
				setState(315);
				((CreateIndexContext)_localctx).indexCategory = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL || _la==UNIQUE) ) {
					((CreateIndexContext)_localctx).indexCategory = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(318);
			match(INDEX);
			setState(319);
			uid();
			setState(321);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(320);
				indexType();
				}
			}

			setState(323);
			match(ON);
			setState(324);
			tableName();
			setState(325);
			indexColumnNames();
			setState(329);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
				{
				{
				setState(326);
				indexOption();
				}
				}
				setState(331);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(344);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==LOCK || _la==ALGORITHM) {
				{
				setState(342);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALGORITHM:
					{
					setState(332);
					match(ALGORITHM);
					setState(334);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==EQUAL_SYMBOL) {
						{
						setState(333);
						match(EQUAL_SYMBOL);
						}
					}

					setState(336);
					((CreateIndexContext)_localctx).algType = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE) ) {
						((CreateIndexContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case LOCK:
					{
					setState(337);
					match(LOCK);
					setState(339);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==EQUAL_SYMBOL) {
						{
						setState(338);
						match(EQUAL_SYMBOL);
						}
					}

					setState(341);
					((CreateIndexContext)_localctx).lockType = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
						((CreateIndexContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(346);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexTypeContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public TerminalNode BTREE() { return getToken(MySqlParser.BTREE, 0); }
		public TerminalNode HASH() { return getToken(MySqlParser.HASH, 0); }
		public IndexTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndexType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexTypeContext indexType() throws RecognitionException {
		IndexTypeContext _localctx = new IndexTypeContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_indexType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(347);
			match(USING);
			setState(348);
			_la = _input.LA(1);
			if ( !(_la==BTREE || _la==HASH) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexOptionContext extends ParserRuleContext {
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode PARSER() { return getToken(MySqlParser.PARSER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode INVISIBLE() { return getToken(MySqlParser.INVISIBLE, 0); }
		public TerminalNode VISIBLE() { return getToken(MySqlParser.VISIBLE, 0); }
		public IndexOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndexOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexOptionContext indexOption() throws RecognitionException {
		IndexOptionContext _localctx = new IndexOptionContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_indexOption);
		int _la;
		try {
			setState(363);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KEY_BLOCK_SIZE:
				enterOuterAlt(_localctx, 1);
				{
				setState(350);
				match(KEY_BLOCK_SIZE);
				setState(352);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(351);
					match(EQUAL_SYMBOL);
					}
				}

				setState(354);
				fileSizeLiteral();
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 2);
				{
				setState(355);
				indexType();
				}
				break;
			case WITH:
				enterOuterAlt(_localctx, 3);
				{
				setState(356);
				match(WITH);
				setState(357);
				match(PARSER);
				setState(358);
				uid();
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 4);
				{
				setState(359);
				match(COMMENT);
				setState(360);
				match(STRING_LITERAL);
				}
				break;
			case INVISIBLE:
				enterOuterAlt(_localctx, 5);
				{
				setState(361);
				match(INVISIBLE);
				}
				break;
			case VISIBLE:
				enterOuterAlt(_localctx, 6);
				{
				setState(362);
				match(VISIBLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTableContext extends ParserRuleContext {
		public CreateTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTable; }
	 
		public CreateTableContext() { }
		public void copyFrom(CreateTableContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class CopyCreateTableContext extends CreateTableContext {
		public TableNameContext parenthesisTable;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TerminalNode LIKE() { return getToken(MySqlParser.LIKE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public CopyCreateTableContext(CreateTableContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCopyCreateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCopyCreateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCopyCreateTable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ColumnCreateTableContext extends CreateTableContext {
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public CreateDefinitionsContext createDefinitions() {
			return getRuleContext(CreateDefinitionsContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<TableOptionContext> tableOption() {
			return getRuleContexts(TableOptionContext.class);
		}
		public TableOptionContext tableOption(int i) {
			return getRuleContext(TableOptionContext.class,i);
		}
		public PartitionDefinitionsContext partitionDefinitions() {
			return getRuleContext(PartitionDefinitionsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public ColumnCreateTableContext(CreateTableContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterColumnCreateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitColumnCreateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitColumnCreateTable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class QueryCreateTableContext extends CreateTableContext {
		public Token keyViolate;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public CreateDefinitionsContext createDefinitions() {
			return getRuleContext(CreateDefinitionsContext.class,0);
		}
		public List<TableOptionContext> tableOption() {
			return getRuleContexts(TableOptionContext.class);
		}
		public TableOptionContext tableOption(int i) {
			return getRuleContext(TableOptionContext.class,i);
		}
		public PartitionDefinitionsContext partitionDefinitions() {
			return getRuleContext(PartitionDefinitionsContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public QueryCreateTableContext(CreateTableContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterQueryCreateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitQueryCreateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitQueryCreateTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableContext createTable() throws RecognitionException {
		CreateTableContext _localctx = new CreateTableContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_createTable);
		int _la;
		try {
			setState(443);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,40,_ctx) ) {
			case 1:
				_localctx = new CopyCreateTableContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(365);
				match(CREATE);
				setState(367);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(366);
					match(TEMPORARY);
					}
				}

				setState(369);
				match(TABLE);
				setState(371);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(370);
					ifNotExists();
					}
				}

				setState(373);
				tableName();
				setState(381);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LIKE:
					{
					setState(374);
					match(LIKE);
					setState(375);
					tableName();
					}
					break;
				case LR_BRACKET:
					{
					setState(376);
					match(LR_BRACKET);
					setState(377);
					match(LIKE);
					setState(378);
					((CopyCreateTableContext)_localctx).parenthesisTable = tableName();
					setState(379);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				_localctx = new QueryCreateTableContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(383);
				match(CREATE);
				setState(385);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(384);
					match(TEMPORARY);
					}
				}

				setState(387);
				match(TABLE);
				setState(389);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(388);
					ifNotExists();
					}
				}

				setState(391);
				tableName();
				setState(393);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,27,_ctx) ) {
				case 1:
					{
					setState(392);
					createDefinitions();
					}
					break;
				}
				setState(405);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 22)) & ~0x3f) == 0 && ((1L << (_la - 22)) & ((1L << (CHARACTER - 22)) | (1L << (COLLATE - 22)) | (1L << (DEFAULT - 22)) | (1L << (INDEX - 22)))) != 0) || _la==UNION || ((((_la - 280)) & ~0x3f) == 0 && ((1L << (_la - 280)) & ((1L << (AUTO_INCREMENT - 280)) | (1L << (AVG_ROW_LENGTH - 280)) | (1L << (CHECKSUM - 280)) | (1L << (PAGE_CHECKSUM - 280)) | (1L << (COMMENT - 280)) | (1L << (COMPRESSION - 280)) | (1L << (CONNECTION - 280)) | (1L << (DATA - 280)) | (1L << (DELAY_KEY_WRITE - 280)) | (1L << (ENCRYPTION - 280)) | (1L << (ENGINE - 280)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (INSERT_METHOD - 384)) | (1L << (KEY_BLOCK_SIZE - 384)) | (1L << (MAX_ROWS - 384)) | (1L << (MIN_ROWS - 384)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (PACK_KEYS - 464)) | (1L << (PASSWORD - 464)) | (1L << (ROW_FORMAT - 464)))) != 0) || ((((_la - 542)) & ~0x3f) == 0 && ((1L << (_la - 542)) & ((1L << (STATS_AUTO_RECALC - 542)) | (1L << (STATS_PERSISTENT - 542)) | (1L << (STATS_SAMPLE_PAGES - 542)) | (1L << (STORAGE - 542)) | (1L << (TABLESPACE - 542)))) != 0) || _la==CHARSET) {
					{
					setState(395);
					tableOption();
					setState(402);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (((((_la - 22)) & ~0x3f) == 0 && ((1L << (_la - 22)) & ((1L << (CHARACTER - 22)) | (1L << (COLLATE - 22)) | (1L << (DEFAULT - 22)) | (1L << (INDEX - 22)))) != 0) || _la==UNION || ((((_la - 280)) & ~0x3f) == 0 && ((1L << (_la - 280)) & ((1L << (AUTO_INCREMENT - 280)) | (1L << (AVG_ROW_LENGTH - 280)) | (1L << (CHECKSUM - 280)) | (1L << (PAGE_CHECKSUM - 280)) | (1L << (COMMENT - 280)) | (1L << (COMPRESSION - 280)) | (1L << (CONNECTION - 280)) | (1L << (DATA - 280)) | (1L << (DELAY_KEY_WRITE - 280)) | (1L << (ENCRYPTION - 280)) | (1L << (ENGINE - 280)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (INSERT_METHOD - 384)) | (1L << (KEY_BLOCK_SIZE - 384)) | (1L << (MAX_ROWS - 384)) | (1L << (MIN_ROWS - 384)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (PACK_KEYS - 464)) | (1L << (PASSWORD - 464)) | (1L << (ROW_FORMAT - 464)))) != 0) || ((((_la - 542)) & ~0x3f) == 0 && ((1L << (_la - 542)) & ((1L << (STATS_AUTO_RECALC - 542)) | (1L << (STATS_PERSISTENT - 542)) | (1L << (STATS_SAMPLE_PAGES - 542)) | (1L << (STORAGE - 542)) | (1L << (TABLESPACE - 542)))) != 0) || _la==CHARSET || _la==COMMA) {
						{
						{
						setState(397);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(396);
							match(COMMA);
							}
						}

						setState(399);
						tableOption();
						}
						}
						setState(404);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(408);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(407);
					partitionDefinitions();
					}
				}

				setState(411);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==REPLACE) {
					{
					setState(410);
					((QueryCreateTableContext)_localctx).keyViolate = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==IGNORE || _la==REPLACE) ) {
						((QueryCreateTableContext)_localctx).keyViolate = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(414);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(413);
					match(AS);
					}
				}

				setState(416);
				selectStatement();
				}
				break;
			case 3:
				_localctx = new ColumnCreateTableContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(418);
				match(CREATE);
				setState(420);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(419);
					match(TEMPORARY);
					}
				}

				setState(422);
				match(TABLE);
				setState(424);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(423);
					ifNotExists();
					}
				}

				setState(426);
				tableName();
				setState(427);
				createDefinitions();
				setState(438);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 22)) & ~0x3f) == 0 && ((1L << (_la - 22)) & ((1L << (CHARACTER - 22)) | (1L << (COLLATE - 22)) | (1L << (DEFAULT - 22)) | (1L << (INDEX - 22)))) != 0) || _la==UNION || ((((_la - 280)) & ~0x3f) == 0 && ((1L << (_la - 280)) & ((1L << (AUTO_INCREMENT - 280)) | (1L << (AVG_ROW_LENGTH - 280)) | (1L << (CHECKSUM - 280)) | (1L << (PAGE_CHECKSUM - 280)) | (1L << (COMMENT - 280)) | (1L << (COMPRESSION - 280)) | (1L << (CONNECTION - 280)) | (1L << (DATA - 280)) | (1L << (DELAY_KEY_WRITE - 280)) | (1L << (ENCRYPTION - 280)) | (1L << (ENGINE - 280)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (INSERT_METHOD - 384)) | (1L << (KEY_BLOCK_SIZE - 384)) | (1L << (MAX_ROWS - 384)) | (1L << (MIN_ROWS - 384)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (PACK_KEYS - 464)) | (1L << (PASSWORD - 464)) | (1L << (ROW_FORMAT - 464)))) != 0) || ((((_la - 542)) & ~0x3f) == 0 && ((1L << (_la - 542)) & ((1L << (STATS_AUTO_RECALC - 542)) | (1L << (STATS_PERSISTENT - 542)) | (1L << (STATS_SAMPLE_PAGES - 542)) | (1L << (STORAGE - 542)) | (1L << (TABLESPACE - 542)))) != 0) || _la==CHARSET) {
					{
					setState(428);
					tableOption();
					setState(435);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (((((_la - 22)) & ~0x3f) == 0 && ((1L << (_la - 22)) & ((1L << (CHARACTER - 22)) | (1L << (COLLATE - 22)) | (1L << (DEFAULT - 22)) | (1L << (INDEX - 22)))) != 0) || _la==UNION || ((((_la - 280)) & ~0x3f) == 0 && ((1L << (_la - 280)) & ((1L << (AUTO_INCREMENT - 280)) | (1L << (AVG_ROW_LENGTH - 280)) | (1L << (CHECKSUM - 280)) | (1L << (PAGE_CHECKSUM - 280)) | (1L << (COMMENT - 280)) | (1L << (COMPRESSION - 280)) | (1L << (CONNECTION - 280)) | (1L << (DATA - 280)) | (1L << (DELAY_KEY_WRITE - 280)) | (1L << (ENCRYPTION - 280)) | (1L << (ENGINE - 280)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (INSERT_METHOD - 384)) | (1L << (KEY_BLOCK_SIZE - 384)) | (1L << (MAX_ROWS - 384)) | (1L << (MIN_ROWS - 384)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (PACK_KEYS - 464)) | (1L << (PASSWORD - 464)) | (1L << (ROW_FORMAT - 464)))) != 0) || ((((_la - 542)) & ~0x3f) == 0 && ((1L << (_la - 542)) & ((1L << (STATS_AUTO_RECALC - 542)) | (1L << (STATS_PERSISTENT - 542)) | (1L << (STATS_SAMPLE_PAGES - 542)) | (1L << (STORAGE - 542)) | (1L << (TABLESPACE - 542)))) != 0) || _la==CHARSET || _la==COMMA) {
						{
						{
						setState(430);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(429);
							match(COMMA);
							}
						}

						setState(432);
						tableOption();
						}
						}
						setState(437);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(441);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(440);
					partitionDefinitions();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfNotExistsContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(MySqlParser.IF, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(MySqlParser.EXISTS, 0); }
		public IfNotExistsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifNotExists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIfNotExists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIfNotExists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIfNotExists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfNotExistsContext ifNotExists() throws RecognitionException {
		IfNotExistsContext _localctx = new IfNotExistsContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_ifNotExists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(445);
			match(IF);
			setState(446);
			match(NOT);
			setState(447);
			match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDefinitionsContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<CreateDefinitionContext> createDefinition() {
			return getRuleContexts(CreateDefinitionContext.class);
		}
		public CreateDefinitionContext createDefinition(int i) {
			return getRuleContext(CreateDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public CreateDefinitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDefinitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateDefinitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateDefinitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateDefinitions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDefinitionsContext createDefinitions() throws RecognitionException {
		CreateDefinitionsContext _localctx = new CreateDefinitionsContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_createDefinitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(449);
			match(LR_BRACKET);
			setState(450);
			createDefinition();
			setState(455);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(451);
				match(COMMA);
				setState(452);
				createDefinition();
				}
				}
				setState(457);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(458);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDefinitionContext extends ParserRuleContext {
		public CreateDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDefinition; }
	 
		public CreateDefinitionContext() { }
		public void copyFrom(CreateDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ColumnDeclarationContext extends CreateDefinitionContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public ColumnDeclarationContext(CreateDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterColumnDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitColumnDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitColumnDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ConstraintDeclarationContext extends CreateDefinitionContext {
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public ConstraintDeclarationContext(CreateDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterConstraintDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitConstraintDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitConstraintDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IndexDeclarationContext extends CreateDefinitionContext {
		public IndexColumnDefinitionContext indexColumnDefinition() {
			return getRuleContext(IndexColumnDefinitionContext.class,0);
		}
		public IndexDeclarationContext(CreateDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndexDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDefinitionContext createDefinition() throws RecognitionException {
		CreateDefinitionContext _localctx = new CreateDefinitionContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_createDefinition);
		try {
			setState(465);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case GROUP:
			case LEFT:
			case NUMBER:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_VALID:
			case JSON_SCHEMA_VALID:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				_localctx = new ColumnDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(460);
				uid();
				setState(461);
				columnDefinition();
				}
				break;
			case CHECK:
			case CONSTRAINT:
			case FOREIGN:
			case PRIMARY:
			case UNIQUE:
				_localctx = new ConstraintDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(463);
				tableConstraint();
				}
				break;
			case FULLTEXT:
			case INDEX:
			case KEY:
			case SPATIAL:
				_localctx = new IndexDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(464);
				indexColumnDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDefinitionContext extends ParserRuleContext {
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public List<ColumnConstraintContext> columnConstraint() {
			return getRuleContexts(ColumnConstraintContext.class);
		}
		public ColumnConstraintContext columnConstraint(int i) {
			return getRuleContext(ColumnConstraintContext.class,i);
		}
		public ColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterColumnDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitColumnDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitColumnDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefinitionContext columnDefinition() throws RecognitionException {
		ColumnDefinitionContext _localctx = new ColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_columnDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(467);
			dataType();
			setState(471);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AS) | (1L << CHECK) | (1L << COLLATE) | (1L << CONSTRAINT) | (1L << DEFAULT) | (1L << GENERATED))) != 0) || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (KEY - 82)) | (1L << (NOT - 82)) | (1L << (NULL_LITERAL - 82)) | (1L << (ON - 82)) | (1L << (PRIMARY - 82)) | (1L << (REFERENCES - 82)))) != 0) || _la==UNIQUE || _la==SERIAL || ((((_la - 280)) & ~0x3f) == 0 && ((1L << (_la - 280)) & ((1L << (AUTO_INCREMENT - 280)) | (1L << (COLUMN_FORMAT - 280)) | (1L << (COMMENT - 280)))) != 0) || _la==STORAGE || _la==NULL_SPEC_LITERAL) {
				{
				{
				setState(468);
				columnConstraint();
				}
				}
				setState(473);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnConstraintContext extends ParserRuleContext {
		public ColumnConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnConstraint; }
	 
		public ColumnConstraintContext() { }
		public void copyFrom(ColumnConstraintContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class StorageColumnConstraintContext extends ColumnConstraintContext {
		public Token storageval;
		public TerminalNode STORAGE() { return getToken(MySqlParser.STORAGE, 0); }
		public TerminalNode DISK() { return getToken(MySqlParser.DISK, 0); }
		public TerminalNode MEMORY() { return getToken(MySqlParser.MEMORY, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public StorageColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStorageColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStorageColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStorageColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AutoIncrementColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode AUTO_INCREMENT() { return getToken(MySqlParser.AUTO_INCREMENT, 0); }
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public CurrentTimestampContext currentTimestamp() {
			return getRuleContext(CurrentTimestampContext.class,0);
		}
		public AutoIncrementColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAutoIncrementColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAutoIncrementColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAutoIncrementColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CommentColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public CommentColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCommentColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCommentColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCommentColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UniqueKeyColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode UNIQUE() { return getToken(MySqlParser.UNIQUE, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public UniqueKeyColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUniqueKeyColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUniqueKeyColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUniqueKeyColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SerialDefaultColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode SERIAL() { return getToken(MySqlParser.SERIAL, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public SerialDefaultColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSerialDefaultColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSerialDefaultColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSerialDefaultColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GeneratedColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode GENERATED() { return getToken(MySqlParser.GENERATED, 0); }
		public TerminalNode ALWAYS() { return getToken(MySqlParser.ALWAYS, 0); }
		public TerminalNode VIRTUAL() { return getToken(MySqlParser.VIRTUAL, 0); }
		public TerminalNode STORED() { return getToken(MySqlParser.STORED, 0); }
		public GeneratedColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGeneratedColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGeneratedColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitGeneratedColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FormatColumnConstraintContext extends ColumnConstraintContext {
		public Token colformat;
		public TerminalNode COLUMN_FORMAT() { return getToken(MySqlParser.COLUMN_FORMAT, 0); }
		public TerminalNode FIXED() { return getToken(MySqlParser.FIXED, 0); }
		public TerminalNode DYNAMIC() { return getToken(MySqlParser.DYNAMIC, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public FormatColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFormatColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFormatColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFormatColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CollateColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public CollateColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCollateColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCollateColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCollateColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PrimaryKeyColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public TerminalNode PRIMARY() { return getToken(MySqlParser.PRIMARY, 0); }
		public PrimaryKeyColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPrimaryKeyColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPrimaryKeyColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPrimaryKeyColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CheckColumnConstraintContext extends ColumnConstraintContext {
		public UidContext name;
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public CheckColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCheckColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCheckColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCheckColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NullColumnConstraintContext extends ColumnConstraintContext {
		public NullNotnullContext nullNotnull() {
			return getRuleContext(NullNotnullContext.class,0);
		}
		public NullColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNullColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNullColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNullColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DefaultColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public DefaultValueContext defaultValue() {
			return getRuleContext(DefaultValueContext.class,0);
		}
		public DefaultColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDefaultColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDefaultColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDefaultColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ReferenceColumnConstraintContext extends ColumnConstraintContext {
		public ReferenceDefinitionContext referenceDefinition() {
			return getRuleContext(ReferenceDefinitionContext.class,0);
		}
		public ReferenceColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReferenceColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReferenceColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReferenceColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnConstraintContext columnConstraint() throws RecognitionException {
		ColumnConstraintContext _localctx = new ColumnConstraintContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_columnConstraint);
		int _la;
		try {
			setState(525);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT:
			case NULL_LITERAL:
			case NULL_SPEC_LITERAL:
				_localctx = new NullColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(474);
				nullNotnull();
				}
				break;
			case DEFAULT:
				_localctx = new DefaultColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(475);
				match(DEFAULT);
				setState(476);
				defaultValue();
				}
				break;
			case ON:
			case AUTO_INCREMENT:
				_localctx = new AutoIncrementColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(481);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AUTO_INCREMENT:
					{
					setState(477);
					match(AUTO_INCREMENT);
					}
					break;
				case ON:
					{
					setState(478);
					match(ON);
					setState(479);
					match(UPDATE);
					setState(480);
					currentTimestamp();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case KEY:
			case PRIMARY:
				_localctx = new PrimaryKeyColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(484);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIMARY) {
					{
					setState(483);
					match(PRIMARY);
					}
				}

				setState(486);
				match(KEY);
				}
				break;
			case UNIQUE:
				_localctx = new UniqueKeyColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(487);
				match(UNIQUE);
				setState(489);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,46,_ctx) ) {
				case 1:
					{
					setState(488);
					match(KEY);
					}
					break;
				}
				}
				break;
			case COMMENT:
				_localctx = new CommentColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(491);
				match(COMMENT);
				setState(492);
				match(STRING_LITERAL);
				}
				break;
			case COLUMN_FORMAT:
				_localctx = new FormatColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(493);
				match(COLUMN_FORMAT);
				setState(494);
				((FormatColumnConstraintContext)_localctx).colformat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==DYNAMIC || _la==FIXED) ) {
					((FormatColumnConstraintContext)_localctx).colformat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case STORAGE:
				_localctx = new StorageColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(495);
				match(STORAGE);
				setState(496);
				((StorageColumnConstraintContext)_localctx).storageval = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==DISK || _la==MEMORY) ) {
					((StorageColumnConstraintContext)_localctx).storageval = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case REFERENCES:
				_localctx = new ReferenceColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(497);
				referenceDefinition();
				}
				break;
			case COLLATE:
				_localctx = new CollateColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(498);
				match(COLLATE);
				setState(499);
				collationName();
				}
				break;
			case AS:
			case GENERATED:
				_localctx = new GeneratedColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(502);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GENERATED) {
					{
					setState(500);
					match(GENERATED);
					setState(501);
					match(ALWAYS);
					}
				}

				setState(504);
				match(AS);
				setState(505);
				match(LR_BRACKET);
				setState(506);
				expression(0);
				setState(507);
				match(RR_BRACKET);
				setState(509);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORED || _la==VIRTUAL) {
					{
					setState(508);
					_la = _input.LA(1);
					if ( !(_la==STORED || _la==VIRTUAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case SERIAL:
				_localctx = new SerialDefaultColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(511);
				match(SERIAL);
				setState(512);
				match(DEFAULT);
				setState(513);
				match(VALUE);
				}
				break;
			case CHECK:
			case CONSTRAINT:
				_localctx = new CheckColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(518);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(514);
					match(CONSTRAINT);
					setState(516);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (GROUP - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (ORDER - 105)) | (1L << (RIGHT - 105)) | (1L << (SCHEMA - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (DATE - 199)) | (1L << (TIME - 199)) | (1L << (TIMESTAMP - 199)) | (1L << (DATETIME - 199)) | (1L << (YEAR - 199)) | (1L << (TEXT - 199)) | (1L << (ENUM - 199)) | (1L << (SERIAL - 199)) | (1L << (JSON_VALID - 199)) | (1L << (JSON_SCHEMA_VALID - 199)) | (1L << (AVG - 199)) | (1L << (BIT_AND - 199)) | (1L << (BIT_OR - 199)) | (1L << (BIT_XOR - 199)) | (1L << (COUNT - 199)) | (1L << (GROUP_CONCAT - 199)) | (1L << (MAX - 199)) | (1L << (MIN - 199)) | (1L << (STD - 199)) | (1L << (STDDEV - 199)) | (1L << (STDDEV_POP - 199)) | (1L << (STDDEV_SAMP - 199)) | (1L << (SUM - 199)) | (1L << (VAR_POP - 199)) | (1L << (VAR_SAMP - 199)) | (1L << (VARIANCE - 199)) | (1L << (POSITION - 199)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)) | (1L << (BOOL - 270)) | (1L << (BOOLEAN - 270)) | (1L << (BTREE - 270)) | (1L << (CACHE - 270)) | (1L << (CASCADED - 270)) | (1L << (CHAIN - 270)) | (1L << (CHANGED - 270)) | (1L << (CHANNEL - 270)) | (1L << (CHECKSUM - 270)) | (1L << (PAGE_CHECKSUM - 270)) | (1L << (CIPHER - 270)) | (1L << (CLASS_ORIGIN - 270)) | (1L << (CLIENT - 270)) | (1L << (CLOSE - 270)) | (1L << (COALESCE - 270)) | (1L << (CODE - 270)) | (1L << (COLUMNS - 270)) | (1L << (COLUMN_FORMAT - 270)) | (1L << (COLUMN_NAME - 270)) | (1L << (COMMENT - 270)) | (1L << (COMMIT - 270)) | (1L << (COMPACT - 270)) | (1L << (COMPLETION - 270)) | (1L << (COMPRESSED - 270)) | (1L << (COMPRESSION - 270)) | (1L << (CONCURRENT - 270)) | (1L << (CONNECTION - 270)) | (1L << (CONSISTENT - 270)) | (1L << (CONSTRAINT_CATALOG - 270)) | (1L << (CONSTRAINT_SCHEMA - 270)) | (1L << (CONSTRAINT_NAME - 270)) | (1L << (CONTAINS - 270)) | (1L << (CONTEXT - 270)) | (1L << (CONTRIBUTORS - 270)) | (1L << (COPY - 270)) | (1L << (CPU - 270)) | (1L << (CURSOR_NAME - 270)) | (1L << (DATA - 270)) | (1L << (DATAFILE - 270)) | (1L << (DEALLOCATE - 270)) | (1L << (DEFAULT_AUTH - 270)) | (1L << (DEFINER - 270)) | (1L << (DELAY_KEY_WRITE - 270)) | (1L << (DES_KEY_FILE - 270)) | (1L << (DIRECTORY - 270)) | (1L << (DISABLE - 270)) | (1L << (DISCARD - 270)) | (1L << (DISK - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)) | (1L << (EVENTS - 334)) | (1L << (EVERY - 334)) | (1L << (EXCHANGE - 334)) | (1L << (EXCLUSIVE - 334)) | (1L << (EXPIRE - 334)) | (1L << (EXPORT - 334)) | (1L << (EXTENDED - 334)) | (1L << (EXTENT_SIZE - 334)) | (1L << (FAST - 334)) | (1L << (FAULTS - 334)) | (1L << (FIELDS - 334)) | (1L << (FILE_BLOCK_SIZE - 334)) | (1L << (FILTER - 334)) | (1L << (FIRST - 334)) | (1L << (FIXED - 334)) | (1L << (FLUSH - 334)) | (1L << (FOLLOWS - 334)) | (1L << (FOUND - 334)) | (1L << (FULL - 334)) | (1L << (FUNCTION - 334)) | (1L << (GENERAL - 334)) | (1L << (GLOBAL - 334)) | (1L << (GRANTS - 334)) | (1L << (GROUP_REPLICATION - 334)) | (1L << (HANDLER - 334)) | (1L << (HASH - 334)) | (1L << (HELP - 334)) | (1L << (HOST - 334)) | (1L << (HOSTS - 334)) | (1L << (IDENTIFIED - 334)) | (1L << (IGNORE_SERVER_IDS - 334)) | (1L << (IMPORT - 334)) | (1L << (INDEXES - 334)) | (1L << (INITIAL_SIZE - 334)) | (1L << (INPLACE - 334)) | (1L << (INSERT_METHOD - 334)) | (1L << (INSTALL - 334)) | (1L << (INSTANCE - 334)) | (1L << (INVISIBLE - 334)) | (1L << (INVOKER - 334)) | (1L << (IO - 334)) | (1L << (IO_THREAD - 334)) | (1L << (IPC - 334)) | (1L << (ISOLATION - 334)) | (1L << (ISSUER - 334)) | (1L << (JSON - 334)) | (1L << (KEY_BLOCK_SIZE - 334)) | (1L << (LANGUAGE - 334)) | (1L << (LAST - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)) | (1L << (MASTER_LOG_POS - 398)) | (1L << (MASTER_PASSWORD - 398)) | (1L << (MASTER_PORT - 398)) | (1L << (MASTER_RETRY_COUNT - 398)) | (1L << (MASTER_SSL - 398)) | (1L << (MASTER_SSL_CA - 398)) | (1L << (MASTER_SSL_CAPATH - 398)) | (1L << (MASTER_SSL_CERT - 398)) | (1L << (MASTER_SSL_CIPHER - 398)) | (1L << (MASTER_SSL_CRL - 398)) | (1L << (MASTER_SSL_CRLPATH - 398)) | (1L << (MASTER_SSL_KEY - 398)) | (1L << (MASTER_TLS_VERSION - 398)) | (1L << (MASTER_USER - 398)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 398)) | (1L << (MAX_QUERIES_PER_HOUR - 398)) | (1L << (MAX_ROWS - 398)) | (1L << (MAX_SIZE - 398)) | (1L << (MAX_UPDATES_PER_HOUR - 398)) | (1L << (MAX_USER_CONNECTIONS - 398)) | (1L << (MEDIUM - 398)) | (1L << (MEMBER - 398)) | (1L << (MERGE - 398)) | (1L << (MESSAGE_TEXT - 398)) | (1L << (MID - 398)) | (1L << (MIGRATE - 398)) | (1L << (MIN_ROWS - 398)) | (1L << (MODE - 398)) | (1L << (MODIFY - 398)) | (1L << (MUTEX - 398)) | (1L << (MYSQL - 398)) | (1L << (MYSQL_ERRNO - 398)) | (1L << (NAME - 398)) | (1L << (NAMES - 398)) | (1L << (NCHAR - 398)) | (1L << (NEVER - 398)) | (1L << (NEXT - 398)) | (1L << (NO - 398)) | (1L << (NODEGROUP - 398)) | (1L << (NONE - 398)) | (1L << (OFFLINE - 398)) | (1L << (OFFSET - 398)) | (1L << (OF - 398)) | (1L << (OJ - 398)) | (1L << (OLD_PASSWORD - 398)) | (1L << (ONE - 398)) | (1L << (ONLINE - 398)) | (1L << (ONLY - 398)) | (1L << (OPEN - 398)) | (1L << (OPTIMIZER_COSTS - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)) | (1L << (PORT - 462)) | (1L << (PRECEDES - 462)) | (1L << (PREPARE - 462)) | (1L << (PRESERVE - 462)) | (1L << (PREV - 462)) | (1L << (PROCESSLIST - 462)) | (1L << (PROFILE - 462)) | (1L << (PROFILES - 462)) | (1L << (PROXY - 462)) | (1L << (QUERY - 462)) | (1L << (QUICK - 462)) | (1L << (REBUILD - 462)) | (1L << (RECOVER - 462)) | (1L << (REDO_BUFFER_SIZE - 462)) | (1L << (REDUNDANT - 462)) | (1L << (RELAY - 462)) | (1L << (RELAY_LOG_FILE - 462)) | (1L << (RELAY_LOG_POS - 462)) | (1L << (RELAYLOG - 462)) | (1L << (REMOVE - 462)) | (1L << (REORGANIZE - 462)) | (1L << (REPAIR - 462)) | (1L << (REPLICATE_DO_DB - 462)) | (1L << (REPLICATE_DO_TABLE - 462)) | (1L << (REPLICATE_IGNORE_DB - 462)) | (1L << (REPLICATE_IGNORE_TABLE - 462)) | (1L << (REPLICATE_REWRITE_DB - 462)) | (1L << (REPLICATE_WILD_DO_TABLE - 462)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 462)) | (1L << (REPLICATION - 462)) | (1L << (RESET - 462)) | (1L << (RESUME - 462)) | (1L << (RETURNED_SQLSTATE - 462)) | (1L << (RETURNS - 462)) | (1L << (ROLE - 462)) | (1L << (ROLLBACK - 462)) | (1L << (ROLLUP - 462)) | (1L << (ROTATE - 462)) | (1L << (ROW - 462)) | (1L << (ROWS - 462)) | (1L << (ROW_FORMAT - 462)) | (1L << (SAVEPOINT - 462)) | (1L << (SCHEDULE - 462)) | (1L << (SECURITY - 462)) | (1L << (SERVER - 462)) | (1L << (SESSION - 462)) | (1L << (SHARE - 462)) | (1L << (SHARED - 462)) | (1L << (SIGNED - 462)) | (1L << (SIMPLE - 462)) | (1L << (SLAVE - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)) | (1L << (SQL_CACHE - 526)) | (1L << (SQL_NO_CACHE - 526)) | (1L << (SQL_THREAD - 526)) | (1L << (START - 526)) | (1L << (STARTS - 526)) | (1L << (STATS_AUTO_RECALC - 526)) | (1L << (STATS_PERSISTENT - 526)) | (1L << (STATS_SAMPLE_PAGES - 526)) | (1L << (STATUS - 526)) | (1L << (STOP - 526)) | (1L << (STORAGE - 526)) | (1L << (STRING - 526)) | (1L << (SUBCLASS_ORIGIN - 526)) | (1L << (SUBJECT - 526)) | (1L << (SUBPARTITION - 526)) | (1L << (SUBPARTITIONS - 526)) | (1L << (SUSPEND - 526)) | (1L << (SWAPS - 526)) | (1L << (SWITCHES - 526)) | (1L << (TABLE_NAME - 526)) | (1L << (TABLESPACE - 526)) | (1L << (TEMPORARY - 526)) | (1L << (TEMPTABLE - 526)) | (1L << (THAN - 526)) | (1L << (TRADITIONAL - 526)) | (1L << (TRANSACTION - 526)) | (1L << (TRANSACTIONAL - 526)) | (1L << (TRIGGERS - 526)) | (1L << (TRUNCATE - 526)) | (1L << (UNDEFINED - 526)) | (1L << (UNDOFILE - 526)) | (1L << (UNDO_BUFFER_SIZE - 526)) | (1L << (UNINSTALL - 526)) | (1L << (UNKNOWN - 526)) | (1L << (UNTIL - 526)) | (1L << (UPGRADE - 526)) | (1L << (USER - 526)) | (1L << (USE_FRM - 526)) | (1L << (USER_RESOURCES - 526)) | (1L << (VALIDATION - 526)) | (1L << (VALUE - 526)) | (1L << (VARIABLES - 526)) | (1L << (VIEW - 526)) | (1L << (VISIBLE - 526)) | (1L << (WAIT - 526)) | (1L << (WARNINGS - 526)) | (1L << (WITHOUT - 526)) | (1L << (WORK - 526)) | (1L << (WRAPPER - 526)) | (1L << (X509 - 526)) | (1L << (XA - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (XML - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)) | (1L << (DAY - 590)) | (1L << (HOUR - 590)) | (1L << (MINUTE - 590)) | (1L << (WEEK - 590)) | (1L << (SECOND - 590)) | (1L << (MICROSECOND - 590)) | (1L << (TABLES - 590)) | (1L << (ROUTINE - 590)) | (1L << (EXECUTE - 590)) | (1L << (FILE - 590)) | (1L << (PROCESS - 590)) | (1L << (RELOAD - 590)) | (1L << (SHUTDOWN - 590)) | (1L << (SUPER - 590)) | (1L << (PRIVILEGES - 590)) | (1L << (AUDIT_ADMIN - 590)) | (1L << (BACKUP_ADMIN - 590)) | (1L << (BINLOG_ADMIN - 590)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 590)) | (1L << (CLONE_ADMIN - 590)) | (1L << (CONNECTION_ADMIN - 590)) | (1L << (ENCRYPTION_KEY_ADMIN - 590)) | (1L << (FIREWALL_ADMIN - 590)) | (1L << (FIREWALL_USER - 590)) | (1L << (GROUP_REPLICATION_ADMIN - 590)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 590)) | (1L << (NDB_STORED_USER - 590)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 590)) | (1L << (REPLICATION_APPLIER - 590)) | (1L << (REPLICATION_SLAVE_ADMIN - 590)) | (1L << (RESOURCE_GROUP_ADMIN - 590)) | (1L << (RESOURCE_GROUP_USER - 590)) | (1L << (ROLE_ADMIN - 590)) | (1L << (SESSION_VARIABLES_ADMIN - 590)) | (1L << (SET_USER_ID - 590)) | (1L << (SHOW_ROUTINE - 590)) | (1L << (SYSTEM_VARIABLES_ADMIN - 590)) | (1L << (TABLE_ENCRYPTION_ADMIN - 590)) | (1L << (VERSION_TOKEN_ADMIN - 590)) | (1L << (XA_RECOVER_ADMIN - 590)) | (1L << (ARMSCII8 - 590)) | (1L << (ASCII - 590)) | (1L << (BIG5 - 590)) | (1L << (CP1250 - 590)) | (1L << (CP1251 - 590)) | (1L << (CP1256 - 590)) | (1L << (CP1257 - 590)) | (1L << (CP850 - 590)) | (1L << (CP852 - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)) | (1L << (GREEK - 654)) | (1L << (HEBREW - 654)) | (1L << (HP8 - 654)) | (1L << (KEYBCS2 - 654)) | (1L << (KOI8R - 654)) | (1L << (KOI8U - 654)) | (1L << (LATIN1 - 654)) | (1L << (LATIN2 - 654)) | (1L << (LATIN5 - 654)) | (1L << (LATIN7 - 654)) | (1L << (MACCE - 654)) | (1L << (MACROMAN - 654)) | (1L << (SJIS - 654)) | (1L << (SWE7 - 654)) | (1L << (TIS620 - 654)) | (1L << (UCS2 - 654)) | (1L << (UJIS - 654)) | (1L << (UTF16 - 654)) | (1L << (UTF16LE - 654)) | (1L << (UTF32 - 654)) | (1L << (UTF8 - 654)) | (1L << (UTF8MB3 - 654)) | (1L << (UTF8MB4 - 654)) | (1L << (ARCHIVE - 654)) | (1L << (BLACKHOLE - 654)) | (1L << (CSV - 654)) | (1L << (FEDERATED - 654)) | (1L << (INNODB - 654)) | (1L << (MEMORY - 654)) | (1L << (MRG_MYISAM - 654)) | (1L << (MYISAM - 654)) | (1L << (NDB - 654)) | (1L << (NDBCLUSTER - 654)) | (1L << (PERFORMANCE_SCHEMA - 654)) | (1L << (TOKUDB - 654)) | (1L << (REPEATABLE - 654)) | (1L << (COMMITTED - 654)) | (1L << (UNCOMMITTED - 654)) | (1L << (SERIALIZABLE - 654)) | (1L << (GEOMETRYCOLLECTION - 654)) | (1L << (LINESTRING - 654)) | (1L << (MULTILINESTRING - 654)) | (1L << (MULTIPOINT - 654)) | (1L << (MULTIPOLYGON - 654)) | (1L << (POINT - 654)) | (1L << (POLYGON - 654)) | (1L << (ABS - 654)) | (1L << (ACOS - 654)) | (1L << (ADDDATE - 654)) | (1L << (ADDTIME - 654)) | (1L << (AES_DECRYPT - 654)) | (1L << (AES_ENCRYPT - 654)) | (1L << (AREA - 654)) | (1L << (ASBINARY - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)) | (1L << (ASYMMETRIC_VERIFY - 718)) | (1L << (ATAN - 718)) | (1L << (ATAN2 - 718)) | (1L << (BENCHMARK - 718)) | (1L << (BIN - 718)) | (1L << (BIT_COUNT - 718)) | (1L << (BIT_LENGTH - 718)) | (1L << (BUFFER - 718)) | (1L << (CATALOG_NAME - 718)) | (1L << (CEIL - 718)) | (1L << (CEILING - 718)) | (1L << (CENTROID - 718)) | (1L << (CHARACTER_LENGTH - 718)) | (1L << (CHARSET - 718)) | (1L << (CHAR_LENGTH - 718)) | (1L << (COERCIBILITY - 718)) | (1L << (COLLATION - 718)) | (1L << (COMPRESS - 718)) | (1L << (CONCAT - 718)) | (1L << (CONCAT_WS - 718)) | (1L << (CONNECTION_ID - 718)) | (1L << (CONV - 718)) | (1L << (CONVERT_TZ - 718)) | (1L << (COS - 718)) | (1L << (COT - 718)) | (1L << (CRC32 - 718)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1L << (CREATE_DH_PARAMETERS - 718)) | (1L << (CREATE_DIGEST - 718)) | (1L << (CROSSES - 718)) | (1L << (DATEDIFF - 718)) | (1L << (DATE_FORMAT - 718)) | (1L << (DAYNAME - 718)) | (1L << (DAYOFMONTH - 718)) | (1L << (DAYOFWEEK - 718)) | (1L << (DAYOFYEAR - 718)) | (1L << (DECODE - 718)) | (1L << (DEGREES - 718)) | (1L << (DES_DECRYPT - 718)) | (1L << (DES_ENCRYPT - 718)) | (1L << (DIMENSION - 718)) | (1L << (DISJOINT - 718)) | (1L << (ELT - 718)) | (1L << (ENCODE - 718)) | (1L << (ENCRYPT - 718)) | (1L << (ENDPOINT - 718)) | (1L << (ENVELOPE - 718)) | (1L << (EQUALS - 718)) | (1L << (EXP - 718)) | (1L << (EXPORT_SET - 718)) | (1L << (EXTERIORRING - 718)) | (1L << (EXTRACTVALUE - 718)) | (1L << (FIELD - 718)) | (1L << (FIND_IN_SET - 718)) | (1L << (FLOOR - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 782)) | (1L << (GEOMETRYFROMTEXT - 782)) | (1L << (GEOMETRYFROMWKB - 782)) | (1L << (GEOMETRYN - 782)) | (1L << (GEOMETRYTYPE - 782)) | (1L << (GEOMFROMTEXT - 782)) | (1L << (GEOMFROMWKB - 782)) | (1L << (GET_FORMAT - 782)) | (1L << (GET_LOCK - 782)) | (1L << (GLENGTH - 782)) | (1L << (GREATEST - 782)) | (1L << (GTID_SUBSET - 782)) | (1L << (GTID_SUBTRACT - 782)) | (1L << (HEX - 782)) | (1L << (IFNULL - 782)) | (1L << (INET6_ATON - 782)) | (1L << (INET6_NTOA - 782)) | (1L << (INET_ATON - 782)) | (1L << (INET_NTOA - 782)) | (1L << (INSTR - 782)) | (1L << (INTERIORRINGN - 782)) | (1L << (INTERSECTS - 782)) | (1L << (ISCLOSED - 782)) | (1L << (ISEMPTY - 782)) | (1L << (ISNULL - 782)) | (1L << (ISSIMPLE - 782)) | (1L << (IS_FREE_LOCK - 782)) | (1L << (IS_IPV4 - 782)) | (1L << (IS_IPV4_COMPAT - 782)) | (1L << (IS_IPV4_MAPPED - 782)) | (1L << (IS_IPV6 - 782)) | (1L << (IS_USED_LOCK - 782)) | (1L << (LAST_INSERT_ID - 782)) | (1L << (LCASE - 782)) | (1L << (LEAST - 782)) | (1L << (LENGTH - 782)) | (1L << (LINEFROMTEXT - 782)) | (1L << (LINEFROMWKB - 782)) | (1L << (LINESTRINGFROMTEXT - 782)) | (1L << (LINESTRINGFROMWKB - 782)) | (1L << (LN - 782)) | (1L << (LOAD_FILE - 782)) | (1L << (LOCATE - 782)) | (1L << (LOG - 782)) | (1L << (LOG10 - 782)) | (1L << (LOG2 - 782)) | (1L << (LOWER - 782)) | (1L << (LPAD - 782)) | (1L << (LTRIM - 782)) | (1L << (MAKEDATE - 782)) | (1L << (MAKETIME - 782)) | (1L << (MAKE_SET - 782)) | (1L << (MASTER_POS_WAIT - 782)) | (1L << (MBRCONTAINS - 782)) | (1L << (MBRDISJOINT - 782)) | (1L << (MBREQUAL - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)) | (1L << (MPOINTFROMTEXT - 846)) | (1L << (MPOINTFROMWKB - 846)) | (1L << (MPOLYFROMTEXT - 846)) | (1L << (MPOLYFROMWKB - 846)) | (1L << (MULTILINESTRINGFROMTEXT - 846)) | (1L << (MULTILINESTRINGFROMWKB - 846)) | (1L << (MULTIPOINTFROMTEXT - 846)) | (1L << (MULTIPOINTFROMWKB - 846)) | (1L << (MULTIPOLYGONFROMTEXT - 846)) | (1L << (MULTIPOLYGONFROMWKB - 846)) | (1L << (NAME_CONST - 846)) | (1L << (NULLIF - 846)) | (1L << (NUMGEOMETRIES - 846)) | (1L << (NUMINTERIORRINGS - 846)) | (1L << (NUMPOINTS - 846)) | (1L << (OCT - 846)) | (1L << (OCTET_LENGTH - 846)) | (1L << (ORD - 846)) | (1L << (OVERLAPS - 846)) | (1L << (PERIOD_ADD - 846)) | (1L << (PERIOD_DIFF - 846)) | (1L << (PI - 846)) | (1L << (POINTFROMTEXT - 846)) | (1L << (POINTFROMWKB - 846)) | (1L << (POINTN - 846)) | (1L << (POLYFROMTEXT - 846)) | (1L << (POLYFROMWKB - 846)) | (1L << (POLYGONFROMTEXT - 846)) | (1L << (POLYGONFROMWKB - 846)) | (1L << (POW - 846)) | (1L << (POWER - 846)) | (1L << (QUOTE - 846)) | (1L << (RADIANS - 846)) | (1L << (RAND - 846)) | (1L << (RANDOM_BYTES - 846)) | (1L << (RELEASE_LOCK - 846)) | (1L << (REVERSE - 846)) | (1L << (ROUND - 846)) | (1L << (ROW_COUNT - 846)) | (1L << (RPAD - 846)) | (1L << (RTRIM - 846)) | (1L << (SEC_TO_TIME - 846)) | (1L << (SESSION_USER - 846)) | (1L << (SHA - 846)) | (1L << (SHA1 - 846)) | (1L << (SHA2 - 846)) | (1L << (SCHEMA_NAME - 846)) | (1L << (SIGN - 846)) | (1L << (SIN - 846)) | (1L << (SLEEP - 846)) | (1L << (SOUNDEX - 846)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 846)) | (1L << (SQRT - 846)) | (1L << (SRID - 846)) | (1L << (STARTPOINT - 846)) | (1L << (STRCMP - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)) | (1L << (ST_CONTAINS - 910)) | (1L << (ST_CROSSES - 910)) | (1L << (ST_DIFFERENCE - 910)) | (1L << (ST_DIMENSION - 910)) | (1L << (ST_DISJOINT - 910)) | (1L << (ST_DISTANCE - 910)) | (1L << (ST_ENDPOINT - 910)) | (1L << (ST_ENVELOPE - 910)) | (1L << (ST_EQUALS - 910)) | (1L << (ST_EXTERIORRING - 910)) | (1L << (ST_GEOMCOLLFROMTEXT - 910)) | (1L << (ST_GEOMCOLLFROMTXT - 910)) | (1L << (ST_GEOMCOLLFROMWKB - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1L << (ST_GEOMETRYFROMTEXT - 910)) | (1L << (ST_GEOMETRYFROMWKB - 910)) | (1L << (ST_GEOMETRYN - 910)) | (1L << (ST_GEOMETRYTYPE - 910)) | (1L << (ST_GEOMFROMTEXT - 910)) | (1L << (ST_GEOMFROMWKB - 910)) | (1L << (ST_INTERIORRINGN - 910)) | (1L << (ST_INTERSECTION - 910)) | (1L << (ST_INTERSECTS - 910)) | (1L << (ST_ISCLOSED - 910)) | (1L << (ST_ISEMPTY - 910)) | (1L << (ST_ISSIMPLE - 910)) | (1L << (ST_LINEFROMTEXT - 910)) | (1L << (ST_LINEFROMWKB - 910)) | (1L << (ST_LINESTRINGFROMTEXT - 910)) | (1L << (ST_LINESTRINGFROMWKB - 910)) | (1L << (ST_NUMGEOMETRIES - 910)) | (1L << (ST_NUMINTERIORRING - 910)) | (1L << (ST_NUMINTERIORRINGS - 910)) | (1L << (ST_NUMPOINTS - 910)) | (1L << (ST_OVERLAPS - 910)) | (1L << (ST_POINTFROMTEXT - 910)) | (1L << (ST_POINTFROMWKB - 910)) | (1L << (ST_POINTN - 910)) | (1L << (ST_POLYFROMTEXT - 910)) | (1L << (ST_POLYFROMWKB - 910)) | (1L << (ST_POLYGONFROMTEXT - 910)) | (1L << (ST_POLYGONFROMWKB - 910)) | (1L << (ST_SRID - 910)) | (1L << (ST_STARTPOINT - 910)) | (1L << (ST_SYMDIFFERENCE - 910)) | (1L << (ST_TOUCHES - 910)) | (1L << (ST_UNION - 910)) | (1L << (ST_WITHIN - 910)) | (1L << (ST_X - 910)) | (1L << (ST_Y - 910)) | (1L << (SUBDATE - 910)) | (1L << (SUBSTRING_INDEX - 910)) | (1L << (SUBTIME - 910)) | (1L << (SYSTEM_USER - 910)) | (1L << (TAN - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)) | (1L << (TO_SECONDS - 974)) | (1L << (UCASE - 974)) | (1L << (UNCOMPRESS - 974)) | (1L << (UNCOMPRESSED_LENGTH - 974)) | (1L << (UNHEX - 974)) | (1L << (UNIX_TIMESTAMP - 974)) | (1L << (UPDATEXML - 974)) | (1L << (UPPER - 974)) | (1L << (UUID - 974)) | (1L << (UUID_SHORT - 974)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 974)) | (1L << (VERSION - 974)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1L << (WEEKDAY - 974)) | (1L << (WEEKOFYEAR - 974)) | (1L << (WEIGHT_STRING - 974)) | (1L << (WITHIN - 974)) | (1L << (YEARWEEK - 974)) | (1L << (Y_FUNCTION - 974)) | (1L << (X_FUNCTION - 974)) | (1L << (MOD - 974)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1040)) | (1L << (STRING_LITERAL - 1040)) | (1L << (ID - 1040)) | (1L << (REVERSE_QUOTE_ID - 1040)))) != 0)) {
						{
						setState(515);
						((CheckColumnConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(520);
				match(CHECK);
				setState(521);
				match(LR_BRACKET);
				setState(522);
				expression(0);
				setState(523);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultValueContext extends ParserRuleContext {
		public TerminalNode NULL_LITERAL() { return getToken(MySqlParser.NULL_LITERAL, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public List<CurrentTimestampContext> currentTimestamp() {
			return getRuleContexts(CurrentTimestampContext.class);
		}
		public CurrentTimestampContext currentTimestamp(int i) {
			return getRuleContext(CurrentTimestampContext.class,i);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public UnaryOperatorContext unaryOperator() {
			return getRuleContext(UnaryOperatorContext.class,0);
		}
		public DefaultValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDefaultValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDefaultValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDefaultValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaultValueContext defaultValue() throws RecognitionException {
		DefaultValueContext _localctx = new DefaultValueContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_defaultValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(537);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,53,_ctx) ) {
			case 1:
				{
				setState(527);
				match(NULL_LITERAL);
				}
				break;
			case 2:
				{
				setState(529);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,52,_ctx) ) {
				case 1:
					{
					setState(528);
					unaryOperator();
					}
					break;
				}
				setState(531);
				constant();
				}
				break;
			case 3:
				{
				setState(532);
				currentTimestamp();
				}
				break;
			case 4:
				{
				setState(533);
				match(LR_BRACKET);
				setState(534);
				expression(0);
				setState(535);
				match(RR_BRACKET);
				}
				break;
			}
			setState(542);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,54,_ctx) ) {
			case 1:
				{
				setState(539);
				match(ON);
				setState(540);
				match(UPDATE);
				setState(541);
				currentTimestamp();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CurrentTimestampContext extends ParserRuleContext {
		public TerminalNode NOW() { return getToken(MySqlParser.NOW, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode LOCALTIME() { return getToken(MySqlParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(MySqlParser.LOCALTIMESTAMP, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public CurrentTimestampContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_currentTimestamp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCurrentTimestamp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCurrentTimestamp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCurrentTimestamp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CurrentTimestampContext currentTimestamp() throws RecognitionException {
		CurrentTimestampContext _localctx = new CurrentTimestampContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_currentTimestamp);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(558);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
				{
				setState(544);
				_la = _input.LA(1);
				if ( !(((((_la - 253)) & ~0x3f) == 0 && ((1L << (_la - 253)) & ((1L << (CURRENT_TIMESTAMP - 253)) | (1L << (LOCALTIME - 253)) | (1L << (LOCALTIMESTAMP - 253)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(550);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(545);
					match(LR_BRACKET);
					setState(547);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 1033)) & ~0x3f) == 0 && ((1L << (_la - 1033)) & ((1L << (ZERO_DECIMAL - 1033)) | (1L << (ONE_DECIMAL - 1033)) | (1L << (TWO_DECIMAL - 1033)) | (1L << (DECIMAL_LITERAL - 1033)))) != 0)) {
						{
						setState(546);
						decimalLiteral();
						}
					}

					setState(549);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case NOW:
				{
				setState(552);
				match(NOW);
				setState(553);
				match(LR_BRACKET);
				setState(555);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 1033)) & ~0x3f) == 0 && ((1L << (_la - 1033)) & ((1L << (ZERO_DECIMAL - 1033)) | (1L << (ONE_DECIMAL - 1033)) | (1L << (TWO_DECIMAL - 1033)) | (1L << (DECIMAL_LITERAL - 1033)))) != 0)) {
					{
					setState(554);
					decimalLiteral();
					}
				}

				setState(557);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableConstraintContext extends ParserRuleContext {
		public TableConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableConstraint; }
	 
		public TableConstraintContext() { }
		public void copyFrom(TableConstraintContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class UniqueKeyTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public Token indexFormat;
		public UidContext index;
		public TerminalNode UNIQUE() { return getToken(MySqlParser.UNIQUE, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public UniqueKeyTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUniqueKeyTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUniqueKeyTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUniqueKeyTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CheckTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public CheckTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCheckTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCheckTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCheckTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PrimaryKeyTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public UidContext index;
		public TerminalNode PRIMARY() { return getToken(MySqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public PrimaryKeyTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPrimaryKeyTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPrimaryKeyTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPrimaryKeyTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ForeignKeyTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public UidContext index;
		public TerminalNode FOREIGN() { return getToken(MySqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public ReferenceDefinitionContext referenceDefinition() {
			return getRuleContext(ReferenceDefinitionContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public ForeignKeyTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterForeignKeyTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitForeignKeyTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitForeignKeyTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableConstraintContext tableConstraint() throws RecognitionException {
		TableConstraintContext _localctx = new TableConstraintContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_tableConstraint);
		int _la;
		try {
			setState(629);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,75,_ctx) ) {
			case 1:
				_localctx = new PrimaryKeyTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(564);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(560);
					match(CONSTRAINT);
					setState(562);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (GROUP - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (ORDER - 105)) | (1L << (RIGHT - 105)) | (1L << (SCHEMA - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (DATE - 199)) | (1L << (TIME - 199)) | (1L << (TIMESTAMP - 199)) | (1L << (DATETIME - 199)) | (1L << (YEAR - 199)) | (1L << (TEXT - 199)) | (1L << (ENUM - 199)) | (1L << (SERIAL - 199)) | (1L << (JSON_VALID - 199)) | (1L << (JSON_SCHEMA_VALID - 199)) | (1L << (AVG - 199)) | (1L << (BIT_AND - 199)) | (1L << (BIT_OR - 199)) | (1L << (BIT_XOR - 199)) | (1L << (COUNT - 199)) | (1L << (GROUP_CONCAT - 199)) | (1L << (MAX - 199)) | (1L << (MIN - 199)) | (1L << (STD - 199)) | (1L << (STDDEV - 199)) | (1L << (STDDEV_POP - 199)) | (1L << (STDDEV_SAMP - 199)) | (1L << (SUM - 199)) | (1L << (VAR_POP - 199)) | (1L << (VAR_SAMP - 199)) | (1L << (VARIANCE - 199)) | (1L << (POSITION - 199)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)) | (1L << (BOOL - 270)) | (1L << (BOOLEAN - 270)) | (1L << (BTREE - 270)) | (1L << (CACHE - 270)) | (1L << (CASCADED - 270)) | (1L << (CHAIN - 270)) | (1L << (CHANGED - 270)) | (1L << (CHANNEL - 270)) | (1L << (CHECKSUM - 270)) | (1L << (PAGE_CHECKSUM - 270)) | (1L << (CIPHER - 270)) | (1L << (CLASS_ORIGIN - 270)) | (1L << (CLIENT - 270)) | (1L << (CLOSE - 270)) | (1L << (COALESCE - 270)) | (1L << (CODE - 270)) | (1L << (COLUMNS - 270)) | (1L << (COLUMN_FORMAT - 270)) | (1L << (COLUMN_NAME - 270)) | (1L << (COMMENT - 270)) | (1L << (COMMIT - 270)) | (1L << (COMPACT - 270)) | (1L << (COMPLETION - 270)) | (1L << (COMPRESSED - 270)) | (1L << (COMPRESSION - 270)) | (1L << (CONCURRENT - 270)) | (1L << (CONNECTION - 270)) | (1L << (CONSISTENT - 270)) | (1L << (CONSTRAINT_CATALOG - 270)) | (1L << (CONSTRAINT_SCHEMA - 270)) | (1L << (CONSTRAINT_NAME - 270)) | (1L << (CONTAINS - 270)) | (1L << (CONTEXT - 270)) | (1L << (CONTRIBUTORS - 270)) | (1L << (COPY - 270)) | (1L << (CPU - 270)) | (1L << (CURSOR_NAME - 270)) | (1L << (DATA - 270)) | (1L << (DATAFILE - 270)) | (1L << (DEALLOCATE - 270)) | (1L << (DEFAULT_AUTH - 270)) | (1L << (DEFINER - 270)) | (1L << (DELAY_KEY_WRITE - 270)) | (1L << (DES_KEY_FILE - 270)) | (1L << (DIRECTORY - 270)) | (1L << (DISABLE - 270)) | (1L << (DISCARD - 270)) | (1L << (DISK - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)) | (1L << (EVENTS - 334)) | (1L << (EVERY - 334)) | (1L << (EXCHANGE - 334)) | (1L << (EXCLUSIVE - 334)) | (1L << (EXPIRE - 334)) | (1L << (EXPORT - 334)) | (1L << (EXTENDED - 334)) | (1L << (EXTENT_SIZE - 334)) | (1L << (FAST - 334)) | (1L << (FAULTS - 334)) | (1L << (FIELDS - 334)) | (1L << (FILE_BLOCK_SIZE - 334)) | (1L << (FILTER - 334)) | (1L << (FIRST - 334)) | (1L << (FIXED - 334)) | (1L << (FLUSH - 334)) | (1L << (FOLLOWS - 334)) | (1L << (FOUND - 334)) | (1L << (FULL - 334)) | (1L << (FUNCTION - 334)) | (1L << (GENERAL - 334)) | (1L << (GLOBAL - 334)) | (1L << (GRANTS - 334)) | (1L << (GROUP_REPLICATION - 334)) | (1L << (HANDLER - 334)) | (1L << (HASH - 334)) | (1L << (HELP - 334)) | (1L << (HOST - 334)) | (1L << (HOSTS - 334)) | (1L << (IDENTIFIED - 334)) | (1L << (IGNORE_SERVER_IDS - 334)) | (1L << (IMPORT - 334)) | (1L << (INDEXES - 334)) | (1L << (INITIAL_SIZE - 334)) | (1L << (INPLACE - 334)) | (1L << (INSERT_METHOD - 334)) | (1L << (INSTALL - 334)) | (1L << (INSTANCE - 334)) | (1L << (INVISIBLE - 334)) | (1L << (INVOKER - 334)) | (1L << (IO - 334)) | (1L << (IO_THREAD - 334)) | (1L << (IPC - 334)) | (1L << (ISOLATION - 334)) | (1L << (ISSUER - 334)) | (1L << (JSON - 334)) | (1L << (KEY_BLOCK_SIZE - 334)) | (1L << (LANGUAGE - 334)) | (1L << (LAST - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)) | (1L << (MASTER_LOG_POS - 398)) | (1L << (MASTER_PASSWORD - 398)) | (1L << (MASTER_PORT - 398)) | (1L << (MASTER_RETRY_COUNT - 398)) | (1L << (MASTER_SSL - 398)) | (1L << (MASTER_SSL_CA - 398)) | (1L << (MASTER_SSL_CAPATH - 398)) | (1L << (MASTER_SSL_CERT - 398)) | (1L << (MASTER_SSL_CIPHER - 398)) | (1L << (MASTER_SSL_CRL - 398)) | (1L << (MASTER_SSL_CRLPATH - 398)) | (1L << (MASTER_SSL_KEY - 398)) | (1L << (MASTER_TLS_VERSION - 398)) | (1L << (MASTER_USER - 398)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 398)) | (1L << (MAX_QUERIES_PER_HOUR - 398)) | (1L << (MAX_ROWS - 398)) | (1L << (MAX_SIZE - 398)) | (1L << (MAX_UPDATES_PER_HOUR - 398)) | (1L << (MAX_USER_CONNECTIONS - 398)) | (1L << (MEDIUM - 398)) | (1L << (MEMBER - 398)) | (1L << (MERGE - 398)) | (1L << (MESSAGE_TEXT - 398)) | (1L << (MID - 398)) | (1L << (MIGRATE - 398)) | (1L << (MIN_ROWS - 398)) | (1L << (MODE - 398)) | (1L << (MODIFY - 398)) | (1L << (MUTEX - 398)) | (1L << (MYSQL - 398)) | (1L << (MYSQL_ERRNO - 398)) | (1L << (NAME - 398)) | (1L << (NAMES - 398)) | (1L << (NCHAR - 398)) | (1L << (NEVER - 398)) | (1L << (NEXT - 398)) | (1L << (NO - 398)) | (1L << (NODEGROUP - 398)) | (1L << (NONE - 398)) | (1L << (OFFLINE - 398)) | (1L << (OFFSET - 398)) | (1L << (OF - 398)) | (1L << (OJ - 398)) | (1L << (OLD_PASSWORD - 398)) | (1L << (ONE - 398)) | (1L << (ONLINE - 398)) | (1L << (ONLY - 398)) | (1L << (OPEN - 398)) | (1L << (OPTIMIZER_COSTS - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)) | (1L << (PORT - 462)) | (1L << (PRECEDES - 462)) | (1L << (PREPARE - 462)) | (1L << (PRESERVE - 462)) | (1L << (PREV - 462)) | (1L << (PROCESSLIST - 462)) | (1L << (PROFILE - 462)) | (1L << (PROFILES - 462)) | (1L << (PROXY - 462)) | (1L << (QUERY - 462)) | (1L << (QUICK - 462)) | (1L << (REBUILD - 462)) | (1L << (RECOVER - 462)) | (1L << (REDO_BUFFER_SIZE - 462)) | (1L << (REDUNDANT - 462)) | (1L << (RELAY - 462)) | (1L << (RELAY_LOG_FILE - 462)) | (1L << (RELAY_LOG_POS - 462)) | (1L << (RELAYLOG - 462)) | (1L << (REMOVE - 462)) | (1L << (REORGANIZE - 462)) | (1L << (REPAIR - 462)) | (1L << (REPLICATE_DO_DB - 462)) | (1L << (REPLICATE_DO_TABLE - 462)) | (1L << (REPLICATE_IGNORE_DB - 462)) | (1L << (REPLICATE_IGNORE_TABLE - 462)) | (1L << (REPLICATE_REWRITE_DB - 462)) | (1L << (REPLICATE_WILD_DO_TABLE - 462)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 462)) | (1L << (REPLICATION - 462)) | (1L << (RESET - 462)) | (1L << (RESUME - 462)) | (1L << (RETURNED_SQLSTATE - 462)) | (1L << (RETURNS - 462)) | (1L << (ROLE - 462)) | (1L << (ROLLBACK - 462)) | (1L << (ROLLUP - 462)) | (1L << (ROTATE - 462)) | (1L << (ROW - 462)) | (1L << (ROWS - 462)) | (1L << (ROW_FORMAT - 462)) | (1L << (SAVEPOINT - 462)) | (1L << (SCHEDULE - 462)) | (1L << (SECURITY - 462)) | (1L << (SERVER - 462)) | (1L << (SESSION - 462)) | (1L << (SHARE - 462)) | (1L << (SHARED - 462)) | (1L << (SIGNED - 462)) | (1L << (SIMPLE - 462)) | (1L << (SLAVE - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)) | (1L << (SQL_CACHE - 526)) | (1L << (SQL_NO_CACHE - 526)) | (1L << (SQL_THREAD - 526)) | (1L << (START - 526)) | (1L << (STARTS - 526)) | (1L << (STATS_AUTO_RECALC - 526)) | (1L << (STATS_PERSISTENT - 526)) | (1L << (STATS_SAMPLE_PAGES - 526)) | (1L << (STATUS - 526)) | (1L << (STOP - 526)) | (1L << (STORAGE - 526)) | (1L << (STRING - 526)) | (1L << (SUBCLASS_ORIGIN - 526)) | (1L << (SUBJECT - 526)) | (1L << (SUBPARTITION - 526)) | (1L << (SUBPARTITIONS - 526)) | (1L << (SUSPEND - 526)) | (1L << (SWAPS - 526)) | (1L << (SWITCHES - 526)) | (1L << (TABLE_NAME - 526)) | (1L << (TABLESPACE - 526)) | (1L << (TEMPORARY - 526)) | (1L << (TEMPTABLE - 526)) | (1L << (THAN - 526)) | (1L << (TRADITIONAL - 526)) | (1L << (TRANSACTION - 526)) | (1L << (TRANSACTIONAL - 526)) | (1L << (TRIGGERS - 526)) | (1L << (TRUNCATE - 526)) | (1L << (UNDEFINED - 526)) | (1L << (UNDOFILE - 526)) | (1L << (UNDO_BUFFER_SIZE - 526)) | (1L << (UNINSTALL - 526)) | (1L << (UNKNOWN - 526)) | (1L << (UNTIL - 526)) | (1L << (UPGRADE - 526)) | (1L << (USER - 526)) | (1L << (USE_FRM - 526)) | (1L << (USER_RESOURCES - 526)) | (1L << (VALIDATION - 526)) | (1L << (VALUE - 526)) | (1L << (VARIABLES - 526)) | (1L << (VIEW - 526)) | (1L << (VISIBLE - 526)) | (1L << (WAIT - 526)) | (1L << (WARNINGS - 526)) | (1L << (WITHOUT - 526)) | (1L << (WORK - 526)) | (1L << (WRAPPER - 526)) | (1L << (X509 - 526)) | (1L << (XA - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (XML - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)) | (1L << (DAY - 590)) | (1L << (HOUR - 590)) | (1L << (MINUTE - 590)) | (1L << (WEEK - 590)) | (1L << (SECOND - 590)) | (1L << (MICROSECOND - 590)) | (1L << (TABLES - 590)) | (1L << (ROUTINE - 590)) | (1L << (EXECUTE - 590)) | (1L << (FILE - 590)) | (1L << (PROCESS - 590)) | (1L << (RELOAD - 590)) | (1L << (SHUTDOWN - 590)) | (1L << (SUPER - 590)) | (1L << (PRIVILEGES - 590)) | (1L << (AUDIT_ADMIN - 590)) | (1L << (BACKUP_ADMIN - 590)) | (1L << (BINLOG_ADMIN - 590)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 590)) | (1L << (CLONE_ADMIN - 590)) | (1L << (CONNECTION_ADMIN - 590)) | (1L << (ENCRYPTION_KEY_ADMIN - 590)) | (1L << (FIREWALL_ADMIN - 590)) | (1L << (FIREWALL_USER - 590)) | (1L << (GROUP_REPLICATION_ADMIN - 590)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 590)) | (1L << (NDB_STORED_USER - 590)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 590)) | (1L << (REPLICATION_APPLIER - 590)) | (1L << (REPLICATION_SLAVE_ADMIN - 590)) | (1L << (RESOURCE_GROUP_ADMIN - 590)) | (1L << (RESOURCE_GROUP_USER - 590)) | (1L << (ROLE_ADMIN - 590)) | (1L << (SESSION_VARIABLES_ADMIN - 590)) | (1L << (SET_USER_ID - 590)) | (1L << (SHOW_ROUTINE - 590)) | (1L << (SYSTEM_VARIABLES_ADMIN - 590)) | (1L << (TABLE_ENCRYPTION_ADMIN - 590)) | (1L << (VERSION_TOKEN_ADMIN - 590)) | (1L << (XA_RECOVER_ADMIN - 590)) | (1L << (ARMSCII8 - 590)) | (1L << (ASCII - 590)) | (1L << (BIG5 - 590)) | (1L << (CP1250 - 590)) | (1L << (CP1251 - 590)) | (1L << (CP1256 - 590)) | (1L << (CP1257 - 590)) | (1L << (CP850 - 590)) | (1L << (CP852 - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)) | (1L << (GREEK - 654)) | (1L << (HEBREW - 654)) | (1L << (HP8 - 654)) | (1L << (KEYBCS2 - 654)) | (1L << (KOI8R - 654)) | (1L << (KOI8U - 654)) | (1L << (LATIN1 - 654)) | (1L << (LATIN2 - 654)) | (1L << (LATIN5 - 654)) | (1L << (LATIN7 - 654)) | (1L << (MACCE - 654)) | (1L << (MACROMAN - 654)) | (1L << (SJIS - 654)) | (1L << (SWE7 - 654)) | (1L << (TIS620 - 654)) | (1L << (UCS2 - 654)) | (1L << (UJIS - 654)) | (1L << (UTF16 - 654)) | (1L << (UTF16LE - 654)) | (1L << (UTF32 - 654)) | (1L << (UTF8 - 654)) | (1L << (UTF8MB3 - 654)) | (1L << (UTF8MB4 - 654)) | (1L << (ARCHIVE - 654)) | (1L << (BLACKHOLE - 654)) | (1L << (CSV - 654)) | (1L << (FEDERATED - 654)) | (1L << (INNODB - 654)) | (1L << (MEMORY - 654)) | (1L << (MRG_MYISAM - 654)) | (1L << (MYISAM - 654)) | (1L << (NDB - 654)) | (1L << (NDBCLUSTER - 654)) | (1L << (PERFORMANCE_SCHEMA - 654)) | (1L << (TOKUDB - 654)) | (1L << (REPEATABLE - 654)) | (1L << (COMMITTED - 654)) | (1L << (UNCOMMITTED - 654)) | (1L << (SERIALIZABLE - 654)) | (1L << (GEOMETRYCOLLECTION - 654)) | (1L << (LINESTRING - 654)) | (1L << (MULTILINESTRING - 654)) | (1L << (MULTIPOINT - 654)) | (1L << (MULTIPOLYGON - 654)) | (1L << (POINT - 654)) | (1L << (POLYGON - 654)) | (1L << (ABS - 654)) | (1L << (ACOS - 654)) | (1L << (ADDDATE - 654)) | (1L << (ADDTIME - 654)) | (1L << (AES_DECRYPT - 654)) | (1L << (AES_ENCRYPT - 654)) | (1L << (AREA - 654)) | (1L << (ASBINARY - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)) | (1L << (ASYMMETRIC_VERIFY - 718)) | (1L << (ATAN - 718)) | (1L << (ATAN2 - 718)) | (1L << (BENCHMARK - 718)) | (1L << (BIN - 718)) | (1L << (BIT_COUNT - 718)) | (1L << (BIT_LENGTH - 718)) | (1L << (BUFFER - 718)) | (1L << (CATALOG_NAME - 718)) | (1L << (CEIL - 718)) | (1L << (CEILING - 718)) | (1L << (CENTROID - 718)) | (1L << (CHARACTER_LENGTH - 718)) | (1L << (CHARSET - 718)) | (1L << (CHAR_LENGTH - 718)) | (1L << (COERCIBILITY - 718)) | (1L << (COLLATION - 718)) | (1L << (COMPRESS - 718)) | (1L << (CONCAT - 718)) | (1L << (CONCAT_WS - 718)) | (1L << (CONNECTION_ID - 718)) | (1L << (CONV - 718)) | (1L << (CONVERT_TZ - 718)) | (1L << (COS - 718)) | (1L << (COT - 718)) | (1L << (CRC32 - 718)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1L << (CREATE_DH_PARAMETERS - 718)) | (1L << (CREATE_DIGEST - 718)) | (1L << (CROSSES - 718)) | (1L << (DATEDIFF - 718)) | (1L << (DATE_FORMAT - 718)) | (1L << (DAYNAME - 718)) | (1L << (DAYOFMONTH - 718)) | (1L << (DAYOFWEEK - 718)) | (1L << (DAYOFYEAR - 718)) | (1L << (DECODE - 718)) | (1L << (DEGREES - 718)) | (1L << (DES_DECRYPT - 718)) | (1L << (DES_ENCRYPT - 718)) | (1L << (DIMENSION - 718)) | (1L << (DISJOINT - 718)) | (1L << (ELT - 718)) | (1L << (ENCODE - 718)) | (1L << (ENCRYPT - 718)) | (1L << (ENDPOINT - 718)) | (1L << (ENVELOPE - 718)) | (1L << (EQUALS - 718)) | (1L << (EXP - 718)) | (1L << (EXPORT_SET - 718)) | (1L << (EXTERIORRING - 718)) | (1L << (EXTRACTVALUE - 718)) | (1L << (FIELD - 718)) | (1L << (FIND_IN_SET - 718)) | (1L << (FLOOR - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 782)) | (1L << (GEOMETRYFROMTEXT - 782)) | (1L << (GEOMETRYFROMWKB - 782)) | (1L << (GEOMETRYN - 782)) | (1L << (GEOMETRYTYPE - 782)) | (1L << (GEOMFROMTEXT - 782)) | (1L << (GEOMFROMWKB - 782)) | (1L << (GET_FORMAT - 782)) | (1L << (GET_LOCK - 782)) | (1L << (GLENGTH - 782)) | (1L << (GREATEST - 782)) | (1L << (GTID_SUBSET - 782)) | (1L << (GTID_SUBTRACT - 782)) | (1L << (HEX - 782)) | (1L << (IFNULL - 782)) | (1L << (INET6_ATON - 782)) | (1L << (INET6_NTOA - 782)) | (1L << (INET_ATON - 782)) | (1L << (INET_NTOA - 782)) | (1L << (INSTR - 782)) | (1L << (INTERIORRINGN - 782)) | (1L << (INTERSECTS - 782)) | (1L << (ISCLOSED - 782)) | (1L << (ISEMPTY - 782)) | (1L << (ISNULL - 782)) | (1L << (ISSIMPLE - 782)) | (1L << (IS_FREE_LOCK - 782)) | (1L << (IS_IPV4 - 782)) | (1L << (IS_IPV4_COMPAT - 782)) | (1L << (IS_IPV4_MAPPED - 782)) | (1L << (IS_IPV6 - 782)) | (1L << (IS_USED_LOCK - 782)) | (1L << (LAST_INSERT_ID - 782)) | (1L << (LCASE - 782)) | (1L << (LEAST - 782)) | (1L << (LENGTH - 782)) | (1L << (LINEFROMTEXT - 782)) | (1L << (LINEFROMWKB - 782)) | (1L << (LINESTRINGFROMTEXT - 782)) | (1L << (LINESTRINGFROMWKB - 782)) | (1L << (LN - 782)) | (1L << (LOAD_FILE - 782)) | (1L << (LOCATE - 782)) | (1L << (LOG - 782)) | (1L << (LOG10 - 782)) | (1L << (LOG2 - 782)) | (1L << (LOWER - 782)) | (1L << (LPAD - 782)) | (1L << (LTRIM - 782)) | (1L << (MAKEDATE - 782)) | (1L << (MAKETIME - 782)) | (1L << (MAKE_SET - 782)) | (1L << (MASTER_POS_WAIT - 782)) | (1L << (MBRCONTAINS - 782)) | (1L << (MBRDISJOINT - 782)) | (1L << (MBREQUAL - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)) | (1L << (MPOINTFROMTEXT - 846)) | (1L << (MPOINTFROMWKB - 846)) | (1L << (MPOLYFROMTEXT - 846)) | (1L << (MPOLYFROMWKB - 846)) | (1L << (MULTILINESTRINGFROMTEXT - 846)) | (1L << (MULTILINESTRINGFROMWKB - 846)) | (1L << (MULTIPOINTFROMTEXT - 846)) | (1L << (MULTIPOINTFROMWKB - 846)) | (1L << (MULTIPOLYGONFROMTEXT - 846)) | (1L << (MULTIPOLYGONFROMWKB - 846)) | (1L << (NAME_CONST - 846)) | (1L << (NULLIF - 846)) | (1L << (NUMGEOMETRIES - 846)) | (1L << (NUMINTERIORRINGS - 846)) | (1L << (NUMPOINTS - 846)) | (1L << (OCT - 846)) | (1L << (OCTET_LENGTH - 846)) | (1L << (ORD - 846)) | (1L << (OVERLAPS - 846)) | (1L << (PERIOD_ADD - 846)) | (1L << (PERIOD_DIFF - 846)) | (1L << (PI - 846)) | (1L << (POINTFROMTEXT - 846)) | (1L << (POINTFROMWKB - 846)) | (1L << (POINTN - 846)) | (1L << (POLYFROMTEXT - 846)) | (1L << (POLYFROMWKB - 846)) | (1L << (POLYGONFROMTEXT - 846)) | (1L << (POLYGONFROMWKB - 846)) | (1L << (POW - 846)) | (1L << (POWER - 846)) | (1L << (QUOTE - 846)) | (1L << (RADIANS - 846)) | (1L << (RAND - 846)) | (1L << (RANDOM_BYTES - 846)) | (1L << (RELEASE_LOCK - 846)) | (1L << (REVERSE - 846)) | (1L << (ROUND - 846)) | (1L << (ROW_COUNT - 846)) | (1L << (RPAD - 846)) | (1L << (RTRIM - 846)) | (1L << (SEC_TO_TIME - 846)) | (1L << (SESSION_USER - 846)) | (1L << (SHA - 846)) | (1L << (SHA1 - 846)) | (1L << (SHA2 - 846)) | (1L << (SCHEMA_NAME - 846)) | (1L << (SIGN - 846)) | (1L << (SIN - 846)) | (1L << (SLEEP - 846)) | (1L << (SOUNDEX - 846)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 846)) | (1L << (SQRT - 846)) | (1L << (SRID - 846)) | (1L << (STARTPOINT - 846)) | (1L << (STRCMP - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)) | (1L << (ST_CONTAINS - 910)) | (1L << (ST_CROSSES - 910)) | (1L << (ST_DIFFERENCE - 910)) | (1L << (ST_DIMENSION - 910)) | (1L << (ST_DISJOINT - 910)) | (1L << (ST_DISTANCE - 910)) | (1L << (ST_ENDPOINT - 910)) | (1L << (ST_ENVELOPE - 910)) | (1L << (ST_EQUALS - 910)) | (1L << (ST_EXTERIORRING - 910)) | (1L << (ST_GEOMCOLLFROMTEXT - 910)) | (1L << (ST_GEOMCOLLFROMTXT - 910)) | (1L << (ST_GEOMCOLLFROMWKB - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1L << (ST_GEOMETRYFROMTEXT - 910)) | (1L << (ST_GEOMETRYFROMWKB - 910)) | (1L << (ST_GEOMETRYN - 910)) | (1L << (ST_GEOMETRYTYPE - 910)) | (1L << (ST_GEOMFROMTEXT - 910)) | (1L << (ST_GEOMFROMWKB - 910)) | (1L << (ST_INTERIORRINGN - 910)) | (1L << (ST_INTERSECTION - 910)) | (1L << (ST_INTERSECTS - 910)) | (1L << (ST_ISCLOSED - 910)) | (1L << (ST_ISEMPTY - 910)) | (1L << (ST_ISSIMPLE - 910)) | (1L << (ST_LINEFROMTEXT - 910)) | (1L << (ST_LINEFROMWKB - 910)) | (1L << (ST_LINESTRINGFROMTEXT - 910)) | (1L << (ST_LINESTRINGFROMWKB - 910)) | (1L << (ST_NUMGEOMETRIES - 910)) | (1L << (ST_NUMINTERIORRING - 910)) | (1L << (ST_NUMINTERIORRINGS - 910)) | (1L << (ST_NUMPOINTS - 910)) | (1L << (ST_OVERLAPS - 910)) | (1L << (ST_POINTFROMTEXT - 910)) | (1L << (ST_POINTFROMWKB - 910)) | (1L << (ST_POINTN - 910)) | (1L << (ST_POLYFROMTEXT - 910)) | (1L << (ST_POLYFROMWKB - 910)) | (1L << (ST_POLYGONFROMTEXT - 910)) | (1L << (ST_POLYGONFROMWKB - 910)) | (1L << (ST_SRID - 910)) | (1L << (ST_STARTPOINT - 910)) | (1L << (ST_SYMDIFFERENCE - 910)) | (1L << (ST_TOUCHES - 910)) | (1L << (ST_UNION - 910)) | (1L << (ST_WITHIN - 910)) | (1L << (ST_X - 910)) | (1L << (ST_Y - 910)) | (1L << (SUBDATE - 910)) | (1L << (SUBSTRING_INDEX - 910)) | (1L << (SUBTIME - 910)) | (1L << (SYSTEM_USER - 910)) | (1L << (TAN - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)) | (1L << (TO_SECONDS - 974)) | (1L << (UCASE - 974)) | (1L << (UNCOMPRESS - 974)) | (1L << (UNCOMPRESSED_LENGTH - 974)) | (1L << (UNHEX - 974)) | (1L << (UNIX_TIMESTAMP - 974)) | (1L << (UPDATEXML - 974)) | (1L << (UPPER - 974)) | (1L << (UUID - 974)) | (1L << (UUID_SHORT - 974)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 974)) | (1L << (VERSION - 974)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1L << (WEEKDAY - 974)) | (1L << (WEEKOFYEAR - 974)) | (1L << (WEIGHT_STRING - 974)) | (1L << (WITHIN - 974)) | (1L << (YEARWEEK - 974)) | (1L << (Y_FUNCTION - 974)) | (1L << (X_FUNCTION - 974)) | (1L << (MOD - 974)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1040)) | (1L << (STRING_LITERAL - 1040)) | (1L << (ID - 1040)) | (1L << (REVERSE_QUOTE_ID - 1040)))) != 0)) {
						{
						setState(561);
						((PrimaryKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(566);
				match(PRIMARY);
				setState(567);
				match(KEY);
				setState(569);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (GROUP - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (ORDER - 105)) | (1L << (RIGHT - 105)) | (1L << (SCHEMA - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (DATE - 199)) | (1L << (TIME - 199)) | (1L << (TIMESTAMP - 199)) | (1L << (DATETIME - 199)) | (1L << (YEAR - 199)) | (1L << (TEXT - 199)) | (1L << (ENUM - 199)) | (1L << (SERIAL - 199)) | (1L << (JSON_VALID - 199)) | (1L << (JSON_SCHEMA_VALID - 199)) | (1L << (AVG - 199)) | (1L << (BIT_AND - 199)) | (1L << (BIT_OR - 199)) | (1L << (BIT_XOR - 199)) | (1L << (COUNT - 199)) | (1L << (GROUP_CONCAT - 199)) | (1L << (MAX - 199)) | (1L << (MIN - 199)) | (1L << (STD - 199)) | (1L << (STDDEV - 199)) | (1L << (STDDEV_POP - 199)) | (1L << (STDDEV_SAMP - 199)) | (1L << (SUM - 199)) | (1L << (VAR_POP - 199)) | (1L << (VAR_SAMP - 199)) | (1L << (VARIANCE - 199)) | (1L << (POSITION - 199)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)) | (1L << (BOOL - 270)) | (1L << (BOOLEAN - 270)) | (1L << (BTREE - 270)) | (1L << (CACHE - 270)) | (1L << (CASCADED - 270)) | (1L << (CHAIN - 270)) | (1L << (CHANGED - 270)) | (1L << (CHANNEL - 270)) | (1L << (CHECKSUM - 270)) | (1L << (PAGE_CHECKSUM - 270)) | (1L << (CIPHER - 270)) | (1L << (CLASS_ORIGIN - 270)) | (1L << (CLIENT - 270)) | (1L << (CLOSE - 270)) | (1L << (COALESCE - 270)) | (1L << (CODE - 270)) | (1L << (COLUMNS - 270)) | (1L << (COLUMN_FORMAT - 270)) | (1L << (COLUMN_NAME - 270)) | (1L << (COMMENT - 270)) | (1L << (COMMIT - 270)) | (1L << (COMPACT - 270)) | (1L << (COMPLETION - 270)) | (1L << (COMPRESSED - 270)) | (1L << (COMPRESSION - 270)) | (1L << (CONCURRENT - 270)) | (1L << (CONNECTION - 270)) | (1L << (CONSISTENT - 270)) | (1L << (CONSTRAINT_CATALOG - 270)) | (1L << (CONSTRAINT_SCHEMA - 270)) | (1L << (CONSTRAINT_NAME - 270)) | (1L << (CONTAINS - 270)) | (1L << (CONTEXT - 270)) | (1L << (CONTRIBUTORS - 270)) | (1L << (COPY - 270)) | (1L << (CPU - 270)) | (1L << (CURSOR_NAME - 270)) | (1L << (DATA - 270)) | (1L << (DATAFILE - 270)) | (1L << (DEALLOCATE - 270)) | (1L << (DEFAULT_AUTH - 270)) | (1L << (DEFINER - 270)) | (1L << (DELAY_KEY_WRITE - 270)) | (1L << (DES_KEY_FILE - 270)) | (1L << (DIRECTORY - 270)) | (1L << (DISABLE - 270)) | (1L << (DISCARD - 270)) | (1L << (DISK - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)) | (1L << (EVENTS - 334)) | (1L << (EVERY - 334)) | (1L << (EXCHANGE - 334)) | (1L << (EXCLUSIVE - 334)) | (1L << (EXPIRE - 334)) | (1L << (EXPORT - 334)) | (1L << (EXTENDED - 334)) | (1L << (EXTENT_SIZE - 334)) | (1L << (FAST - 334)) | (1L << (FAULTS - 334)) | (1L << (FIELDS - 334)) | (1L << (FILE_BLOCK_SIZE - 334)) | (1L << (FILTER - 334)) | (1L << (FIRST - 334)) | (1L << (FIXED - 334)) | (1L << (FLUSH - 334)) | (1L << (FOLLOWS - 334)) | (1L << (FOUND - 334)) | (1L << (FULL - 334)) | (1L << (FUNCTION - 334)) | (1L << (GENERAL - 334)) | (1L << (GLOBAL - 334)) | (1L << (GRANTS - 334)) | (1L << (GROUP_REPLICATION - 334)) | (1L << (HANDLER - 334)) | (1L << (HASH - 334)) | (1L << (HELP - 334)) | (1L << (HOST - 334)) | (1L << (HOSTS - 334)) | (1L << (IDENTIFIED - 334)) | (1L << (IGNORE_SERVER_IDS - 334)) | (1L << (IMPORT - 334)) | (1L << (INDEXES - 334)) | (1L << (INITIAL_SIZE - 334)) | (1L << (INPLACE - 334)) | (1L << (INSERT_METHOD - 334)) | (1L << (INSTALL - 334)) | (1L << (INSTANCE - 334)) | (1L << (INVISIBLE - 334)) | (1L << (INVOKER - 334)) | (1L << (IO - 334)) | (1L << (IO_THREAD - 334)) | (1L << (IPC - 334)) | (1L << (ISOLATION - 334)) | (1L << (ISSUER - 334)) | (1L << (JSON - 334)) | (1L << (KEY_BLOCK_SIZE - 334)) | (1L << (LANGUAGE - 334)) | (1L << (LAST - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)) | (1L << (MASTER_LOG_POS - 398)) | (1L << (MASTER_PASSWORD - 398)) | (1L << (MASTER_PORT - 398)) | (1L << (MASTER_RETRY_COUNT - 398)) | (1L << (MASTER_SSL - 398)) | (1L << (MASTER_SSL_CA - 398)) | (1L << (MASTER_SSL_CAPATH - 398)) | (1L << (MASTER_SSL_CERT - 398)) | (1L << (MASTER_SSL_CIPHER - 398)) | (1L << (MASTER_SSL_CRL - 398)) | (1L << (MASTER_SSL_CRLPATH - 398)) | (1L << (MASTER_SSL_KEY - 398)) | (1L << (MASTER_TLS_VERSION - 398)) | (1L << (MASTER_USER - 398)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 398)) | (1L << (MAX_QUERIES_PER_HOUR - 398)) | (1L << (MAX_ROWS - 398)) | (1L << (MAX_SIZE - 398)) | (1L << (MAX_UPDATES_PER_HOUR - 398)) | (1L << (MAX_USER_CONNECTIONS - 398)) | (1L << (MEDIUM - 398)) | (1L << (MEMBER - 398)) | (1L << (MERGE - 398)) | (1L << (MESSAGE_TEXT - 398)) | (1L << (MID - 398)) | (1L << (MIGRATE - 398)) | (1L << (MIN_ROWS - 398)) | (1L << (MODE - 398)) | (1L << (MODIFY - 398)) | (1L << (MUTEX - 398)) | (1L << (MYSQL - 398)) | (1L << (MYSQL_ERRNO - 398)) | (1L << (NAME - 398)) | (1L << (NAMES - 398)) | (1L << (NCHAR - 398)) | (1L << (NEVER - 398)) | (1L << (NEXT - 398)) | (1L << (NO - 398)) | (1L << (NODEGROUP - 398)) | (1L << (NONE - 398)) | (1L << (OFFLINE - 398)) | (1L << (OFFSET - 398)) | (1L << (OF - 398)) | (1L << (OJ - 398)) | (1L << (OLD_PASSWORD - 398)) | (1L << (ONE - 398)) | (1L << (ONLINE - 398)) | (1L << (ONLY - 398)) | (1L << (OPEN - 398)) | (1L << (OPTIMIZER_COSTS - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)) | (1L << (PORT - 462)) | (1L << (PRECEDES - 462)) | (1L << (PREPARE - 462)) | (1L << (PRESERVE - 462)) | (1L << (PREV - 462)) | (1L << (PROCESSLIST - 462)) | (1L << (PROFILE - 462)) | (1L << (PROFILES - 462)) | (1L << (PROXY - 462)) | (1L << (QUERY - 462)) | (1L << (QUICK - 462)) | (1L << (REBUILD - 462)) | (1L << (RECOVER - 462)) | (1L << (REDO_BUFFER_SIZE - 462)) | (1L << (REDUNDANT - 462)) | (1L << (RELAY - 462)) | (1L << (RELAY_LOG_FILE - 462)) | (1L << (RELAY_LOG_POS - 462)) | (1L << (RELAYLOG - 462)) | (1L << (REMOVE - 462)) | (1L << (REORGANIZE - 462)) | (1L << (REPAIR - 462)) | (1L << (REPLICATE_DO_DB - 462)) | (1L << (REPLICATE_DO_TABLE - 462)) | (1L << (REPLICATE_IGNORE_DB - 462)) | (1L << (REPLICATE_IGNORE_TABLE - 462)) | (1L << (REPLICATE_REWRITE_DB - 462)) | (1L << (REPLICATE_WILD_DO_TABLE - 462)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 462)) | (1L << (REPLICATION - 462)) | (1L << (RESET - 462)) | (1L << (RESUME - 462)) | (1L << (RETURNED_SQLSTATE - 462)) | (1L << (RETURNS - 462)) | (1L << (ROLE - 462)) | (1L << (ROLLBACK - 462)) | (1L << (ROLLUP - 462)) | (1L << (ROTATE - 462)) | (1L << (ROW - 462)) | (1L << (ROWS - 462)) | (1L << (ROW_FORMAT - 462)) | (1L << (SAVEPOINT - 462)) | (1L << (SCHEDULE - 462)) | (1L << (SECURITY - 462)) | (1L << (SERVER - 462)) | (1L << (SESSION - 462)) | (1L << (SHARE - 462)) | (1L << (SHARED - 462)) | (1L << (SIGNED - 462)) | (1L << (SIMPLE - 462)) | (1L << (SLAVE - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)) | (1L << (SQL_CACHE - 526)) | (1L << (SQL_NO_CACHE - 526)) | (1L << (SQL_THREAD - 526)) | (1L << (START - 526)) | (1L << (STARTS - 526)) | (1L << (STATS_AUTO_RECALC - 526)) | (1L << (STATS_PERSISTENT - 526)) | (1L << (STATS_SAMPLE_PAGES - 526)) | (1L << (STATUS - 526)) | (1L << (STOP - 526)) | (1L << (STORAGE - 526)) | (1L << (STRING - 526)) | (1L << (SUBCLASS_ORIGIN - 526)) | (1L << (SUBJECT - 526)) | (1L << (SUBPARTITION - 526)) | (1L << (SUBPARTITIONS - 526)) | (1L << (SUSPEND - 526)) | (1L << (SWAPS - 526)) | (1L << (SWITCHES - 526)) | (1L << (TABLE_NAME - 526)) | (1L << (TABLESPACE - 526)) | (1L << (TEMPORARY - 526)) | (1L << (TEMPTABLE - 526)) | (1L << (THAN - 526)) | (1L << (TRADITIONAL - 526)) | (1L << (TRANSACTION - 526)) | (1L << (TRANSACTIONAL - 526)) | (1L << (TRIGGERS - 526)) | (1L << (TRUNCATE - 526)) | (1L << (UNDEFINED - 526)) | (1L << (UNDOFILE - 526)) | (1L << (UNDO_BUFFER_SIZE - 526)) | (1L << (UNINSTALL - 526)) | (1L << (UNKNOWN - 526)) | (1L << (UNTIL - 526)) | (1L << (UPGRADE - 526)) | (1L << (USER - 526)) | (1L << (USE_FRM - 526)) | (1L << (USER_RESOURCES - 526)) | (1L << (VALIDATION - 526)) | (1L << (VALUE - 526)) | (1L << (VARIABLES - 526)) | (1L << (VIEW - 526)) | (1L << (VISIBLE - 526)) | (1L << (WAIT - 526)) | (1L << (WARNINGS - 526)) | (1L << (WITHOUT - 526)) | (1L << (WORK - 526)) | (1L << (WRAPPER - 526)) | (1L << (X509 - 526)) | (1L << (XA - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (XML - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)) | (1L << (DAY - 590)) | (1L << (HOUR - 590)) | (1L << (MINUTE - 590)) | (1L << (WEEK - 590)) | (1L << (SECOND - 590)) | (1L << (MICROSECOND - 590)) | (1L << (TABLES - 590)) | (1L << (ROUTINE - 590)) | (1L << (EXECUTE - 590)) | (1L << (FILE - 590)) | (1L << (PROCESS - 590)) | (1L << (RELOAD - 590)) | (1L << (SHUTDOWN - 590)) | (1L << (SUPER - 590)) | (1L << (PRIVILEGES - 590)) | (1L << (AUDIT_ADMIN - 590)) | (1L << (BACKUP_ADMIN - 590)) | (1L << (BINLOG_ADMIN - 590)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 590)) | (1L << (CLONE_ADMIN - 590)) | (1L << (CONNECTION_ADMIN - 590)) | (1L << (ENCRYPTION_KEY_ADMIN - 590)) | (1L << (FIREWALL_ADMIN - 590)) | (1L << (FIREWALL_USER - 590)) | (1L << (GROUP_REPLICATION_ADMIN - 590)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 590)) | (1L << (NDB_STORED_USER - 590)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 590)) | (1L << (REPLICATION_APPLIER - 590)) | (1L << (REPLICATION_SLAVE_ADMIN - 590)) | (1L << (RESOURCE_GROUP_ADMIN - 590)) | (1L << (RESOURCE_GROUP_USER - 590)) | (1L << (ROLE_ADMIN - 590)) | (1L << (SESSION_VARIABLES_ADMIN - 590)) | (1L << (SET_USER_ID - 590)) | (1L << (SHOW_ROUTINE - 590)) | (1L << (SYSTEM_VARIABLES_ADMIN - 590)) | (1L << (TABLE_ENCRYPTION_ADMIN - 590)) | (1L << (VERSION_TOKEN_ADMIN - 590)) | (1L << (XA_RECOVER_ADMIN - 590)) | (1L << (ARMSCII8 - 590)) | (1L << (ASCII - 590)) | (1L << (BIG5 - 590)) | (1L << (CP1250 - 590)) | (1L << (CP1251 - 590)) | (1L << (CP1256 - 590)) | (1L << (CP1257 - 590)) | (1L << (CP850 - 590)) | (1L << (CP852 - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)) | (1L << (GREEK - 654)) | (1L << (HEBREW - 654)) | (1L << (HP8 - 654)) | (1L << (KEYBCS2 - 654)) | (1L << (KOI8R - 654)) | (1L << (KOI8U - 654)) | (1L << (LATIN1 - 654)) | (1L << (LATIN2 - 654)) | (1L << (LATIN5 - 654)) | (1L << (LATIN7 - 654)) | (1L << (MACCE - 654)) | (1L << (MACROMAN - 654)) | (1L << (SJIS - 654)) | (1L << (SWE7 - 654)) | (1L << (TIS620 - 654)) | (1L << (UCS2 - 654)) | (1L << (UJIS - 654)) | (1L << (UTF16 - 654)) | (1L << (UTF16LE - 654)) | (1L << (UTF32 - 654)) | (1L << (UTF8 - 654)) | (1L << (UTF8MB3 - 654)) | (1L << (UTF8MB4 - 654)) | (1L << (ARCHIVE - 654)) | (1L << (BLACKHOLE - 654)) | (1L << (CSV - 654)) | (1L << (FEDERATED - 654)) | (1L << (INNODB - 654)) | (1L << (MEMORY - 654)) | (1L << (MRG_MYISAM - 654)) | (1L << (MYISAM - 654)) | (1L << (NDB - 654)) | (1L << (NDBCLUSTER - 654)) | (1L << (PERFORMANCE_SCHEMA - 654)) | (1L << (TOKUDB - 654)) | (1L << (REPEATABLE - 654)) | (1L << (COMMITTED - 654)) | (1L << (UNCOMMITTED - 654)) | (1L << (SERIALIZABLE - 654)) | (1L << (GEOMETRYCOLLECTION - 654)) | (1L << (LINESTRING - 654)) | (1L << (MULTILINESTRING - 654)) | (1L << (MULTIPOINT - 654)) | (1L << (MULTIPOLYGON - 654)) | (1L << (POINT - 654)) | (1L << (POLYGON - 654)) | (1L << (ABS - 654)) | (1L << (ACOS - 654)) | (1L << (ADDDATE - 654)) | (1L << (ADDTIME - 654)) | (1L << (AES_DECRYPT - 654)) | (1L << (AES_ENCRYPT - 654)) | (1L << (AREA - 654)) | (1L << (ASBINARY - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)) | (1L << (ASYMMETRIC_VERIFY - 718)) | (1L << (ATAN - 718)) | (1L << (ATAN2 - 718)) | (1L << (BENCHMARK - 718)) | (1L << (BIN - 718)) | (1L << (BIT_COUNT - 718)) | (1L << (BIT_LENGTH - 718)) | (1L << (BUFFER - 718)) | (1L << (CATALOG_NAME - 718)) | (1L << (CEIL - 718)) | (1L << (CEILING - 718)) | (1L << (CENTROID - 718)) | (1L << (CHARACTER_LENGTH - 718)) | (1L << (CHARSET - 718)) | (1L << (CHAR_LENGTH - 718)) | (1L << (COERCIBILITY - 718)) | (1L << (COLLATION - 718)) | (1L << (COMPRESS - 718)) | (1L << (CONCAT - 718)) | (1L << (CONCAT_WS - 718)) | (1L << (CONNECTION_ID - 718)) | (1L << (CONV - 718)) | (1L << (CONVERT_TZ - 718)) | (1L << (COS - 718)) | (1L << (COT - 718)) | (1L << (CRC32 - 718)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1L << (CREATE_DH_PARAMETERS - 718)) | (1L << (CREATE_DIGEST - 718)) | (1L << (CROSSES - 718)) | (1L << (DATEDIFF - 718)) | (1L << (DATE_FORMAT - 718)) | (1L << (DAYNAME - 718)) | (1L << (DAYOFMONTH - 718)) | (1L << (DAYOFWEEK - 718)) | (1L << (DAYOFYEAR - 718)) | (1L << (DECODE - 718)) | (1L << (DEGREES - 718)) | (1L << (DES_DECRYPT - 718)) | (1L << (DES_ENCRYPT - 718)) | (1L << (DIMENSION - 718)) | (1L << (DISJOINT - 718)) | (1L << (ELT - 718)) | (1L << (ENCODE - 718)) | (1L << (ENCRYPT - 718)) | (1L << (ENDPOINT - 718)) | (1L << (ENVELOPE - 718)) | (1L << (EQUALS - 718)) | (1L << (EXP - 718)) | (1L << (EXPORT_SET - 718)) | (1L << (EXTERIORRING - 718)) | (1L << (EXTRACTVALUE - 718)) | (1L << (FIELD - 718)) | (1L << (FIND_IN_SET - 718)) | (1L << (FLOOR - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 782)) | (1L << (GEOMETRYFROMTEXT - 782)) | (1L << (GEOMETRYFROMWKB - 782)) | (1L << (GEOMETRYN - 782)) | (1L << (GEOMETRYTYPE - 782)) | (1L << (GEOMFROMTEXT - 782)) | (1L << (GEOMFROMWKB - 782)) | (1L << (GET_FORMAT - 782)) | (1L << (GET_LOCK - 782)) | (1L << (GLENGTH - 782)) | (1L << (GREATEST - 782)) | (1L << (GTID_SUBSET - 782)) | (1L << (GTID_SUBTRACT - 782)) | (1L << (HEX - 782)) | (1L << (IFNULL - 782)) | (1L << (INET6_ATON - 782)) | (1L << (INET6_NTOA - 782)) | (1L << (INET_ATON - 782)) | (1L << (INET_NTOA - 782)) | (1L << (INSTR - 782)) | (1L << (INTERIORRINGN - 782)) | (1L << (INTERSECTS - 782)) | (1L << (ISCLOSED - 782)) | (1L << (ISEMPTY - 782)) | (1L << (ISNULL - 782)) | (1L << (ISSIMPLE - 782)) | (1L << (IS_FREE_LOCK - 782)) | (1L << (IS_IPV4 - 782)) | (1L << (IS_IPV4_COMPAT - 782)) | (1L << (IS_IPV4_MAPPED - 782)) | (1L << (IS_IPV6 - 782)) | (1L << (IS_USED_LOCK - 782)) | (1L << (LAST_INSERT_ID - 782)) | (1L << (LCASE - 782)) | (1L << (LEAST - 782)) | (1L << (LENGTH - 782)) | (1L << (LINEFROMTEXT - 782)) | (1L << (LINEFROMWKB - 782)) | (1L << (LINESTRINGFROMTEXT - 782)) | (1L << (LINESTRINGFROMWKB - 782)) | (1L << (LN - 782)) | (1L << (LOAD_FILE - 782)) | (1L << (LOCATE - 782)) | (1L << (LOG - 782)) | (1L << (LOG10 - 782)) | (1L << (LOG2 - 782)) | (1L << (LOWER - 782)) | (1L << (LPAD - 782)) | (1L << (LTRIM - 782)) | (1L << (MAKEDATE - 782)) | (1L << (MAKETIME - 782)) | (1L << (MAKE_SET - 782)) | (1L << (MASTER_POS_WAIT - 782)) | (1L << (MBRCONTAINS - 782)) | (1L << (MBRDISJOINT - 782)) | (1L << (MBREQUAL - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)) | (1L << (MPOINTFROMTEXT - 846)) | (1L << (MPOINTFROMWKB - 846)) | (1L << (MPOLYFROMTEXT - 846)) | (1L << (MPOLYFROMWKB - 846)) | (1L << (MULTILINESTRINGFROMTEXT - 846)) | (1L << (MULTILINESTRINGFROMWKB - 846)) | (1L << (MULTIPOINTFROMTEXT - 846)) | (1L << (MULTIPOINTFROMWKB - 846)) | (1L << (MULTIPOLYGONFROMTEXT - 846)) | (1L << (MULTIPOLYGONFROMWKB - 846)) | (1L << (NAME_CONST - 846)) | (1L << (NULLIF - 846)) | (1L << (NUMGEOMETRIES - 846)) | (1L << (NUMINTERIORRINGS - 846)) | (1L << (NUMPOINTS - 846)) | (1L << (OCT - 846)) | (1L << (OCTET_LENGTH - 846)) | (1L << (ORD - 846)) | (1L << (OVERLAPS - 846)) | (1L << (PERIOD_ADD - 846)) | (1L << (PERIOD_DIFF - 846)) | (1L << (PI - 846)) | (1L << (POINTFROMTEXT - 846)) | (1L << (POINTFROMWKB - 846)) | (1L << (POINTN - 846)) | (1L << (POLYFROMTEXT - 846)) | (1L << (POLYFROMWKB - 846)) | (1L << (POLYGONFROMTEXT - 846)) | (1L << (POLYGONFROMWKB - 846)) | (1L << (POW - 846)) | (1L << (POWER - 846)) | (1L << (QUOTE - 846)) | (1L << (RADIANS - 846)) | (1L << (RAND - 846)) | (1L << (RANDOM_BYTES - 846)) | (1L << (RELEASE_LOCK - 846)) | (1L << (REVERSE - 846)) | (1L << (ROUND - 846)) | (1L << (ROW_COUNT - 846)) | (1L << (RPAD - 846)) | (1L << (RTRIM - 846)) | (1L << (SEC_TO_TIME - 846)) | (1L << (SESSION_USER - 846)) | (1L << (SHA - 846)) | (1L << (SHA1 - 846)) | (1L << (SHA2 - 846)) | (1L << (SCHEMA_NAME - 846)) | (1L << (SIGN - 846)) | (1L << (SIN - 846)) | (1L << (SLEEP - 846)) | (1L << (SOUNDEX - 846)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 846)) | (1L << (SQRT - 846)) | (1L << (SRID - 846)) | (1L << (STARTPOINT - 846)) | (1L << (STRCMP - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)) | (1L << (ST_CONTAINS - 910)) | (1L << (ST_CROSSES - 910)) | (1L << (ST_DIFFERENCE - 910)) | (1L << (ST_DIMENSION - 910)) | (1L << (ST_DISJOINT - 910)) | (1L << (ST_DISTANCE - 910)) | (1L << (ST_ENDPOINT - 910)) | (1L << (ST_ENVELOPE - 910)) | (1L << (ST_EQUALS - 910)) | (1L << (ST_EXTERIORRING - 910)) | (1L << (ST_GEOMCOLLFROMTEXT - 910)) | (1L << (ST_GEOMCOLLFROMTXT - 910)) | (1L << (ST_GEOMCOLLFROMWKB - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1L << (ST_GEOMETRYFROMTEXT - 910)) | (1L << (ST_GEOMETRYFROMWKB - 910)) | (1L << (ST_GEOMETRYN - 910)) | (1L << (ST_GEOMETRYTYPE - 910)) | (1L << (ST_GEOMFROMTEXT - 910)) | (1L << (ST_GEOMFROMWKB - 910)) | (1L << (ST_INTERIORRINGN - 910)) | (1L << (ST_INTERSECTION - 910)) | (1L << (ST_INTERSECTS - 910)) | (1L << (ST_ISCLOSED - 910)) | (1L << (ST_ISEMPTY - 910)) | (1L << (ST_ISSIMPLE - 910)) | (1L << (ST_LINEFROMTEXT - 910)) | (1L << (ST_LINEFROMWKB - 910)) | (1L << (ST_LINESTRINGFROMTEXT - 910)) | (1L << (ST_LINESTRINGFROMWKB - 910)) | (1L << (ST_NUMGEOMETRIES - 910)) | (1L << (ST_NUMINTERIORRING - 910)) | (1L << (ST_NUMINTERIORRINGS - 910)) | (1L << (ST_NUMPOINTS - 910)) | (1L << (ST_OVERLAPS - 910)) | (1L << (ST_POINTFROMTEXT - 910)) | (1L << (ST_POINTFROMWKB - 910)) | (1L << (ST_POINTN - 910)) | (1L << (ST_POLYFROMTEXT - 910)) | (1L << (ST_POLYFROMWKB - 910)) | (1L << (ST_POLYGONFROMTEXT - 910)) | (1L << (ST_POLYGONFROMWKB - 910)) | (1L << (ST_SRID - 910)) | (1L << (ST_STARTPOINT - 910)) | (1L << (ST_SYMDIFFERENCE - 910)) | (1L << (ST_TOUCHES - 910)) | (1L << (ST_UNION - 910)) | (1L << (ST_WITHIN - 910)) | (1L << (ST_X - 910)) | (1L << (ST_Y - 910)) | (1L << (SUBDATE - 910)) | (1L << (SUBSTRING_INDEX - 910)) | (1L << (SUBTIME - 910)) | (1L << (SYSTEM_USER - 910)) | (1L << (TAN - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)) | (1L << (TO_SECONDS - 974)) | (1L << (UCASE - 974)) | (1L << (UNCOMPRESS - 974)) | (1L << (UNCOMPRESSED_LENGTH - 974)) | (1L << (UNHEX - 974)) | (1L << (UNIX_TIMESTAMP - 974)) | (1L << (UPDATEXML - 974)) | (1L << (UPPER - 974)) | (1L << (UUID - 974)) | (1L << (UUID_SHORT - 974)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 974)) | (1L << (VERSION - 974)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1L << (WEEKDAY - 974)) | (1L << (WEEKOFYEAR - 974)) | (1L << (WEIGHT_STRING - 974)) | (1L << (WITHIN - 974)) | (1L << (YEARWEEK - 974)) | (1L << (Y_FUNCTION - 974)) | (1L << (X_FUNCTION - 974)) | (1L << (MOD - 974)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1040)) | (1L << (STRING_LITERAL - 1040)) | (1L << (ID - 1040)) | (1L << (REVERSE_QUOTE_ID - 1040)))) != 0)) {
					{
					setState(568);
					((PrimaryKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				setState(572);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(571);
					indexType();
					}
				}

				setState(574);
				indexColumnNames();
				setState(578);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					setState(575);
					indexOption();
					}
					}
					setState(580);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new UniqueKeyTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(585);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(581);
					match(CONSTRAINT);
					setState(583);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (GROUP - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (ORDER - 105)) | (1L << (RIGHT - 105)) | (1L << (SCHEMA - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (DATE - 199)) | (1L << (TIME - 199)) | (1L << (TIMESTAMP - 199)) | (1L << (DATETIME - 199)) | (1L << (YEAR - 199)) | (1L << (TEXT - 199)) | (1L << (ENUM - 199)) | (1L << (SERIAL - 199)) | (1L << (JSON_VALID - 199)) | (1L << (JSON_SCHEMA_VALID - 199)) | (1L << (AVG - 199)) | (1L << (BIT_AND - 199)) | (1L << (BIT_OR - 199)) | (1L << (BIT_XOR - 199)) | (1L << (COUNT - 199)) | (1L << (GROUP_CONCAT - 199)) | (1L << (MAX - 199)) | (1L << (MIN - 199)) | (1L << (STD - 199)) | (1L << (STDDEV - 199)) | (1L << (STDDEV_POP - 199)) | (1L << (STDDEV_SAMP - 199)) | (1L << (SUM - 199)) | (1L << (VAR_POP - 199)) | (1L << (VAR_SAMP - 199)) | (1L << (VARIANCE - 199)) | (1L << (POSITION - 199)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)) | (1L << (BOOL - 270)) | (1L << (BOOLEAN - 270)) | (1L << (BTREE - 270)) | (1L << (CACHE - 270)) | (1L << (CASCADED - 270)) | (1L << (CHAIN - 270)) | (1L << (CHANGED - 270)) | (1L << (CHANNEL - 270)) | (1L << (CHECKSUM - 270)) | (1L << (PAGE_CHECKSUM - 270)) | (1L << (CIPHER - 270)) | (1L << (CLASS_ORIGIN - 270)) | (1L << (CLIENT - 270)) | (1L << (CLOSE - 270)) | (1L << (COALESCE - 270)) | (1L << (CODE - 270)) | (1L << (COLUMNS - 270)) | (1L << (COLUMN_FORMAT - 270)) | (1L << (COLUMN_NAME - 270)) | (1L << (COMMENT - 270)) | (1L << (COMMIT - 270)) | (1L << (COMPACT - 270)) | (1L << (COMPLETION - 270)) | (1L << (COMPRESSED - 270)) | (1L << (COMPRESSION - 270)) | (1L << (CONCURRENT - 270)) | (1L << (CONNECTION - 270)) | (1L << (CONSISTENT - 270)) | (1L << (CONSTRAINT_CATALOG - 270)) | (1L << (CONSTRAINT_SCHEMA - 270)) | (1L << (CONSTRAINT_NAME - 270)) | (1L << (CONTAINS - 270)) | (1L << (CONTEXT - 270)) | (1L << (CONTRIBUTORS - 270)) | (1L << (COPY - 270)) | (1L << (CPU - 270)) | (1L << (CURSOR_NAME - 270)) | (1L << (DATA - 270)) | (1L << (DATAFILE - 270)) | (1L << (DEALLOCATE - 270)) | (1L << (DEFAULT_AUTH - 270)) | (1L << (DEFINER - 270)) | (1L << (DELAY_KEY_WRITE - 270)) | (1L << (DES_KEY_FILE - 270)) | (1L << (DIRECTORY - 270)) | (1L << (DISABLE - 270)) | (1L << (DISCARD - 270)) | (1L << (DISK - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)) | (1L << (EVENTS - 334)) | (1L << (EVERY - 334)) | (1L << (EXCHANGE - 334)) | (1L << (EXCLUSIVE - 334)) | (1L << (EXPIRE - 334)) | (1L << (EXPORT - 334)) | (1L << (EXTENDED - 334)) | (1L << (EXTENT_SIZE - 334)) | (1L << (FAST - 334)) | (1L << (FAULTS - 334)) | (1L << (FIELDS - 334)) | (1L << (FILE_BLOCK_SIZE - 334)) | (1L << (FILTER - 334)) | (1L << (FIRST - 334)) | (1L << (FIXED - 334)) | (1L << (FLUSH - 334)) | (1L << (FOLLOWS - 334)) | (1L << (FOUND - 334)) | (1L << (FULL - 334)) | (1L << (FUNCTION - 334)) | (1L << (GENERAL - 334)) | (1L << (GLOBAL - 334)) | (1L << (GRANTS - 334)) | (1L << (GROUP_REPLICATION - 334)) | (1L << (HANDLER - 334)) | (1L << (HASH - 334)) | (1L << (HELP - 334)) | (1L << (HOST - 334)) | (1L << (HOSTS - 334)) | (1L << (IDENTIFIED - 334)) | (1L << (IGNORE_SERVER_IDS - 334)) | (1L << (IMPORT - 334)) | (1L << (INDEXES - 334)) | (1L << (INITIAL_SIZE - 334)) | (1L << (INPLACE - 334)) | (1L << (INSERT_METHOD - 334)) | (1L << (INSTALL - 334)) | (1L << (INSTANCE - 334)) | (1L << (INVISIBLE - 334)) | (1L << (INVOKER - 334)) | (1L << (IO - 334)) | (1L << (IO_THREAD - 334)) | (1L << (IPC - 334)) | (1L << (ISOLATION - 334)) | (1L << (ISSUER - 334)) | (1L << (JSON - 334)) | (1L << (KEY_BLOCK_SIZE - 334)) | (1L << (LANGUAGE - 334)) | (1L << (LAST - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)) | (1L << (MASTER_LOG_POS - 398)) | (1L << (MASTER_PASSWORD - 398)) | (1L << (MASTER_PORT - 398)) | (1L << (MASTER_RETRY_COUNT - 398)) | (1L << (MASTER_SSL - 398)) | (1L << (MASTER_SSL_CA - 398)) | (1L << (MASTER_SSL_CAPATH - 398)) | (1L << (MASTER_SSL_CERT - 398)) | (1L << (MASTER_SSL_CIPHER - 398)) | (1L << (MASTER_SSL_CRL - 398)) | (1L << (MASTER_SSL_CRLPATH - 398)) | (1L << (MASTER_SSL_KEY - 398)) | (1L << (MASTER_TLS_VERSION - 398)) | (1L << (MASTER_USER - 398)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 398)) | (1L << (MAX_QUERIES_PER_HOUR - 398)) | (1L << (MAX_ROWS - 398)) | (1L << (MAX_SIZE - 398)) | (1L << (MAX_UPDATES_PER_HOUR - 398)) | (1L << (MAX_USER_CONNECTIONS - 398)) | (1L << (MEDIUM - 398)) | (1L << (MEMBER - 398)) | (1L << (MERGE - 398)) | (1L << (MESSAGE_TEXT - 398)) | (1L << (MID - 398)) | (1L << (MIGRATE - 398)) | (1L << (MIN_ROWS - 398)) | (1L << (MODE - 398)) | (1L << (MODIFY - 398)) | (1L << (MUTEX - 398)) | (1L << (MYSQL - 398)) | (1L << (MYSQL_ERRNO - 398)) | (1L << (NAME - 398)) | (1L << (NAMES - 398)) | (1L << (NCHAR - 398)) | (1L << (NEVER - 398)) | (1L << (NEXT - 398)) | (1L << (NO - 398)) | (1L << (NODEGROUP - 398)) | (1L << (NONE - 398)) | (1L << (OFFLINE - 398)) | (1L << (OFFSET - 398)) | (1L << (OF - 398)) | (1L << (OJ - 398)) | (1L << (OLD_PASSWORD - 398)) | (1L << (ONE - 398)) | (1L << (ONLINE - 398)) | (1L << (ONLY - 398)) | (1L << (OPEN - 398)) | (1L << (OPTIMIZER_COSTS - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)) | (1L << (PORT - 462)) | (1L << (PRECEDES - 462)) | (1L << (PREPARE - 462)) | (1L << (PRESERVE - 462)) | (1L << (PREV - 462)) | (1L << (PROCESSLIST - 462)) | (1L << (PROFILE - 462)) | (1L << (PROFILES - 462)) | (1L << (PROXY - 462)) | (1L << (QUERY - 462)) | (1L << (QUICK - 462)) | (1L << (REBUILD - 462)) | (1L << (RECOVER - 462)) | (1L << (REDO_BUFFER_SIZE - 462)) | (1L << (REDUNDANT - 462)) | (1L << (RELAY - 462)) | (1L << (RELAY_LOG_FILE - 462)) | (1L << (RELAY_LOG_POS - 462)) | (1L << (RELAYLOG - 462)) | (1L << (REMOVE - 462)) | (1L << (REORGANIZE - 462)) | (1L << (REPAIR - 462)) | (1L << (REPLICATE_DO_DB - 462)) | (1L << (REPLICATE_DO_TABLE - 462)) | (1L << (REPLICATE_IGNORE_DB - 462)) | (1L << (REPLICATE_IGNORE_TABLE - 462)) | (1L << (REPLICATE_REWRITE_DB - 462)) | (1L << (REPLICATE_WILD_DO_TABLE - 462)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 462)) | (1L << (REPLICATION - 462)) | (1L << (RESET - 462)) | (1L << (RESUME - 462)) | (1L << (RETURNED_SQLSTATE - 462)) | (1L << (RETURNS - 462)) | (1L << (ROLE - 462)) | (1L << (ROLLBACK - 462)) | (1L << (ROLLUP - 462)) | (1L << (ROTATE - 462)) | (1L << (ROW - 462)) | (1L << (ROWS - 462)) | (1L << (ROW_FORMAT - 462)) | (1L << (SAVEPOINT - 462)) | (1L << (SCHEDULE - 462)) | (1L << (SECURITY - 462)) | (1L << (SERVER - 462)) | (1L << (SESSION - 462)) | (1L << (SHARE - 462)) | (1L << (SHARED - 462)) | (1L << (SIGNED - 462)) | (1L << (SIMPLE - 462)) | (1L << (SLAVE - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)) | (1L << (SQL_CACHE - 526)) | (1L << (SQL_NO_CACHE - 526)) | (1L << (SQL_THREAD - 526)) | (1L << (START - 526)) | (1L << (STARTS - 526)) | (1L << (STATS_AUTO_RECALC - 526)) | (1L << (STATS_PERSISTENT - 526)) | (1L << (STATS_SAMPLE_PAGES - 526)) | (1L << (STATUS - 526)) | (1L << (STOP - 526)) | (1L << (STORAGE - 526)) | (1L << (STRING - 526)) | (1L << (SUBCLASS_ORIGIN - 526)) | (1L << (SUBJECT - 526)) | (1L << (SUBPARTITION - 526)) | (1L << (SUBPARTITIONS - 526)) | (1L << (SUSPEND - 526)) | (1L << (SWAPS - 526)) | (1L << (SWITCHES - 526)) | (1L << (TABLE_NAME - 526)) | (1L << (TABLESPACE - 526)) | (1L << (TEMPORARY - 526)) | (1L << (TEMPTABLE - 526)) | (1L << (THAN - 526)) | (1L << (TRADITIONAL - 526)) | (1L << (TRANSACTION - 526)) | (1L << (TRANSACTIONAL - 526)) | (1L << (TRIGGERS - 526)) | (1L << (TRUNCATE - 526)) | (1L << (UNDEFINED - 526)) | (1L << (UNDOFILE - 526)) | (1L << (UNDO_BUFFER_SIZE - 526)) | (1L << (UNINSTALL - 526)) | (1L << (UNKNOWN - 526)) | (1L << (UNTIL - 526)) | (1L << (UPGRADE - 526)) | (1L << (USER - 526)) | (1L << (USE_FRM - 526)) | (1L << (USER_RESOURCES - 526)) | (1L << (VALIDATION - 526)) | (1L << (VALUE - 526)) | (1L << (VARIABLES - 526)) | (1L << (VIEW - 526)) | (1L << (VISIBLE - 526)) | (1L << (WAIT - 526)) | (1L << (WARNINGS - 526)) | (1L << (WITHOUT - 526)) | (1L << (WORK - 526)) | (1L << (WRAPPER - 526)) | (1L << (X509 - 526)) | (1L << (XA - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (XML - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)) | (1L << (DAY - 590)) | (1L << (HOUR - 590)) | (1L << (MINUTE - 590)) | (1L << (WEEK - 590)) | (1L << (SECOND - 590)) | (1L << (MICROSECOND - 590)) | (1L << (TABLES - 590)) | (1L << (ROUTINE - 590)) | (1L << (EXECUTE - 590)) | (1L << (FILE - 590)) | (1L << (PROCESS - 590)) | (1L << (RELOAD - 590)) | (1L << (SHUTDOWN - 590)) | (1L << (SUPER - 590)) | (1L << (PRIVILEGES - 590)) | (1L << (AUDIT_ADMIN - 590)) | (1L << (BACKUP_ADMIN - 590)) | (1L << (BINLOG_ADMIN - 590)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 590)) | (1L << (CLONE_ADMIN - 590)) | (1L << (CONNECTION_ADMIN - 590)) | (1L << (ENCRYPTION_KEY_ADMIN - 590)) | (1L << (FIREWALL_ADMIN - 590)) | (1L << (FIREWALL_USER - 590)) | (1L << (GROUP_REPLICATION_ADMIN - 590)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 590)) | (1L << (NDB_STORED_USER - 590)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 590)) | (1L << (REPLICATION_APPLIER - 590)) | (1L << (REPLICATION_SLAVE_ADMIN - 590)) | (1L << (RESOURCE_GROUP_ADMIN - 590)) | (1L << (RESOURCE_GROUP_USER - 590)) | (1L << (ROLE_ADMIN - 590)) | (1L << (SESSION_VARIABLES_ADMIN - 590)) | (1L << (SET_USER_ID - 590)) | (1L << (SHOW_ROUTINE - 590)) | (1L << (SYSTEM_VARIABLES_ADMIN - 590)) | (1L << (TABLE_ENCRYPTION_ADMIN - 590)) | (1L << (VERSION_TOKEN_ADMIN - 590)) | (1L << (XA_RECOVER_ADMIN - 590)) | (1L << (ARMSCII8 - 590)) | (1L << (ASCII - 590)) | (1L << (BIG5 - 590)) | (1L << (CP1250 - 590)) | (1L << (CP1251 - 590)) | (1L << (CP1256 - 590)) | (1L << (CP1257 - 590)) | (1L << (CP850 - 590)) | (1L << (CP852 - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)) | (1L << (GREEK - 654)) | (1L << (HEBREW - 654)) | (1L << (HP8 - 654)) | (1L << (KEYBCS2 - 654)) | (1L << (KOI8R - 654)) | (1L << (KOI8U - 654)) | (1L << (LATIN1 - 654)) | (1L << (LATIN2 - 654)) | (1L << (LATIN5 - 654)) | (1L << (LATIN7 - 654)) | (1L << (MACCE - 654)) | (1L << (MACROMAN - 654)) | (1L << (SJIS - 654)) | (1L << (SWE7 - 654)) | (1L << (TIS620 - 654)) | (1L << (UCS2 - 654)) | (1L << (UJIS - 654)) | (1L << (UTF16 - 654)) | (1L << (UTF16LE - 654)) | (1L << (UTF32 - 654)) | (1L << (UTF8 - 654)) | (1L << (UTF8MB3 - 654)) | (1L << (UTF8MB4 - 654)) | (1L << (ARCHIVE - 654)) | (1L << (BLACKHOLE - 654)) | (1L << (CSV - 654)) | (1L << (FEDERATED - 654)) | (1L << (INNODB - 654)) | (1L << (MEMORY - 654)) | (1L << (MRG_MYISAM - 654)) | (1L << (MYISAM - 654)) | (1L << (NDB - 654)) | (1L << (NDBCLUSTER - 654)) | (1L << (PERFORMANCE_SCHEMA - 654)) | (1L << (TOKUDB - 654)) | (1L << (REPEATABLE - 654)) | (1L << (COMMITTED - 654)) | (1L << (UNCOMMITTED - 654)) | (1L << (SERIALIZABLE - 654)) | (1L << (GEOMETRYCOLLECTION - 654)) | (1L << (LINESTRING - 654)) | (1L << (MULTILINESTRING - 654)) | (1L << (MULTIPOINT - 654)) | (1L << (MULTIPOLYGON - 654)) | (1L << (POINT - 654)) | (1L << (POLYGON - 654)) | (1L << (ABS - 654)) | (1L << (ACOS - 654)) | (1L << (ADDDATE - 654)) | (1L << (ADDTIME - 654)) | (1L << (AES_DECRYPT - 654)) | (1L << (AES_ENCRYPT - 654)) | (1L << (AREA - 654)) | (1L << (ASBINARY - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)) | (1L << (ASYMMETRIC_VERIFY - 718)) | (1L << (ATAN - 718)) | (1L << (ATAN2 - 718)) | (1L << (BENCHMARK - 718)) | (1L << (BIN - 718)) | (1L << (BIT_COUNT - 718)) | (1L << (BIT_LENGTH - 718)) | (1L << (BUFFER - 718)) | (1L << (CATALOG_NAME - 718)) | (1L << (CEIL - 718)) | (1L << (CEILING - 718)) | (1L << (CENTROID - 718)) | (1L << (CHARACTER_LENGTH - 718)) | (1L << (CHARSET - 718)) | (1L << (CHAR_LENGTH - 718)) | (1L << (COERCIBILITY - 718)) | (1L << (COLLATION - 718)) | (1L << (COMPRESS - 718)) | (1L << (CONCAT - 718)) | (1L << (CONCAT_WS - 718)) | (1L << (CONNECTION_ID - 718)) | (1L << (CONV - 718)) | (1L << (CONVERT_TZ - 718)) | (1L << (COS - 718)) | (1L << (COT - 718)) | (1L << (CRC32 - 718)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1L << (CREATE_DH_PARAMETERS - 718)) | (1L << (CREATE_DIGEST - 718)) | (1L << (CROSSES - 718)) | (1L << (DATEDIFF - 718)) | (1L << (DATE_FORMAT - 718)) | (1L << (DAYNAME - 718)) | (1L << (DAYOFMONTH - 718)) | (1L << (DAYOFWEEK - 718)) | (1L << (DAYOFYEAR - 718)) | (1L << (DECODE - 718)) | (1L << (DEGREES - 718)) | (1L << (DES_DECRYPT - 718)) | (1L << (DES_ENCRYPT - 718)) | (1L << (DIMENSION - 718)) | (1L << (DISJOINT - 718)) | (1L << (ELT - 718)) | (1L << (ENCODE - 718)) | (1L << (ENCRYPT - 718)) | (1L << (ENDPOINT - 718)) | (1L << (ENVELOPE - 718)) | (1L << (EQUALS - 718)) | (1L << (EXP - 718)) | (1L << (EXPORT_SET - 718)) | (1L << (EXTERIORRING - 718)) | (1L << (EXTRACTVALUE - 718)) | (1L << (FIELD - 718)) | (1L << (FIND_IN_SET - 718)) | (1L << (FLOOR - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 782)) | (1L << (GEOMETRYFROMTEXT - 782)) | (1L << (GEOMETRYFROMWKB - 782)) | (1L << (GEOMETRYN - 782)) | (1L << (GEOMETRYTYPE - 782)) | (1L << (GEOMFROMTEXT - 782)) | (1L << (GEOMFROMWKB - 782)) | (1L << (GET_FORMAT - 782)) | (1L << (GET_LOCK - 782)) | (1L << (GLENGTH - 782)) | (1L << (GREATEST - 782)) | (1L << (GTID_SUBSET - 782)) | (1L << (GTID_SUBTRACT - 782)) | (1L << (HEX - 782)) | (1L << (IFNULL - 782)) | (1L << (INET6_ATON - 782)) | (1L << (INET6_NTOA - 782)) | (1L << (INET_ATON - 782)) | (1L << (INET_NTOA - 782)) | (1L << (INSTR - 782)) | (1L << (INTERIORRINGN - 782)) | (1L << (INTERSECTS - 782)) | (1L << (ISCLOSED - 782)) | (1L << (ISEMPTY - 782)) | (1L << (ISNULL - 782)) | (1L << (ISSIMPLE - 782)) | (1L << (IS_FREE_LOCK - 782)) | (1L << (IS_IPV4 - 782)) | (1L << (IS_IPV4_COMPAT - 782)) | (1L << (IS_IPV4_MAPPED - 782)) | (1L << (IS_IPV6 - 782)) | (1L << (IS_USED_LOCK - 782)) | (1L << (LAST_INSERT_ID - 782)) | (1L << (LCASE - 782)) | (1L << (LEAST - 782)) | (1L << (LENGTH - 782)) | (1L << (LINEFROMTEXT - 782)) | (1L << (LINEFROMWKB - 782)) | (1L << (LINESTRINGFROMTEXT - 782)) | (1L << (LINESTRINGFROMWKB - 782)) | (1L << (LN - 782)) | (1L << (LOAD_FILE - 782)) | (1L << (LOCATE - 782)) | (1L << (LOG - 782)) | (1L << (LOG10 - 782)) | (1L << (LOG2 - 782)) | (1L << (LOWER - 782)) | (1L << (LPAD - 782)) | (1L << (LTRIM - 782)) | (1L << (MAKEDATE - 782)) | (1L << (MAKETIME - 782)) | (1L << (MAKE_SET - 782)) | (1L << (MASTER_POS_WAIT - 782)) | (1L << (MBRCONTAINS - 782)) | (1L << (MBRDISJOINT - 782)) | (1L << (MBREQUAL - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)) | (1L << (MPOINTFROMTEXT - 846)) | (1L << (MPOINTFROMWKB - 846)) | (1L << (MPOLYFROMTEXT - 846)) | (1L << (MPOLYFROMWKB - 846)) | (1L << (MULTILINESTRINGFROMTEXT - 846)) | (1L << (MULTILINESTRINGFROMWKB - 846)) | (1L << (MULTIPOINTFROMTEXT - 846)) | (1L << (MULTIPOINTFROMWKB - 846)) | (1L << (MULTIPOLYGONFROMTEXT - 846)) | (1L << (MULTIPOLYGONFROMWKB - 846)) | (1L << (NAME_CONST - 846)) | (1L << (NULLIF - 846)) | (1L << (NUMGEOMETRIES - 846)) | (1L << (NUMINTERIORRINGS - 846)) | (1L << (NUMPOINTS - 846)) | (1L << (OCT - 846)) | (1L << (OCTET_LENGTH - 846)) | (1L << (ORD - 846)) | (1L << (OVERLAPS - 846)) | (1L << (PERIOD_ADD - 846)) | (1L << (PERIOD_DIFF - 846)) | (1L << (PI - 846)) | (1L << (POINTFROMTEXT - 846)) | (1L << (POINTFROMWKB - 846)) | (1L << (POINTN - 846)) | (1L << (POLYFROMTEXT - 846)) | (1L << (POLYFROMWKB - 846)) | (1L << (POLYGONFROMTEXT - 846)) | (1L << (POLYGONFROMWKB - 846)) | (1L << (POW - 846)) | (1L << (POWER - 846)) | (1L << (QUOTE - 846)) | (1L << (RADIANS - 846)) | (1L << (RAND - 846)) | (1L << (RANDOM_BYTES - 846)) | (1L << (RELEASE_LOCK - 846)) | (1L << (REVERSE - 846)) | (1L << (ROUND - 846)) | (1L << (ROW_COUNT - 846)) | (1L << (RPAD - 846)) | (1L << (RTRIM - 846)) | (1L << (SEC_TO_TIME - 846)) | (1L << (SESSION_USER - 846)) | (1L << (SHA - 846)) | (1L << (SHA1 - 846)) | (1L << (SHA2 - 846)) | (1L << (SCHEMA_NAME - 846)) | (1L << (SIGN - 846)) | (1L << (SIN - 846)) | (1L << (SLEEP - 846)) | (1L << (SOUNDEX - 846)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 846)) | (1L << (SQRT - 846)) | (1L << (SRID - 846)) | (1L << (STARTPOINT - 846)) | (1L << (STRCMP - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)) | (1L << (ST_CONTAINS - 910)) | (1L << (ST_CROSSES - 910)) | (1L << (ST_DIFFERENCE - 910)) | (1L << (ST_DIMENSION - 910)) | (1L << (ST_DISJOINT - 910)) | (1L << (ST_DISTANCE - 910)) | (1L << (ST_ENDPOINT - 910)) | (1L << (ST_ENVELOPE - 910)) | (1L << (ST_EQUALS - 910)) | (1L << (ST_EXTERIORRING - 910)) | (1L << (ST_GEOMCOLLFROMTEXT - 910)) | (1L << (ST_GEOMCOLLFROMTXT - 910)) | (1L << (ST_GEOMCOLLFROMWKB - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1L << (ST_GEOMETRYFROMTEXT - 910)) | (1L << (ST_GEOMETRYFROMWKB - 910)) | (1L << (ST_GEOMETRYN - 910)) | (1L << (ST_GEOMETRYTYPE - 910)) | (1L << (ST_GEOMFROMTEXT - 910)) | (1L << (ST_GEOMFROMWKB - 910)) | (1L << (ST_INTERIORRINGN - 910)) | (1L << (ST_INTERSECTION - 910)) | (1L << (ST_INTERSECTS - 910)) | (1L << (ST_ISCLOSED - 910)) | (1L << (ST_ISEMPTY - 910)) | (1L << (ST_ISSIMPLE - 910)) | (1L << (ST_LINEFROMTEXT - 910)) | (1L << (ST_LINEFROMWKB - 910)) | (1L << (ST_LINESTRINGFROMTEXT - 910)) | (1L << (ST_LINESTRINGFROMWKB - 910)) | (1L << (ST_NUMGEOMETRIES - 910)) | (1L << (ST_NUMINTERIORRING - 910)) | (1L << (ST_NUMINTERIORRINGS - 910)) | (1L << (ST_NUMPOINTS - 910)) | (1L << (ST_OVERLAPS - 910)) | (1L << (ST_POINTFROMTEXT - 910)) | (1L << (ST_POINTFROMWKB - 910)) | (1L << (ST_POINTN - 910)) | (1L << (ST_POLYFROMTEXT - 910)) | (1L << (ST_POLYFROMWKB - 910)) | (1L << (ST_POLYGONFROMTEXT - 910)) | (1L << (ST_POLYGONFROMWKB - 910)) | (1L << (ST_SRID - 910)) | (1L << (ST_STARTPOINT - 910)) | (1L << (ST_SYMDIFFERENCE - 910)) | (1L << (ST_TOUCHES - 910)) | (1L << (ST_UNION - 910)) | (1L << (ST_WITHIN - 910)) | (1L << (ST_X - 910)) | (1L << (ST_Y - 910)) | (1L << (SUBDATE - 910)) | (1L << (SUBSTRING_INDEX - 910)) | (1L << (SUBTIME - 910)) | (1L << (SYSTEM_USER - 910)) | (1L << (TAN - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)) | (1L << (TO_SECONDS - 974)) | (1L << (UCASE - 974)) | (1L << (UNCOMPRESS - 974)) | (1L << (UNCOMPRESSED_LENGTH - 974)) | (1L << (UNHEX - 974)) | (1L << (UNIX_TIMESTAMP - 974)) | (1L << (UPDATEXML - 974)) | (1L << (UPPER - 974)) | (1L << (UUID - 974)) | (1L << (UUID_SHORT - 974)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 974)) | (1L << (VERSION - 974)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1L << (WEEKDAY - 974)) | (1L << (WEEKOFYEAR - 974)) | (1L << (WEIGHT_STRING - 974)) | (1L << (WITHIN - 974)) | (1L << (YEARWEEK - 974)) | (1L << (Y_FUNCTION - 974)) | (1L << (X_FUNCTION - 974)) | (1L << (MOD - 974)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1040)) | (1L << (STRING_LITERAL - 1040)) | (1L << (ID - 1040)) | (1L << (REVERSE_QUOTE_ID - 1040)))) != 0)) {
						{
						setState(582);
						((UniqueKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(587);
				match(UNIQUE);
				setState(589);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(588);
					((UniqueKeyTableConstraintContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((UniqueKeyTableConstraintContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(592);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (GROUP - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (ORDER - 105)) | (1L << (RIGHT - 105)) | (1L << (SCHEMA - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (DATE - 199)) | (1L << (TIME - 199)) | (1L << (TIMESTAMP - 199)) | (1L << (DATETIME - 199)) | (1L << (YEAR - 199)) | (1L << (TEXT - 199)) | (1L << (ENUM - 199)) | (1L << (SERIAL - 199)) | (1L << (JSON_VALID - 199)) | (1L << (JSON_SCHEMA_VALID - 199)) | (1L << (AVG - 199)) | (1L << (BIT_AND - 199)) | (1L << (BIT_OR - 199)) | (1L << (BIT_XOR - 199)) | (1L << (COUNT - 199)) | (1L << (GROUP_CONCAT - 199)) | (1L << (MAX - 199)) | (1L << (MIN - 199)) | (1L << (STD - 199)) | (1L << (STDDEV - 199)) | (1L << (STDDEV_POP - 199)) | (1L << (STDDEV_SAMP - 199)) | (1L << (SUM - 199)) | (1L << (VAR_POP - 199)) | (1L << (VAR_SAMP - 199)) | (1L << (VARIANCE - 199)) | (1L << (POSITION - 199)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)) | (1L << (BOOL - 270)) | (1L << (BOOLEAN - 270)) | (1L << (BTREE - 270)) | (1L << (CACHE - 270)) | (1L << (CASCADED - 270)) | (1L << (CHAIN - 270)) | (1L << (CHANGED - 270)) | (1L << (CHANNEL - 270)) | (1L << (CHECKSUM - 270)) | (1L << (PAGE_CHECKSUM - 270)) | (1L << (CIPHER - 270)) | (1L << (CLASS_ORIGIN - 270)) | (1L << (CLIENT - 270)) | (1L << (CLOSE - 270)) | (1L << (COALESCE - 270)) | (1L << (CODE - 270)) | (1L << (COLUMNS - 270)) | (1L << (COLUMN_FORMAT - 270)) | (1L << (COLUMN_NAME - 270)) | (1L << (COMMENT - 270)) | (1L << (COMMIT - 270)) | (1L << (COMPACT - 270)) | (1L << (COMPLETION - 270)) | (1L << (COMPRESSED - 270)) | (1L << (COMPRESSION - 270)) | (1L << (CONCURRENT - 270)) | (1L << (CONNECTION - 270)) | (1L << (CONSISTENT - 270)) | (1L << (CONSTRAINT_CATALOG - 270)) | (1L << (CONSTRAINT_SCHEMA - 270)) | (1L << (CONSTRAINT_NAME - 270)) | (1L << (CONTAINS - 270)) | (1L << (CONTEXT - 270)) | (1L << (CONTRIBUTORS - 270)) | (1L << (COPY - 270)) | (1L << (CPU - 270)) | (1L << (CURSOR_NAME - 270)) | (1L << (DATA - 270)) | (1L << (DATAFILE - 270)) | (1L << (DEALLOCATE - 270)) | (1L << (DEFAULT_AUTH - 270)) | (1L << (DEFINER - 270)) | (1L << (DELAY_KEY_WRITE - 270)) | (1L << (DES_KEY_FILE - 270)) | (1L << (DIRECTORY - 270)) | (1L << (DISABLE - 270)) | (1L << (DISCARD - 270)) | (1L << (DISK - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)) | (1L << (EVENTS - 334)) | (1L << (EVERY - 334)) | (1L << (EXCHANGE - 334)) | (1L << (EXCLUSIVE - 334)) | (1L << (EXPIRE - 334)) | (1L << (EXPORT - 334)) | (1L << (EXTENDED - 334)) | (1L << (EXTENT_SIZE - 334)) | (1L << (FAST - 334)) | (1L << (FAULTS - 334)) | (1L << (FIELDS - 334)) | (1L << (FILE_BLOCK_SIZE - 334)) | (1L << (FILTER - 334)) | (1L << (FIRST - 334)) | (1L << (FIXED - 334)) | (1L << (FLUSH - 334)) | (1L << (FOLLOWS - 334)) | (1L << (FOUND - 334)) | (1L << (FULL - 334)) | (1L << (FUNCTION - 334)) | (1L << (GENERAL - 334)) | (1L << (GLOBAL - 334)) | (1L << (GRANTS - 334)) | (1L << (GROUP_REPLICATION - 334)) | (1L << (HANDLER - 334)) | (1L << (HASH - 334)) | (1L << (HELP - 334)) | (1L << (HOST - 334)) | (1L << (HOSTS - 334)) | (1L << (IDENTIFIED - 334)) | (1L << (IGNORE_SERVER_IDS - 334)) | (1L << (IMPORT - 334)) | (1L << (INDEXES - 334)) | (1L << (INITIAL_SIZE - 334)) | (1L << (INPLACE - 334)) | (1L << (INSERT_METHOD - 334)) | (1L << (INSTALL - 334)) | (1L << (INSTANCE - 334)) | (1L << (INVISIBLE - 334)) | (1L << (INVOKER - 334)) | (1L << (IO - 334)) | (1L << (IO_THREAD - 334)) | (1L << (IPC - 334)) | (1L << (ISOLATION - 334)) | (1L << (ISSUER - 334)) | (1L << (JSON - 334)) | (1L << (KEY_BLOCK_SIZE - 334)) | (1L << (LANGUAGE - 334)) | (1L << (LAST - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)) | (1L << (MASTER_LOG_POS - 398)) | (1L << (MASTER_PASSWORD - 398)) | (1L << (MASTER_PORT - 398)) | (1L << (MASTER_RETRY_COUNT - 398)) | (1L << (MASTER_SSL - 398)) | (1L << (MASTER_SSL_CA - 398)) | (1L << (MASTER_SSL_CAPATH - 398)) | (1L << (MASTER_SSL_CERT - 398)) | (1L << (MASTER_SSL_CIPHER - 398)) | (1L << (MASTER_SSL_CRL - 398)) | (1L << (MASTER_SSL_CRLPATH - 398)) | (1L << (MASTER_SSL_KEY - 398)) | (1L << (MASTER_TLS_VERSION - 398)) | (1L << (MASTER_USER - 398)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 398)) | (1L << (MAX_QUERIES_PER_HOUR - 398)) | (1L << (MAX_ROWS - 398)) | (1L << (MAX_SIZE - 398)) | (1L << (MAX_UPDATES_PER_HOUR - 398)) | (1L << (MAX_USER_CONNECTIONS - 398)) | (1L << (MEDIUM - 398)) | (1L << (MEMBER - 398)) | (1L << (MERGE - 398)) | (1L << (MESSAGE_TEXT - 398)) | (1L << (MID - 398)) | (1L << (MIGRATE - 398)) | (1L << (MIN_ROWS - 398)) | (1L << (MODE - 398)) | (1L << (MODIFY - 398)) | (1L << (MUTEX - 398)) | (1L << (MYSQL - 398)) | (1L << (MYSQL_ERRNO - 398)) | (1L << (NAME - 398)) | (1L << (NAMES - 398)) | (1L << (NCHAR - 398)) | (1L << (NEVER - 398)) | (1L << (NEXT - 398)) | (1L << (NO - 398)) | (1L << (NODEGROUP - 398)) | (1L << (NONE - 398)) | (1L << (OFFLINE - 398)) | (1L << (OFFSET - 398)) | (1L << (OF - 398)) | (1L << (OJ - 398)) | (1L << (OLD_PASSWORD - 398)) | (1L << (ONE - 398)) | (1L << (ONLINE - 398)) | (1L << (ONLY - 398)) | (1L << (OPEN - 398)) | (1L << (OPTIMIZER_COSTS - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)) | (1L << (PORT - 462)) | (1L << (PRECEDES - 462)) | (1L << (PREPARE - 462)) | (1L << (PRESERVE - 462)) | (1L << (PREV - 462)) | (1L << (PROCESSLIST - 462)) | (1L << (PROFILE - 462)) | (1L << (PROFILES - 462)) | (1L << (PROXY - 462)) | (1L << (QUERY - 462)) | (1L << (QUICK - 462)) | (1L << (REBUILD - 462)) | (1L << (RECOVER - 462)) | (1L << (REDO_BUFFER_SIZE - 462)) | (1L << (REDUNDANT - 462)) | (1L << (RELAY - 462)) | (1L << (RELAY_LOG_FILE - 462)) | (1L << (RELAY_LOG_POS - 462)) | (1L << (RELAYLOG - 462)) | (1L << (REMOVE - 462)) | (1L << (REORGANIZE - 462)) | (1L << (REPAIR - 462)) | (1L << (REPLICATE_DO_DB - 462)) | (1L << (REPLICATE_DO_TABLE - 462)) | (1L << (REPLICATE_IGNORE_DB - 462)) | (1L << (REPLICATE_IGNORE_TABLE - 462)) | (1L << (REPLICATE_REWRITE_DB - 462)) | (1L << (REPLICATE_WILD_DO_TABLE - 462)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 462)) | (1L << (REPLICATION - 462)) | (1L << (RESET - 462)) | (1L << (RESUME - 462)) | (1L << (RETURNED_SQLSTATE - 462)) | (1L << (RETURNS - 462)) | (1L << (ROLE - 462)) | (1L << (ROLLBACK - 462)) | (1L << (ROLLUP - 462)) | (1L << (ROTATE - 462)) | (1L << (ROW - 462)) | (1L << (ROWS - 462)) | (1L << (ROW_FORMAT - 462)) | (1L << (SAVEPOINT - 462)) | (1L << (SCHEDULE - 462)) | (1L << (SECURITY - 462)) | (1L << (SERVER - 462)) | (1L << (SESSION - 462)) | (1L << (SHARE - 462)) | (1L << (SHARED - 462)) | (1L << (SIGNED - 462)) | (1L << (SIMPLE - 462)) | (1L << (SLAVE - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)) | (1L << (SQL_CACHE - 526)) | (1L << (SQL_NO_CACHE - 526)) | (1L << (SQL_THREAD - 526)) | (1L << (START - 526)) | (1L << (STARTS - 526)) | (1L << (STATS_AUTO_RECALC - 526)) | (1L << (STATS_PERSISTENT - 526)) | (1L << (STATS_SAMPLE_PAGES - 526)) | (1L << (STATUS - 526)) | (1L << (STOP - 526)) | (1L << (STORAGE - 526)) | (1L << (STRING - 526)) | (1L << (SUBCLASS_ORIGIN - 526)) | (1L << (SUBJECT - 526)) | (1L << (SUBPARTITION - 526)) | (1L << (SUBPARTITIONS - 526)) | (1L << (SUSPEND - 526)) | (1L << (SWAPS - 526)) | (1L << (SWITCHES - 526)) | (1L << (TABLE_NAME - 526)) | (1L << (TABLESPACE - 526)) | (1L << (TEMPORARY - 526)) | (1L << (TEMPTABLE - 526)) | (1L << (THAN - 526)) | (1L << (TRADITIONAL - 526)) | (1L << (TRANSACTION - 526)) | (1L << (TRANSACTIONAL - 526)) | (1L << (TRIGGERS - 526)) | (1L << (TRUNCATE - 526)) | (1L << (UNDEFINED - 526)) | (1L << (UNDOFILE - 526)) | (1L << (UNDO_BUFFER_SIZE - 526)) | (1L << (UNINSTALL - 526)) | (1L << (UNKNOWN - 526)) | (1L << (UNTIL - 526)) | (1L << (UPGRADE - 526)) | (1L << (USER - 526)) | (1L << (USE_FRM - 526)) | (1L << (USER_RESOURCES - 526)) | (1L << (VALIDATION - 526)) | (1L << (VALUE - 526)) | (1L << (VARIABLES - 526)) | (1L << (VIEW - 526)) | (1L << (VISIBLE - 526)) | (1L << (WAIT - 526)) | (1L << (WARNINGS - 526)) | (1L << (WITHOUT - 526)) | (1L << (WORK - 526)) | (1L << (WRAPPER - 526)) | (1L << (X509 - 526)) | (1L << (XA - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (XML - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)) | (1L << (DAY - 590)) | (1L << (HOUR - 590)) | (1L << (MINUTE - 590)) | (1L << (WEEK - 590)) | (1L << (SECOND - 590)) | (1L << (MICROSECOND - 590)) | (1L << (TABLES - 590)) | (1L << (ROUTINE - 590)) | (1L << (EXECUTE - 590)) | (1L << (FILE - 590)) | (1L << (PROCESS - 590)) | (1L << (RELOAD - 590)) | (1L << (SHUTDOWN - 590)) | (1L << (SUPER - 590)) | (1L << (PRIVILEGES - 590)) | (1L << (AUDIT_ADMIN - 590)) | (1L << (BACKUP_ADMIN - 590)) | (1L << (BINLOG_ADMIN - 590)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 590)) | (1L << (CLONE_ADMIN - 590)) | (1L << (CONNECTION_ADMIN - 590)) | (1L << (ENCRYPTION_KEY_ADMIN - 590)) | (1L << (FIREWALL_ADMIN - 590)) | (1L << (FIREWALL_USER - 590)) | (1L << (GROUP_REPLICATION_ADMIN - 590)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 590)) | (1L << (NDB_STORED_USER - 590)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 590)) | (1L << (REPLICATION_APPLIER - 590)) | (1L << (REPLICATION_SLAVE_ADMIN - 590)) | (1L << (RESOURCE_GROUP_ADMIN - 590)) | (1L << (RESOURCE_GROUP_USER - 590)) | (1L << (ROLE_ADMIN - 590)) | (1L << (SESSION_VARIABLES_ADMIN - 590)) | (1L << (SET_USER_ID - 590)) | (1L << (SHOW_ROUTINE - 590)) | (1L << (SYSTEM_VARIABLES_ADMIN - 590)) | (1L << (TABLE_ENCRYPTION_ADMIN - 590)) | (1L << (VERSION_TOKEN_ADMIN - 590)) | (1L << (XA_RECOVER_ADMIN - 590)) | (1L << (ARMSCII8 - 590)) | (1L << (ASCII - 590)) | (1L << (BIG5 - 590)) | (1L << (CP1250 - 590)) | (1L << (CP1251 - 590)) | (1L << (CP1256 - 590)) | (1L << (CP1257 - 590)) | (1L << (CP850 - 590)) | (1L << (CP852 - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)) | (1L << (GREEK - 654)) | (1L << (HEBREW - 654)) | (1L << (HP8 - 654)) | (1L << (KEYBCS2 - 654)) | (1L << (KOI8R - 654)) | (1L << (KOI8U - 654)) | (1L << (LATIN1 - 654)) | (1L << (LATIN2 - 654)) | (1L << (LATIN5 - 654)) | (1L << (LATIN7 - 654)) | (1L << (MACCE - 654)) | (1L << (MACROMAN - 654)) | (1L << (SJIS - 654)) | (1L << (SWE7 - 654)) | (1L << (TIS620 - 654)) | (1L << (UCS2 - 654)) | (1L << (UJIS - 654)) | (1L << (UTF16 - 654)) | (1L << (UTF16LE - 654)) | (1L << (UTF32 - 654)) | (1L << (UTF8 - 654)) | (1L << (UTF8MB3 - 654)) | (1L << (UTF8MB4 - 654)) | (1L << (ARCHIVE - 654)) | (1L << (BLACKHOLE - 654)) | (1L << (CSV - 654)) | (1L << (FEDERATED - 654)) | (1L << (INNODB - 654)) | (1L << (MEMORY - 654)) | (1L << (MRG_MYISAM - 654)) | (1L << (MYISAM - 654)) | (1L << (NDB - 654)) | (1L << (NDBCLUSTER - 654)) | (1L << (PERFORMANCE_SCHEMA - 654)) | (1L << (TOKUDB - 654)) | (1L << (REPEATABLE - 654)) | (1L << (COMMITTED - 654)) | (1L << (UNCOMMITTED - 654)) | (1L << (SERIALIZABLE - 654)) | (1L << (GEOMETRYCOLLECTION - 654)) | (1L << (LINESTRING - 654)) | (1L << (MULTILINESTRING - 654)) | (1L << (MULTIPOINT - 654)) | (1L << (MULTIPOLYGON - 654)) | (1L << (POINT - 654)) | (1L << (POLYGON - 654)) | (1L << (ABS - 654)) | (1L << (ACOS - 654)) | (1L << (ADDDATE - 654)) | (1L << (ADDTIME - 654)) | (1L << (AES_DECRYPT - 654)) | (1L << (AES_ENCRYPT - 654)) | (1L << (AREA - 654)) | (1L << (ASBINARY - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)) | (1L << (ASYMMETRIC_VERIFY - 718)) | (1L << (ATAN - 718)) | (1L << (ATAN2 - 718)) | (1L << (BENCHMARK - 718)) | (1L << (BIN - 718)) | (1L << (BIT_COUNT - 718)) | (1L << (BIT_LENGTH - 718)) | (1L << (BUFFER - 718)) | (1L << (CATALOG_NAME - 718)) | (1L << (CEIL - 718)) | (1L << (CEILING - 718)) | (1L << (CENTROID - 718)) | (1L << (CHARACTER_LENGTH - 718)) | (1L << (CHARSET - 718)) | (1L << (CHAR_LENGTH - 718)) | (1L << (COERCIBILITY - 718)) | (1L << (COLLATION - 718)) | (1L << (COMPRESS - 718)) | (1L << (CONCAT - 718)) | (1L << (CONCAT_WS - 718)) | (1L << (CONNECTION_ID - 718)) | (1L << (CONV - 718)) | (1L << (CONVERT_TZ - 718)) | (1L << (COS - 718)) | (1L << (COT - 718)) | (1L << (CRC32 - 718)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1L << (CREATE_DH_PARAMETERS - 718)) | (1L << (CREATE_DIGEST - 718)) | (1L << (CROSSES - 718)) | (1L << (DATEDIFF - 718)) | (1L << (DATE_FORMAT - 718)) | (1L << (DAYNAME - 718)) | (1L << (DAYOFMONTH - 718)) | (1L << (DAYOFWEEK - 718)) | (1L << (DAYOFYEAR - 718)) | (1L << (DECODE - 718)) | (1L << (DEGREES - 718)) | (1L << (DES_DECRYPT - 718)) | (1L << (DES_ENCRYPT - 718)) | (1L << (DIMENSION - 718)) | (1L << (DISJOINT - 718)) | (1L << (ELT - 718)) | (1L << (ENCODE - 718)) | (1L << (ENCRYPT - 718)) | (1L << (ENDPOINT - 718)) | (1L << (ENVELOPE - 718)) | (1L << (EQUALS - 718)) | (1L << (EXP - 718)) | (1L << (EXPORT_SET - 718)) | (1L << (EXTERIORRING - 718)) | (1L << (EXTRACTVALUE - 718)) | (1L << (FIELD - 718)) | (1L << (FIND_IN_SET - 718)) | (1L << (FLOOR - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 782)) | (1L << (GEOMETRYFROMTEXT - 782)) | (1L << (GEOMETRYFROMWKB - 782)) | (1L << (GEOMETRYN - 782)) | (1L << (GEOMETRYTYPE - 782)) | (1L << (GEOMFROMTEXT - 782)) | (1L << (GEOMFROMWKB - 782)) | (1L << (GET_FORMAT - 782)) | (1L << (GET_LOCK - 782)) | (1L << (GLENGTH - 782)) | (1L << (GREATEST - 782)) | (1L << (GTID_SUBSET - 782)) | (1L << (GTID_SUBTRACT - 782)) | (1L << (HEX - 782)) | (1L << (IFNULL - 782)) | (1L << (INET6_ATON - 782)) | (1L << (INET6_NTOA - 782)) | (1L << (INET_ATON - 782)) | (1L << (INET_NTOA - 782)) | (1L << (INSTR - 782)) | (1L << (INTERIORRINGN - 782)) | (1L << (INTERSECTS - 782)) | (1L << (ISCLOSED - 782)) | (1L << (ISEMPTY - 782)) | (1L << (ISNULL - 782)) | (1L << (ISSIMPLE - 782)) | (1L << (IS_FREE_LOCK - 782)) | (1L << (IS_IPV4 - 782)) | (1L << (IS_IPV4_COMPAT - 782)) | (1L << (IS_IPV4_MAPPED - 782)) | (1L << (IS_IPV6 - 782)) | (1L << (IS_USED_LOCK - 782)) | (1L << (LAST_INSERT_ID - 782)) | (1L << (LCASE - 782)) | (1L << (LEAST - 782)) | (1L << (LENGTH - 782)) | (1L << (LINEFROMTEXT - 782)) | (1L << (LINEFROMWKB - 782)) | (1L << (LINESTRINGFROMTEXT - 782)) | (1L << (LINESTRINGFROMWKB - 782)) | (1L << (LN - 782)) | (1L << (LOAD_FILE - 782)) | (1L << (LOCATE - 782)) | (1L << (LOG - 782)) | (1L << (LOG10 - 782)) | (1L << (LOG2 - 782)) | (1L << (LOWER - 782)) | (1L << (LPAD - 782)) | (1L << (LTRIM - 782)) | (1L << (MAKEDATE - 782)) | (1L << (MAKETIME - 782)) | (1L << (MAKE_SET - 782)) | (1L << (MASTER_POS_WAIT - 782)) | (1L << (MBRCONTAINS - 782)) | (1L << (MBRDISJOINT - 782)) | (1L << (MBREQUAL - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)) | (1L << (MPOINTFROMTEXT - 846)) | (1L << (MPOINTFROMWKB - 846)) | (1L << (MPOLYFROMTEXT - 846)) | (1L << (MPOLYFROMWKB - 846)) | (1L << (MULTILINESTRINGFROMTEXT - 846)) | (1L << (MULTILINESTRINGFROMWKB - 846)) | (1L << (MULTIPOINTFROMTEXT - 846)) | (1L << (MULTIPOINTFROMWKB - 846)) | (1L << (MULTIPOLYGONFROMTEXT - 846)) | (1L << (MULTIPOLYGONFROMWKB - 846)) | (1L << (NAME_CONST - 846)) | (1L << (NULLIF - 846)) | (1L << (NUMGEOMETRIES - 846)) | (1L << (NUMINTERIORRINGS - 846)) | (1L << (NUMPOINTS - 846)) | (1L << (OCT - 846)) | (1L << (OCTET_LENGTH - 846)) | (1L << (ORD - 846)) | (1L << (OVERLAPS - 846)) | (1L << (PERIOD_ADD - 846)) | (1L << (PERIOD_DIFF - 846)) | (1L << (PI - 846)) | (1L << (POINTFROMTEXT - 846)) | (1L << (POINTFROMWKB - 846)) | (1L << (POINTN - 846)) | (1L << (POLYFROMTEXT - 846)) | (1L << (POLYFROMWKB - 846)) | (1L << (POLYGONFROMTEXT - 846)) | (1L << (POLYGONFROMWKB - 846)) | (1L << (POW - 846)) | (1L << (POWER - 846)) | (1L << (QUOTE - 846)) | (1L << (RADIANS - 846)) | (1L << (RAND - 846)) | (1L << (RANDOM_BYTES - 846)) | (1L << (RELEASE_LOCK - 846)) | (1L << (REVERSE - 846)) | (1L << (ROUND - 846)) | (1L << (ROW_COUNT - 846)) | (1L << (RPAD - 846)) | (1L << (RTRIM - 846)) | (1L << (SEC_TO_TIME - 846)) | (1L << (SESSION_USER - 846)) | (1L << (SHA - 846)) | (1L << (SHA1 - 846)) | (1L << (SHA2 - 846)) | (1L << (SCHEMA_NAME - 846)) | (1L << (SIGN - 846)) | (1L << (SIN - 846)) | (1L << (SLEEP - 846)) | (1L << (SOUNDEX - 846)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 846)) | (1L << (SQRT - 846)) | (1L << (SRID - 846)) | (1L << (STARTPOINT - 846)) | (1L << (STRCMP - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)) | (1L << (ST_CONTAINS - 910)) | (1L << (ST_CROSSES - 910)) | (1L << (ST_DIFFERENCE - 910)) | (1L << (ST_DIMENSION - 910)) | (1L << (ST_DISJOINT - 910)) | (1L << (ST_DISTANCE - 910)) | (1L << (ST_ENDPOINT - 910)) | (1L << (ST_ENVELOPE - 910)) | (1L << (ST_EQUALS - 910)) | (1L << (ST_EXTERIORRING - 910)) | (1L << (ST_GEOMCOLLFROMTEXT - 910)) | (1L << (ST_GEOMCOLLFROMTXT - 910)) | (1L << (ST_GEOMCOLLFROMWKB - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1L << (ST_GEOMETRYFROMTEXT - 910)) | (1L << (ST_GEOMETRYFROMWKB - 910)) | (1L << (ST_GEOMETRYN - 910)) | (1L << (ST_GEOMETRYTYPE - 910)) | (1L << (ST_GEOMFROMTEXT - 910)) | (1L << (ST_GEOMFROMWKB - 910)) | (1L << (ST_INTERIORRINGN - 910)) | (1L << (ST_INTERSECTION - 910)) | (1L << (ST_INTERSECTS - 910)) | (1L << (ST_ISCLOSED - 910)) | (1L << (ST_ISEMPTY - 910)) | (1L << (ST_ISSIMPLE - 910)) | (1L << (ST_LINEFROMTEXT - 910)) | (1L << (ST_LINEFROMWKB - 910)) | (1L << (ST_LINESTRINGFROMTEXT - 910)) | (1L << (ST_LINESTRINGFROMWKB - 910)) | (1L << (ST_NUMGEOMETRIES - 910)) | (1L << (ST_NUMINTERIORRING - 910)) | (1L << (ST_NUMINTERIORRINGS - 910)) | (1L << (ST_NUMPOINTS - 910)) | (1L << (ST_OVERLAPS - 910)) | (1L << (ST_POINTFROMTEXT - 910)) | (1L << (ST_POINTFROMWKB - 910)) | (1L << (ST_POINTN - 910)) | (1L << (ST_POLYFROMTEXT - 910)) | (1L << (ST_POLYFROMWKB - 910)) | (1L << (ST_POLYGONFROMTEXT - 910)) | (1L << (ST_POLYGONFROMWKB - 910)) | (1L << (ST_SRID - 910)) | (1L << (ST_STARTPOINT - 910)) | (1L << (ST_SYMDIFFERENCE - 910)) | (1L << (ST_TOUCHES - 910)) | (1L << (ST_UNION - 910)) | (1L << (ST_WITHIN - 910)) | (1L << (ST_X - 910)) | (1L << (ST_Y - 910)) | (1L << (SUBDATE - 910)) | (1L << (SUBSTRING_INDEX - 910)) | (1L << (SUBTIME - 910)) | (1L << (SYSTEM_USER - 910)) | (1L << (TAN - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)) | (1L << (TO_SECONDS - 974)) | (1L << (UCASE - 974)) | (1L << (UNCOMPRESS - 974)) | (1L << (UNCOMPRESSED_LENGTH - 974)) | (1L << (UNHEX - 974)) | (1L << (UNIX_TIMESTAMP - 974)) | (1L << (UPDATEXML - 974)) | (1L << (UPPER - 974)) | (1L << (UUID - 974)) | (1L << (UUID_SHORT - 974)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 974)) | (1L << (VERSION - 974)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1L << (WEEKDAY - 974)) | (1L << (WEEKOFYEAR - 974)) | (1L << (WEIGHT_STRING - 974)) | (1L << (WITHIN - 974)) | (1L << (YEARWEEK - 974)) | (1L << (Y_FUNCTION - 974)) | (1L << (X_FUNCTION - 974)) | (1L << (MOD - 974)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1040)) | (1L << (STRING_LITERAL - 1040)) | (1L << (ID - 1040)) | (1L << (REVERSE_QUOTE_ID - 1040)))) != 0)) {
					{
					setState(591);
					((UniqueKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				setState(595);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(594);
					indexType();
					}
				}

				setState(597);
				indexColumnNames();
				setState(601);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					setState(598);
					indexOption();
					}
					}
					setState(603);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				_localctx = new ForeignKeyTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(608);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(604);
					match(CONSTRAINT);
					setState(606);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (GROUP - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (ORDER - 105)) | (1L << (RIGHT - 105)) | (1L << (SCHEMA - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (DATE - 199)) | (1L << (TIME - 199)) | (1L << (TIMESTAMP - 199)) | (1L << (DATETIME - 199)) | (1L << (YEAR - 199)) | (1L << (TEXT - 199)) | (1L << (ENUM - 199)) | (1L << (SERIAL - 199)) | (1L << (JSON_VALID - 199)) | (1L << (JSON_SCHEMA_VALID - 199)) | (1L << (AVG - 199)) | (1L << (BIT_AND - 199)) | (1L << (BIT_OR - 199)) | (1L << (BIT_XOR - 199)) | (1L << (COUNT - 199)) | (1L << (GROUP_CONCAT - 199)) | (1L << (MAX - 199)) | (1L << (MIN - 199)) | (1L << (STD - 199)) | (1L << (STDDEV - 199)) | (1L << (STDDEV_POP - 199)) | (1L << (STDDEV_SAMP - 199)) | (1L << (SUM - 199)) | (1L << (VAR_POP - 199)) | (1L << (VAR_SAMP - 199)) | (1L << (VARIANCE - 199)) | (1L << (POSITION - 199)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)) | (1L << (BOOL - 270)) | (1L << (BOOLEAN - 270)) | (1L << (BTREE - 270)) | (1L << (CACHE - 270)) | (1L << (CASCADED - 270)) | (1L << (CHAIN - 270)) | (1L << (CHANGED - 270)) | (1L << (CHANNEL - 270)) | (1L << (CHECKSUM - 270)) | (1L << (PAGE_CHECKSUM - 270)) | (1L << (CIPHER - 270)) | (1L << (CLASS_ORIGIN - 270)) | (1L << (CLIENT - 270)) | (1L << (CLOSE - 270)) | (1L << (COALESCE - 270)) | (1L << (CODE - 270)) | (1L << (COLUMNS - 270)) | (1L << (COLUMN_FORMAT - 270)) | (1L << (COLUMN_NAME - 270)) | (1L << (COMMENT - 270)) | (1L << (COMMIT - 270)) | (1L << (COMPACT - 270)) | (1L << (COMPLETION - 270)) | (1L << (COMPRESSED - 270)) | (1L << (COMPRESSION - 270)) | (1L << (CONCURRENT - 270)) | (1L << (CONNECTION - 270)) | (1L << (CONSISTENT - 270)) | (1L << (CONSTRAINT_CATALOG - 270)) | (1L << (CONSTRAINT_SCHEMA - 270)) | (1L << (CONSTRAINT_NAME - 270)) | (1L << (CONTAINS - 270)) | (1L << (CONTEXT - 270)) | (1L << (CONTRIBUTORS - 270)) | (1L << (COPY - 270)) | (1L << (CPU - 270)) | (1L << (CURSOR_NAME - 270)) | (1L << (DATA - 270)) | (1L << (DATAFILE - 270)) | (1L << (DEALLOCATE - 270)) | (1L << (DEFAULT_AUTH - 270)) | (1L << (DEFINER - 270)) | (1L << (DELAY_KEY_WRITE - 270)) | (1L << (DES_KEY_FILE - 270)) | (1L << (DIRECTORY - 270)) | (1L << (DISABLE - 270)) | (1L << (DISCARD - 270)) | (1L << (DISK - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)) | (1L << (EVENTS - 334)) | (1L << (EVERY - 334)) | (1L << (EXCHANGE - 334)) | (1L << (EXCLUSIVE - 334)) | (1L << (EXPIRE - 334)) | (1L << (EXPORT - 334)) | (1L << (EXTENDED - 334)) | (1L << (EXTENT_SIZE - 334)) | (1L << (FAST - 334)) | (1L << (FAULTS - 334)) | (1L << (FIELDS - 334)) | (1L << (FILE_BLOCK_SIZE - 334)) | (1L << (FILTER - 334)) | (1L << (FIRST - 334)) | (1L << (FIXED - 334)) | (1L << (FLUSH - 334)) | (1L << (FOLLOWS - 334)) | (1L << (FOUND - 334)) | (1L << (FULL - 334)) | (1L << (FUNCTION - 334)) | (1L << (GENERAL - 334)) | (1L << (GLOBAL - 334)) | (1L << (GRANTS - 334)) | (1L << (GROUP_REPLICATION - 334)) | (1L << (HANDLER - 334)) | (1L << (HASH - 334)) | (1L << (HELP - 334)) | (1L << (HOST - 334)) | (1L << (HOSTS - 334)) | (1L << (IDENTIFIED - 334)) | (1L << (IGNORE_SERVER_IDS - 334)) | (1L << (IMPORT - 334)) | (1L << (INDEXES - 334)) | (1L << (INITIAL_SIZE - 334)) | (1L << (INPLACE - 334)) | (1L << (INSERT_METHOD - 334)) | (1L << (INSTALL - 334)) | (1L << (INSTANCE - 334)) | (1L << (INVISIBLE - 334)) | (1L << (INVOKER - 334)) | (1L << (IO - 334)) | (1L << (IO_THREAD - 334)) | (1L << (IPC - 334)) | (1L << (ISOLATION - 334)) | (1L << (ISSUER - 334)) | (1L << (JSON - 334)) | (1L << (KEY_BLOCK_SIZE - 334)) | (1L << (LANGUAGE - 334)) | (1L << (LAST - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)) | (1L << (MASTER_LOG_POS - 398)) | (1L << (MASTER_PASSWORD - 398)) | (1L << (MASTER_PORT - 398)) | (1L << (MASTER_RETRY_COUNT - 398)) | (1L << (MASTER_SSL - 398)) | (1L << (MASTER_SSL_CA - 398)) | (1L << (MASTER_SSL_CAPATH - 398)) | (1L << (MASTER_SSL_CERT - 398)) | (1L << (MASTER_SSL_CIPHER - 398)) | (1L << (MASTER_SSL_CRL - 398)) | (1L << (MASTER_SSL_CRLPATH - 398)) | (1L << (MASTER_SSL_KEY - 398)) | (1L << (MASTER_TLS_VERSION - 398)) | (1L << (MASTER_USER - 398)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 398)) | (1L << (MAX_QUERIES_PER_HOUR - 398)) | (1L << (MAX_ROWS - 398)) | (1L << (MAX_SIZE - 398)) | (1L << (MAX_UPDATES_PER_HOUR - 398)) | (1L << (MAX_USER_CONNECTIONS - 398)) | (1L << (MEDIUM - 398)) | (1L << (MEMBER - 398)) | (1L << (MERGE - 398)) | (1L << (MESSAGE_TEXT - 398)) | (1L << (MID - 398)) | (1L << (MIGRATE - 398)) | (1L << (MIN_ROWS - 398)) | (1L << (MODE - 398)) | (1L << (MODIFY - 398)) | (1L << (MUTEX - 398)) | (1L << (MYSQL - 398)) | (1L << (MYSQL_ERRNO - 398)) | (1L << (NAME - 398)) | (1L << (NAMES - 398)) | (1L << (NCHAR - 398)) | (1L << (NEVER - 398)) | (1L << (NEXT - 398)) | (1L << (NO - 398)) | (1L << (NODEGROUP - 398)) | (1L << (NONE - 398)) | (1L << (OFFLINE - 398)) | (1L << (OFFSET - 398)) | (1L << (OF - 398)) | (1L << (OJ - 398)) | (1L << (OLD_PASSWORD - 398)) | (1L << (ONE - 398)) | (1L << (ONLINE - 398)) | (1L << (ONLY - 398)) | (1L << (OPEN - 398)) | (1L << (OPTIMIZER_COSTS - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)) | (1L << (PORT - 462)) | (1L << (PRECEDES - 462)) | (1L << (PREPARE - 462)) | (1L << (PRESERVE - 462)) | (1L << (PREV - 462)) | (1L << (PROCESSLIST - 462)) | (1L << (PROFILE - 462)) | (1L << (PROFILES - 462)) | (1L << (PROXY - 462)) | (1L << (QUERY - 462)) | (1L << (QUICK - 462)) | (1L << (REBUILD - 462)) | (1L << (RECOVER - 462)) | (1L << (REDO_BUFFER_SIZE - 462)) | (1L << (REDUNDANT - 462)) | (1L << (RELAY - 462)) | (1L << (RELAY_LOG_FILE - 462)) | (1L << (RELAY_LOG_POS - 462)) | (1L << (RELAYLOG - 462)) | (1L << (REMOVE - 462)) | (1L << (REORGANIZE - 462)) | (1L << (REPAIR - 462)) | (1L << (REPLICATE_DO_DB - 462)) | (1L << (REPLICATE_DO_TABLE - 462)) | (1L << (REPLICATE_IGNORE_DB - 462)) | (1L << (REPLICATE_IGNORE_TABLE - 462)) | (1L << (REPLICATE_REWRITE_DB - 462)) | (1L << (REPLICATE_WILD_DO_TABLE - 462)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 462)) | (1L << (REPLICATION - 462)) | (1L << (RESET - 462)) | (1L << (RESUME - 462)) | (1L << (RETURNED_SQLSTATE - 462)) | (1L << (RETURNS - 462)) | (1L << (ROLE - 462)) | (1L << (ROLLBACK - 462)) | (1L << (ROLLUP - 462)) | (1L << (ROTATE - 462)) | (1L << (ROW - 462)) | (1L << (ROWS - 462)) | (1L << (ROW_FORMAT - 462)) | (1L << (SAVEPOINT - 462)) | (1L << (SCHEDULE - 462)) | (1L << (SECURITY - 462)) | (1L << (SERVER - 462)) | (1L << (SESSION - 462)) | (1L << (SHARE - 462)) | (1L << (SHARED - 462)) | (1L << (SIGNED - 462)) | (1L << (SIMPLE - 462)) | (1L << (SLAVE - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)) | (1L << (SQL_CACHE - 526)) | (1L << (SQL_NO_CACHE - 526)) | (1L << (SQL_THREAD - 526)) | (1L << (START - 526)) | (1L << (STARTS - 526)) | (1L << (STATS_AUTO_RECALC - 526)) | (1L << (STATS_PERSISTENT - 526)) | (1L << (STATS_SAMPLE_PAGES - 526)) | (1L << (STATUS - 526)) | (1L << (STOP - 526)) | (1L << (STORAGE - 526)) | (1L << (STRING - 526)) | (1L << (SUBCLASS_ORIGIN - 526)) | (1L << (SUBJECT - 526)) | (1L << (SUBPARTITION - 526)) | (1L << (SUBPARTITIONS - 526)) | (1L << (SUSPEND - 526)) | (1L << (SWAPS - 526)) | (1L << (SWITCHES - 526)) | (1L << (TABLE_NAME - 526)) | (1L << (TABLESPACE - 526)) | (1L << (TEMPORARY - 526)) | (1L << (TEMPTABLE - 526)) | (1L << (THAN - 526)) | (1L << (TRADITIONAL - 526)) | (1L << (TRANSACTION - 526)) | (1L << (TRANSACTIONAL - 526)) | (1L << (TRIGGERS - 526)) | (1L << (TRUNCATE - 526)) | (1L << (UNDEFINED - 526)) | (1L << (UNDOFILE - 526)) | (1L << (UNDO_BUFFER_SIZE - 526)) | (1L << (UNINSTALL - 526)) | (1L << (UNKNOWN - 526)) | (1L << (UNTIL - 526)) | (1L << (UPGRADE - 526)) | (1L << (USER - 526)) | (1L << (USE_FRM - 526)) | (1L << (USER_RESOURCES - 526)) | (1L << (VALIDATION - 526)) | (1L << (VALUE - 526)) | (1L << (VARIABLES - 526)) | (1L << (VIEW - 526)) | (1L << (VISIBLE - 526)) | (1L << (WAIT - 526)) | (1L << (WARNINGS - 526)) | (1L << (WITHOUT - 526)) | (1L << (WORK - 526)) | (1L << (WRAPPER - 526)) | (1L << (X509 - 526)) | (1L << (XA - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (XML - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)) | (1L << (DAY - 590)) | (1L << (HOUR - 590)) | (1L << (MINUTE - 590)) | (1L << (WEEK - 590)) | (1L << (SECOND - 590)) | (1L << (MICROSECOND - 590)) | (1L << (TABLES - 590)) | (1L << (ROUTINE - 590)) | (1L << (EXECUTE - 590)) | (1L << (FILE - 590)) | (1L << (PROCESS - 590)) | (1L << (RELOAD - 590)) | (1L << (SHUTDOWN - 590)) | (1L << (SUPER - 590)) | (1L << (PRIVILEGES - 590)) | (1L << (AUDIT_ADMIN - 590)) | (1L << (BACKUP_ADMIN - 590)) | (1L << (BINLOG_ADMIN - 590)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 590)) | (1L << (CLONE_ADMIN - 590)) | (1L << (CONNECTION_ADMIN - 590)) | (1L << (ENCRYPTION_KEY_ADMIN - 590)) | (1L << (FIREWALL_ADMIN - 590)) | (1L << (FIREWALL_USER - 590)) | (1L << (GROUP_REPLICATION_ADMIN - 590)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 590)) | (1L << (NDB_STORED_USER - 590)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 590)) | (1L << (REPLICATION_APPLIER - 590)) | (1L << (REPLICATION_SLAVE_ADMIN - 590)) | (1L << (RESOURCE_GROUP_ADMIN - 590)) | (1L << (RESOURCE_GROUP_USER - 590)) | (1L << (ROLE_ADMIN - 590)) | (1L << (SESSION_VARIABLES_ADMIN - 590)) | (1L << (SET_USER_ID - 590)) | (1L << (SHOW_ROUTINE - 590)) | (1L << (SYSTEM_VARIABLES_ADMIN - 590)) | (1L << (TABLE_ENCRYPTION_ADMIN - 590)) | (1L << (VERSION_TOKEN_ADMIN - 590)) | (1L << (XA_RECOVER_ADMIN - 590)) | (1L << (ARMSCII8 - 590)) | (1L << (ASCII - 590)) | (1L << (BIG5 - 590)) | (1L << (CP1250 - 590)) | (1L << (CP1251 - 590)) | (1L << (CP1256 - 590)) | (1L << (CP1257 - 590)) | (1L << (CP850 - 590)) | (1L << (CP852 - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)) | (1L << (GREEK - 654)) | (1L << (HEBREW - 654)) | (1L << (HP8 - 654)) | (1L << (KEYBCS2 - 654)) | (1L << (KOI8R - 654)) | (1L << (KOI8U - 654)) | (1L << (LATIN1 - 654)) | (1L << (LATIN2 - 654)) | (1L << (LATIN5 - 654)) | (1L << (LATIN7 - 654)) | (1L << (MACCE - 654)) | (1L << (MACROMAN - 654)) | (1L << (SJIS - 654)) | (1L << (SWE7 - 654)) | (1L << (TIS620 - 654)) | (1L << (UCS2 - 654)) | (1L << (UJIS - 654)) | (1L << (UTF16 - 654)) | (1L << (UTF16LE - 654)) | (1L << (UTF32 - 654)) | (1L << (UTF8 - 654)) | (1L << (UTF8MB3 - 654)) | (1L << (UTF8MB4 - 654)) | (1L << (ARCHIVE - 654)) | (1L << (BLACKHOLE - 654)) | (1L << (CSV - 654)) | (1L << (FEDERATED - 654)) | (1L << (INNODB - 654)) | (1L << (MEMORY - 654)) | (1L << (MRG_MYISAM - 654)) | (1L << (MYISAM - 654)) | (1L << (NDB - 654)) | (1L << (NDBCLUSTER - 654)) | (1L << (PERFORMANCE_SCHEMA - 654)) | (1L << (TOKUDB - 654)) | (1L << (REPEATABLE - 654)) | (1L << (COMMITTED - 654)) | (1L << (UNCOMMITTED - 654)) | (1L << (SERIALIZABLE - 654)) | (1L << (GEOMETRYCOLLECTION - 654)) | (1L << (LINESTRING - 654)) | (1L << (MULTILINESTRING - 654)) | (1L << (MULTIPOINT - 654)) | (1L << (MULTIPOLYGON - 654)) | (1L << (POINT - 654)) | (1L << (POLYGON - 654)) | (1L << (ABS - 654)) | (1L << (ACOS - 654)) | (1L << (ADDDATE - 654)) | (1L << (ADDTIME - 654)) | (1L << (AES_DECRYPT - 654)) | (1L << (AES_ENCRYPT - 654)) | (1L << (AREA - 654)) | (1L << (ASBINARY - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)) | (1L << (ASYMMETRIC_VERIFY - 718)) | (1L << (ATAN - 718)) | (1L << (ATAN2 - 718)) | (1L << (BENCHMARK - 718)) | (1L << (BIN - 718)) | (1L << (BIT_COUNT - 718)) | (1L << (BIT_LENGTH - 718)) | (1L << (BUFFER - 718)) | (1L << (CATALOG_NAME - 718)) | (1L << (CEIL - 718)) | (1L << (CEILING - 718)) | (1L << (CENTROID - 718)) | (1L << (CHARACTER_LENGTH - 718)) | (1L << (CHARSET - 718)) | (1L << (CHAR_LENGTH - 718)) | (1L << (COERCIBILITY - 718)) | (1L << (COLLATION - 718)) | (1L << (COMPRESS - 718)) | (1L << (CONCAT - 718)) | (1L << (CONCAT_WS - 718)) | (1L << (CONNECTION_ID - 718)) | (1L << (CONV - 718)) | (1L << (CONVERT_TZ - 718)) | (1L << (COS - 718)) | (1L << (COT - 718)) | (1L << (CRC32 - 718)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1L << (CREATE_DH_PARAMETERS - 718)) | (1L << (CREATE_DIGEST - 718)) | (1L << (CROSSES - 718)) | (1L << (DATEDIFF - 718)) | (1L << (DATE_FORMAT - 718)) | (1L << (DAYNAME - 718)) | (1L << (DAYOFMONTH - 718)) | (1L << (DAYOFWEEK - 718)) | (1L << (DAYOFYEAR - 718)) | (1L << (DECODE - 718)) | (1L << (DEGREES - 718)) | (1L << (DES_DECRYPT - 718)) | (1L << (DES_ENCRYPT - 718)) | (1L << (DIMENSION - 718)) | (1L << (DISJOINT - 718)) | (1L << (ELT - 718)) | (1L << (ENCODE - 718)) | (1L << (ENCRYPT - 718)) | (1L << (ENDPOINT - 718)) | (1L << (ENVELOPE - 718)) | (1L << (EQUALS - 718)) | (1L << (EXP - 718)) | (1L << (EXPORT_SET - 718)) | (1L << (EXTERIORRING - 718)) | (1L << (EXTRACTVALUE - 718)) | (1L << (FIELD - 718)) | (1L << (FIND_IN_SET - 718)) | (1L << (FLOOR - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 782)) | (1L << (GEOMETRYFROMTEXT - 782)) | (1L << (GEOMETRYFROMWKB - 782)) | (1L << (GEOMETRYN - 782)) | (1L << (GEOMETRYTYPE - 782)) | (1L << (GEOMFROMTEXT - 782)) | (1L << (GEOMFROMWKB - 782)) | (1L << (GET_FORMAT - 782)) | (1L << (GET_LOCK - 782)) | (1L << (GLENGTH - 782)) | (1L << (GREATEST - 782)) | (1L << (GTID_SUBSET - 782)) | (1L << (GTID_SUBTRACT - 782)) | (1L << (HEX - 782)) | (1L << (IFNULL - 782)) | (1L << (INET6_ATON - 782)) | (1L << (INET6_NTOA - 782)) | (1L << (INET_ATON - 782)) | (1L << (INET_NTOA - 782)) | (1L << (INSTR - 782)) | (1L << (INTERIORRINGN - 782)) | (1L << (INTERSECTS - 782)) | (1L << (ISCLOSED - 782)) | (1L << (ISEMPTY - 782)) | (1L << (ISNULL - 782)) | (1L << (ISSIMPLE - 782)) | (1L << (IS_FREE_LOCK - 782)) | (1L << (IS_IPV4 - 782)) | (1L << (IS_IPV4_COMPAT - 782)) | (1L << (IS_IPV4_MAPPED - 782)) | (1L << (IS_IPV6 - 782)) | (1L << (IS_USED_LOCK - 782)) | (1L << (LAST_INSERT_ID - 782)) | (1L << (LCASE - 782)) | (1L << (LEAST - 782)) | (1L << (LENGTH - 782)) | (1L << (LINEFROMTEXT - 782)) | (1L << (LINEFROMWKB - 782)) | (1L << (LINESTRINGFROMTEXT - 782)) | (1L << (LINESTRINGFROMWKB - 782)) | (1L << (LN - 782)) | (1L << (LOAD_FILE - 782)) | (1L << (LOCATE - 782)) | (1L << (LOG - 782)) | (1L << (LOG10 - 782)) | (1L << (LOG2 - 782)) | (1L << (LOWER - 782)) | (1L << (LPAD - 782)) | (1L << (LTRIM - 782)) | (1L << (MAKEDATE - 782)) | (1L << (MAKETIME - 782)) | (1L << (MAKE_SET - 782)) | (1L << (MASTER_POS_WAIT - 782)) | (1L << (MBRCONTAINS - 782)) | (1L << (MBRDISJOINT - 782)) | (1L << (MBREQUAL - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)) | (1L << (MPOINTFROMTEXT - 846)) | (1L << (MPOINTFROMWKB - 846)) | (1L << (MPOLYFROMTEXT - 846)) | (1L << (MPOLYFROMWKB - 846)) | (1L << (MULTILINESTRINGFROMTEXT - 846)) | (1L << (MULTILINESTRINGFROMWKB - 846)) | (1L << (MULTIPOINTFROMTEXT - 846)) | (1L << (MULTIPOINTFROMWKB - 846)) | (1L << (MULTIPOLYGONFROMTEXT - 846)) | (1L << (MULTIPOLYGONFROMWKB - 846)) | (1L << (NAME_CONST - 846)) | (1L << (NULLIF - 846)) | (1L << (NUMGEOMETRIES - 846)) | (1L << (NUMINTERIORRINGS - 846)) | (1L << (NUMPOINTS - 846)) | (1L << (OCT - 846)) | (1L << (OCTET_LENGTH - 846)) | (1L << (ORD - 846)) | (1L << (OVERLAPS - 846)) | (1L << (PERIOD_ADD - 846)) | (1L << (PERIOD_DIFF - 846)) | (1L << (PI - 846)) | (1L << (POINTFROMTEXT - 846)) | (1L << (POINTFROMWKB - 846)) | (1L << (POINTN - 846)) | (1L << (POLYFROMTEXT - 846)) | (1L << (POLYFROMWKB - 846)) | (1L << (POLYGONFROMTEXT - 846)) | (1L << (POLYGONFROMWKB - 846)) | (1L << (POW - 846)) | (1L << (POWER - 846)) | (1L << (QUOTE - 846)) | (1L << (RADIANS - 846)) | (1L << (RAND - 846)) | (1L << (RANDOM_BYTES - 846)) | (1L << (RELEASE_LOCK - 846)) | (1L << (REVERSE - 846)) | (1L << (ROUND - 846)) | (1L << (ROW_COUNT - 846)) | (1L << (RPAD - 846)) | (1L << (RTRIM - 846)) | (1L << (SEC_TO_TIME - 846)) | (1L << (SESSION_USER - 846)) | (1L << (SHA - 846)) | (1L << (SHA1 - 846)) | (1L << (SHA2 - 846)) | (1L << (SCHEMA_NAME - 846)) | (1L << (SIGN - 846)) | (1L << (SIN - 846)) | (1L << (SLEEP - 846)) | (1L << (SOUNDEX - 846)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 846)) | (1L << (SQRT - 846)) | (1L << (SRID - 846)) | (1L << (STARTPOINT - 846)) | (1L << (STRCMP - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)) | (1L << (ST_CONTAINS - 910)) | (1L << (ST_CROSSES - 910)) | (1L << (ST_DIFFERENCE - 910)) | (1L << (ST_DIMENSION - 910)) | (1L << (ST_DISJOINT - 910)) | (1L << (ST_DISTANCE - 910)) | (1L << (ST_ENDPOINT - 910)) | (1L << (ST_ENVELOPE - 910)) | (1L << (ST_EQUALS - 910)) | (1L << (ST_EXTERIORRING - 910)) | (1L << (ST_GEOMCOLLFROMTEXT - 910)) | (1L << (ST_GEOMCOLLFROMTXT - 910)) | (1L << (ST_GEOMCOLLFROMWKB - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1L << (ST_GEOMETRYFROMTEXT - 910)) | (1L << (ST_GEOMETRYFROMWKB - 910)) | (1L << (ST_GEOMETRYN - 910)) | (1L << (ST_GEOMETRYTYPE - 910)) | (1L << (ST_GEOMFROMTEXT - 910)) | (1L << (ST_GEOMFROMWKB - 910)) | (1L << (ST_INTERIORRINGN - 910)) | (1L << (ST_INTERSECTION - 910)) | (1L << (ST_INTERSECTS - 910)) | (1L << (ST_ISCLOSED - 910)) | (1L << (ST_ISEMPTY - 910)) | (1L << (ST_ISSIMPLE - 910)) | (1L << (ST_LINEFROMTEXT - 910)) | (1L << (ST_LINEFROMWKB - 910)) | (1L << (ST_LINESTRINGFROMTEXT - 910)) | (1L << (ST_LINESTRINGFROMWKB - 910)) | (1L << (ST_NUMGEOMETRIES - 910)) | (1L << (ST_NUMINTERIORRING - 910)) | (1L << (ST_NUMINTERIORRINGS - 910)) | (1L << (ST_NUMPOINTS - 910)) | (1L << (ST_OVERLAPS - 910)) | (1L << (ST_POINTFROMTEXT - 910)) | (1L << (ST_POINTFROMWKB - 910)) | (1L << (ST_POINTN - 910)) | (1L << (ST_POLYFROMTEXT - 910)) | (1L << (ST_POLYFROMWKB - 910)) | (1L << (ST_POLYGONFROMTEXT - 910)) | (1L << (ST_POLYGONFROMWKB - 910)) | (1L << (ST_SRID - 910)) | (1L << (ST_STARTPOINT - 910)) | (1L << (ST_SYMDIFFERENCE - 910)) | (1L << (ST_TOUCHES - 910)) | (1L << (ST_UNION - 910)) | (1L << (ST_WITHIN - 910)) | (1L << (ST_X - 910)) | (1L << (ST_Y - 910)) | (1L << (SUBDATE - 910)) | (1L << (SUBSTRING_INDEX - 910)) | (1L << (SUBTIME - 910)) | (1L << (SYSTEM_USER - 910)) | (1L << (TAN - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)) | (1L << (TO_SECONDS - 974)) | (1L << (UCASE - 974)) | (1L << (UNCOMPRESS - 974)) | (1L << (UNCOMPRESSED_LENGTH - 974)) | (1L << (UNHEX - 974)) | (1L << (UNIX_TIMESTAMP - 974)) | (1L << (UPDATEXML - 974)) | (1L << (UPPER - 974)) | (1L << (UUID - 974)) | (1L << (UUID_SHORT - 974)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 974)) | (1L << (VERSION - 974)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1L << (WEEKDAY - 974)) | (1L << (WEEKOFYEAR - 974)) | (1L << (WEIGHT_STRING - 974)) | (1L << (WITHIN - 974)) | (1L << (YEARWEEK - 974)) | (1L << (Y_FUNCTION - 974)) | (1L << (X_FUNCTION - 974)) | (1L << (MOD - 974)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1040)) | (1L << (STRING_LITERAL - 1040)) | (1L << (ID - 1040)) | (1L << (REVERSE_QUOTE_ID - 1040)))) != 0)) {
						{
						setState(605);
						((ForeignKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(610);
				match(FOREIGN);
				setState(611);
				match(KEY);
				setState(613);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (GROUP - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (ORDER - 105)) | (1L << (RIGHT - 105)) | (1L << (SCHEMA - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (DATE - 199)) | (1L << (TIME - 199)) | (1L << (TIMESTAMP - 199)) | (1L << (DATETIME - 199)) | (1L << (YEAR - 199)) | (1L << (TEXT - 199)) | (1L << (ENUM - 199)) | (1L << (SERIAL - 199)) | (1L << (JSON_VALID - 199)) | (1L << (JSON_SCHEMA_VALID - 199)) | (1L << (AVG - 199)) | (1L << (BIT_AND - 199)) | (1L << (BIT_OR - 199)) | (1L << (BIT_XOR - 199)) | (1L << (COUNT - 199)) | (1L << (GROUP_CONCAT - 199)) | (1L << (MAX - 199)) | (1L << (MIN - 199)) | (1L << (STD - 199)) | (1L << (STDDEV - 199)) | (1L << (STDDEV_POP - 199)) | (1L << (STDDEV_SAMP - 199)) | (1L << (SUM - 199)) | (1L << (VAR_POP - 199)) | (1L << (VAR_SAMP - 199)) | (1L << (VARIANCE - 199)) | (1L << (POSITION - 199)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)) | (1L << (BOOL - 270)) | (1L << (BOOLEAN - 270)) | (1L << (BTREE - 270)) | (1L << (CACHE - 270)) | (1L << (CASCADED - 270)) | (1L << (CHAIN - 270)) | (1L << (CHANGED - 270)) | (1L << (CHANNEL - 270)) | (1L << (CHECKSUM - 270)) | (1L << (PAGE_CHECKSUM - 270)) | (1L << (CIPHER - 270)) | (1L << (CLASS_ORIGIN - 270)) | (1L << (CLIENT - 270)) | (1L << (CLOSE - 270)) | (1L << (COALESCE - 270)) | (1L << (CODE - 270)) | (1L << (COLUMNS - 270)) | (1L << (COLUMN_FORMAT - 270)) | (1L << (COLUMN_NAME - 270)) | (1L << (COMMENT - 270)) | (1L << (COMMIT - 270)) | (1L << (COMPACT - 270)) | (1L << (COMPLETION - 270)) | (1L << (COMPRESSED - 270)) | (1L << (COMPRESSION - 270)) | (1L << (CONCURRENT - 270)) | (1L << (CONNECTION - 270)) | (1L << (CONSISTENT - 270)) | (1L << (CONSTRAINT_CATALOG - 270)) | (1L << (CONSTRAINT_SCHEMA - 270)) | (1L << (CONSTRAINT_NAME - 270)) | (1L << (CONTAINS - 270)) | (1L << (CONTEXT - 270)) | (1L << (CONTRIBUTORS - 270)) | (1L << (COPY - 270)) | (1L << (CPU - 270)) | (1L << (CURSOR_NAME - 270)) | (1L << (DATA - 270)) | (1L << (DATAFILE - 270)) | (1L << (DEALLOCATE - 270)) | (1L << (DEFAULT_AUTH - 270)) | (1L << (DEFINER - 270)) | (1L << (DELAY_KEY_WRITE - 270)) | (1L << (DES_KEY_FILE - 270)) | (1L << (DIRECTORY - 270)) | (1L << (DISABLE - 270)) | (1L << (DISCARD - 270)) | (1L << (DISK - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)) | (1L << (EVENTS - 334)) | (1L << (EVERY - 334)) | (1L << (EXCHANGE - 334)) | (1L << (EXCLUSIVE - 334)) | (1L << (EXPIRE - 334)) | (1L << (EXPORT - 334)) | (1L << (EXTENDED - 334)) | (1L << (EXTENT_SIZE - 334)) | (1L << (FAST - 334)) | (1L << (FAULTS - 334)) | (1L << (FIELDS - 334)) | (1L << (FILE_BLOCK_SIZE - 334)) | (1L << (FILTER - 334)) | (1L << (FIRST - 334)) | (1L << (FIXED - 334)) | (1L << (FLUSH - 334)) | (1L << (FOLLOWS - 334)) | (1L << (FOUND - 334)) | (1L << (FULL - 334)) | (1L << (FUNCTION - 334)) | (1L << (GENERAL - 334)) | (1L << (GLOBAL - 334)) | (1L << (GRANTS - 334)) | (1L << (GROUP_REPLICATION - 334)) | (1L << (HANDLER - 334)) | (1L << (HASH - 334)) | (1L << (HELP - 334)) | (1L << (HOST - 334)) | (1L << (HOSTS - 334)) | (1L << (IDENTIFIED - 334)) | (1L << (IGNORE_SERVER_IDS - 334)) | (1L << (IMPORT - 334)) | (1L << (INDEXES - 334)) | (1L << (INITIAL_SIZE - 334)) | (1L << (INPLACE - 334)) | (1L << (INSERT_METHOD - 334)) | (1L << (INSTALL - 334)) | (1L << (INSTANCE - 334)) | (1L << (INVISIBLE - 334)) | (1L << (INVOKER - 334)) | (1L << (IO - 334)) | (1L << (IO_THREAD - 334)) | (1L << (IPC - 334)) | (1L << (ISOLATION - 334)) | (1L << (ISSUER - 334)) | (1L << (JSON - 334)) | (1L << (KEY_BLOCK_SIZE - 334)) | (1L << (LANGUAGE - 334)) | (1L << (LAST - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)) | (1L << (MASTER_LOG_POS - 398)) | (1L << (MASTER_PASSWORD - 398)) | (1L << (MASTER_PORT - 398)) | (1L << (MASTER_RETRY_COUNT - 398)) | (1L << (MASTER_SSL - 398)) | (1L << (MASTER_SSL_CA - 398)) | (1L << (MASTER_SSL_CAPATH - 398)) | (1L << (MASTER_SSL_CERT - 398)) | (1L << (MASTER_SSL_CIPHER - 398)) | (1L << (MASTER_SSL_CRL - 398)) | (1L << (MASTER_SSL_CRLPATH - 398)) | (1L << (MASTER_SSL_KEY - 398)) | (1L << (MASTER_TLS_VERSION - 398)) | (1L << (MASTER_USER - 398)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 398)) | (1L << (MAX_QUERIES_PER_HOUR - 398)) | (1L << (MAX_ROWS - 398)) | (1L << (MAX_SIZE - 398)) | (1L << (MAX_UPDATES_PER_HOUR - 398)) | (1L << (MAX_USER_CONNECTIONS - 398)) | (1L << (MEDIUM - 398)) | (1L << (MEMBER - 398)) | (1L << (MERGE - 398)) | (1L << (MESSAGE_TEXT - 398)) | (1L << (MID - 398)) | (1L << (MIGRATE - 398)) | (1L << (MIN_ROWS - 398)) | (1L << (MODE - 398)) | (1L << (MODIFY - 398)) | (1L << (MUTEX - 398)) | (1L << (MYSQL - 398)) | (1L << (MYSQL_ERRNO - 398)) | (1L << (NAME - 398)) | (1L << (NAMES - 398)) | (1L << (NCHAR - 398)) | (1L << (NEVER - 398)) | (1L << (NEXT - 398)) | (1L << (NO - 398)) | (1L << (NODEGROUP - 398)) | (1L << (NONE - 398)) | (1L << (OFFLINE - 398)) | (1L << (OFFSET - 398)) | (1L << (OF - 398)) | (1L << (OJ - 398)) | (1L << (OLD_PASSWORD - 398)) | (1L << (ONE - 398)) | (1L << (ONLINE - 398)) | (1L << (ONLY - 398)) | (1L << (OPEN - 398)) | (1L << (OPTIMIZER_COSTS - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)) | (1L << (PORT - 462)) | (1L << (PRECEDES - 462)) | (1L << (PREPARE - 462)) | (1L << (PRESERVE - 462)) | (1L << (PREV - 462)) | (1L << (PROCESSLIST - 462)) | (1L << (PROFILE - 462)) | (1L << (PROFILES - 462)) | (1L << (PROXY - 462)) | (1L << (QUERY - 462)) | (1L << (QUICK - 462)) | (1L << (REBUILD - 462)) | (1L << (RECOVER - 462)) | (1L << (REDO_BUFFER_SIZE - 462)) | (1L << (REDUNDANT - 462)) | (1L << (RELAY - 462)) | (1L << (RELAY_LOG_FILE - 462)) | (1L << (RELAY_LOG_POS - 462)) | (1L << (RELAYLOG - 462)) | (1L << (REMOVE - 462)) | (1L << (REORGANIZE - 462)) | (1L << (REPAIR - 462)) | (1L << (REPLICATE_DO_DB - 462)) | (1L << (REPLICATE_DO_TABLE - 462)) | (1L << (REPLICATE_IGNORE_DB - 462)) | (1L << (REPLICATE_IGNORE_TABLE - 462)) | (1L << (REPLICATE_REWRITE_DB - 462)) | (1L << (REPLICATE_WILD_DO_TABLE - 462)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 462)) | (1L << (REPLICATION - 462)) | (1L << (RESET - 462)) | (1L << (RESUME - 462)) | (1L << (RETURNED_SQLSTATE - 462)) | (1L << (RETURNS - 462)) | (1L << (ROLE - 462)) | (1L << (ROLLBACK - 462)) | (1L << (ROLLUP - 462)) | (1L << (ROTATE - 462)) | (1L << (ROW - 462)) | (1L << (ROWS - 462)) | (1L << (ROW_FORMAT - 462)) | (1L << (SAVEPOINT - 462)) | (1L << (SCHEDULE - 462)) | (1L << (SECURITY - 462)) | (1L << (SERVER - 462)) | (1L << (SESSION - 462)) | (1L << (SHARE - 462)) | (1L << (SHARED - 462)) | (1L << (SIGNED - 462)) | (1L << (SIMPLE - 462)) | (1L << (SLAVE - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)) | (1L << (SQL_CACHE - 526)) | (1L << (SQL_NO_CACHE - 526)) | (1L << (SQL_THREAD - 526)) | (1L << (START - 526)) | (1L << (STARTS - 526)) | (1L << (STATS_AUTO_RECALC - 526)) | (1L << (STATS_PERSISTENT - 526)) | (1L << (STATS_SAMPLE_PAGES - 526)) | (1L << (STATUS - 526)) | (1L << (STOP - 526)) | (1L << (STORAGE - 526)) | (1L << (STRING - 526)) | (1L << (SUBCLASS_ORIGIN - 526)) | (1L << (SUBJECT - 526)) | (1L << (SUBPARTITION - 526)) | (1L << (SUBPARTITIONS - 526)) | (1L << (SUSPEND - 526)) | (1L << (SWAPS - 526)) | (1L << (SWITCHES - 526)) | (1L << (TABLE_NAME - 526)) | (1L << (TABLESPACE - 526)) | (1L << (TEMPORARY - 526)) | (1L << (TEMPTABLE - 526)) | (1L << (THAN - 526)) | (1L << (TRADITIONAL - 526)) | (1L << (TRANSACTION - 526)) | (1L << (TRANSACTIONAL - 526)) | (1L << (TRIGGERS - 526)) | (1L << (TRUNCATE - 526)) | (1L << (UNDEFINED - 526)) | (1L << (UNDOFILE - 526)) | (1L << (UNDO_BUFFER_SIZE - 526)) | (1L << (UNINSTALL - 526)) | (1L << (UNKNOWN - 526)) | (1L << (UNTIL - 526)) | (1L << (UPGRADE - 526)) | (1L << (USER - 526)) | (1L << (USE_FRM - 526)) | (1L << (USER_RESOURCES - 526)) | (1L << (VALIDATION - 526)) | (1L << (VALUE - 526)) | (1L << (VARIABLES - 526)) | (1L << (VIEW - 526)) | (1L << (VISIBLE - 526)) | (1L << (WAIT - 526)) | (1L << (WARNINGS - 526)) | (1L << (WITHOUT - 526)) | (1L << (WORK - 526)) | (1L << (WRAPPER - 526)) | (1L << (X509 - 526)) | (1L << (XA - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (XML - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)) | (1L << (DAY - 590)) | (1L << (HOUR - 590)) | (1L << (MINUTE - 590)) | (1L << (WEEK - 590)) | (1L << (SECOND - 590)) | (1L << (MICROSECOND - 590)) | (1L << (TABLES - 590)) | (1L << (ROUTINE - 590)) | (1L << (EXECUTE - 590)) | (1L << (FILE - 590)) | (1L << (PROCESS - 590)) | (1L << (RELOAD - 590)) | (1L << (SHUTDOWN - 590)) | (1L << (SUPER - 590)) | (1L << (PRIVILEGES - 590)) | (1L << (AUDIT_ADMIN - 590)) | (1L << (BACKUP_ADMIN - 590)) | (1L << (BINLOG_ADMIN - 590)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 590)) | (1L << (CLONE_ADMIN - 590)) | (1L << (CONNECTION_ADMIN - 590)) | (1L << (ENCRYPTION_KEY_ADMIN - 590)) | (1L << (FIREWALL_ADMIN - 590)) | (1L << (FIREWALL_USER - 590)) | (1L << (GROUP_REPLICATION_ADMIN - 590)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 590)) | (1L << (NDB_STORED_USER - 590)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 590)) | (1L << (REPLICATION_APPLIER - 590)) | (1L << (REPLICATION_SLAVE_ADMIN - 590)) | (1L << (RESOURCE_GROUP_ADMIN - 590)) | (1L << (RESOURCE_GROUP_USER - 590)) | (1L << (ROLE_ADMIN - 590)) | (1L << (SESSION_VARIABLES_ADMIN - 590)) | (1L << (SET_USER_ID - 590)) | (1L << (SHOW_ROUTINE - 590)) | (1L << (SYSTEM_VARIABLES_ADMIN - 590)) | (1L << (TABLE_ENCRYPTION_ADMIN - 590)) | (1L << (VERSION_TOKEN_ADMIN - 590)) | (1L << (XA_RECOVER_ADMIN - 590)) | (1L << (ARMSCII8 - 590)) | (1L << (ASCII - 590)) | (1L << (BIG5 - 590)) | (1L << (CP1250 - 590)) | (1L << (CP1251 - 590)) | (1L << (CP1256 - 590)) | (1L << (CP1257 - 590)) | (1L << (CP850 - 590)) | (1L << (CP852 - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)) | (1L << (GREEK - 654)) | (1L << (HEBREW - 654)) | (1L << (HP8 - 654)) | (1L << (KEYBCS2 - 654)) | (1L << (KOI8R - 654)) | (1L << (KOI8U - 654)) | (1L << (LATIN1 - 654)) | (1L << (LATIN2 - 654)) | (1L << (LATIN5 - 654)) | (1L << (LATIN7 - 654)) | (1L << (MACCE - 654)) | (1L << (MACROMAN - 654)) | (1L << (SJIS - 654)) | (1L << (SWE7 - 654)) | (1L << (TIS620 - 654)) | (1L << (UCS2 - 654)) | (1L << (UJIS - 654)) | (1L << (UTF16 - 654)) | (1L << (UTF16LE - 654)) | (1L << (UTF32 - 654)) | (1L << (UTF8 - 654)) | (1L << (UTF8MB3 - 654)) | (1L << (UTF8MB4 - 654)) | (1L << (ARCHIVE - 654)) | (1L << (BLACKHOLE - 654)) | (1L << (CSV - 654)) | (1L << (FEDERATED - 654)) | (1L << (INNODB - 654)) | (1L << (MEMORY - 654)) | (1L << (MRG_MYISAM - 654)) | (1L << (MYISAM - 654)) | (1L << (NDB - 654)) | (1L << (NDBCLUSTER - 654)) | (1L << (PERFORMANCE_SCHEMA - 654)) | (1L << (TOKUDB - 654)) | (1L << (REPEATABLE - 654)) | (1L << (COMMITTED - 654)) | (1L << (UNCOMMITTED - 654)) | (1L << (SERIALIZABLE - 654)) | (1L << (GEOMETRYCOLLECTION - 654)) | (1L << (LINESTRING - 654)) | (1L << (MULTILINESTRING - 654)) | (1L << (MULTIPOINT - 654)) | (1L << (MULTIPOLYGON - 654)) | (1L << (POINT - 654)) | (1L << (POLYGON - 654)) | (1L << (ABS - 654)) | (1L << (ACOS - 654)) | (1L << (ADDDATE - 654)) | (1L << (ADDTIME - 654)) | (1L << (AES_DECRYPT - 654)) | (1L << (AES_ENCRYPT - 654)) | (1L << (AREA - 654)) | (1L << (ASBINARY - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)) | (1L << (ASYMMETRIC_VERIFY - 718)) | (1L << (ATAN - 718)) | (1L << (ATAN2 - 718)) | (1L << (BENCHMARK - 718)) | (1L << (BIN - 718)) | (1L << (BIT_COUNT - 718)) | (1L << (BIT_LENGTH - 718)) | (1L << (BUFFER - 718)) | (1L << (CATALOG_NAME - 718)) | (1L << (CEIL - 718)) | (1L << (CEILING - 718)) | (1L << (CENTROID - 718)) | (1L << (CHARACTER_LENGTH - 718)) | (1L << (CHARSET - 718)) | (1L << (CHAR_LENGTH - 718)) | (1L << (COERCIBILITY - 718)) | (1L << (COLLATION - 718)) | (1L << (COMPRESS - 718)) | (1L << (CONCAT - 718)) | (1L << (CONCAT_WS - 718)) | (1L << (CONNECTION_ID - 718)) | (1L << (CONV - 718)) | (1L << (CONVERT_TZ - 718)) | (1L << (COS - 718)) | (1L << (COT - 718)) | (1L << (CRC32 - 718)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1L << (CREATE_DH_PARAMETERS - 718)) | (1L << (CREATE_DIGEST - 718)) | (1L << (CROSSES - 718)) | (1L << (DATEDIFF - 718)) | (1L << (DATE_FORMAT - 718)) | (1L << (DAYNAME - 718)) | (1L << (DAYOFMONTH - 718)) | (1L << (DAYOFWEEK - 718)) | (1L << (DAYOFYEAR - 718)) | (1L << (DECODE - 718)) | (1L << (DEGREES - 718)) | (1L << (DES_DECRYPT - 718)) | (1L << (DES_ENCRYPT - 718)) | (1L << (DIMENSION - 718)) | (1L << (DISJOINT - 718)) | (1L << (ELT - 718)) | (1L << (ENCODE - 718)) | (1L << (ENCRYPT - 718)) | (1L << (ENDPOINT - 718)) | (1L << (ENVELOPE - 718)) | (1L << (EQUALS - 718)) | (1L << (EXP - 718)) | (1L << (EXPORT_SET - 718)) | (1L << (EXTERIORRING - 718)) | (1L << (EXTRACTVALUE - 718)) | (1L << (FIELD - 718)) | (1L << (FIND_IN_SET - 718)) | (1L << (FLOOR - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 782)) | (1L << (GEOMETRYFROMTEXT - 782)) | (1L << (GEOMETRYFROMWKB - 782)) | (1L << (GEOMETRYN - 782)) | (1L << (GEOMETRYTYPE - 782)) | (1L << (GEOMFROMTEXT - 782)) | (1L << (GEOMFROMWKB - 782)) | (1L << (GET_FORMAT - 782)) | (1L << (GET_LOCK - 782)) | (1L << (GLENGTH - 782)) | (1L << (GREATEST - 782)) | (1L << (GTID_SUBSET - 782)) | (1L << (GTID_SUBTRACT - 782)) | (1L << (HEX - 782)) | (1L << (IFNULL - 782)) | (1L << (INET6_ATON - 782)) | (1L << (INET6_NTOA - 782)) | (1L << (INET_ATON - 782)) | (1L << (INET_NTOA - 782)) | (1L << (INSTR - 782)) | (1L << (INTERIORRINGN - 782)) | (1L << (INTERSECTS - 782)) | (1L << (ISCLOSED - 782)) | (1L << (ISEMPTY - 782)) | (1L << (ISNULL - 782)) | (1L << (ISSIMPLE - 782)) | (1L << (IS_FREE_LOCK - 782)) | (1L << (IS_IPV4 - 782)) | (1L << (IS_IPV4_COMPAT - 782)) | (1L << (IS_IPV4_MAPPED - 782)) | (1L << (IS_IPV6 - 782)) | (1L << (IS_USED_LOCK - 782)) | (1L << (LAST_INSERT_ID - 782)) | (1L << (LCASE - 782)) | (1L << (LEAST - 782)) | (1L << (LENGTH - 782)) | (1L << (LINEFROMTEXT - 782)) | (1L << (LINEFROMWKB - 782)) | (1L << (LINESTRINGFROMTEXT - 782)) | (1L << (LINESTRINGFROMWKB - 782)) | (1L << (LN - 782)) | (1L << (LOAD_FILE - 782)) | (1L << (LOCATE - 782)) | (1L << (LOG - 782)) | (1L << (LOG10 - 782)) | (1L << (LOG2 - 782)) | (1L << (LOWER - 782)) | (1L << (LPAD - 782)) | (1L << (LTRIM - 782)) | (1L << (MAKEDATE - 782)) | (1L << (MAKETIME - 782)) | (1L << (MAKE_SET - 782)) | (1L << (MASTER_POS_WAIT - 782)) | (1L << (MBRCONTAINS - 782)) | (1L << (MBRDISJOINT - 782)) | (1L << (MBREQUAL - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)) | (1L << (MPOINTFROMTEXT - 846)) | (1L << (MPOINTFROMWKB - 846)) | (1L << (MPOLYFROMTEXT - 846)) | (1L << (MPOLYFROMWKB - 846)) | (1L << (MULTILINESTRINGFROMTEXT - 846)) | (1L << (MULTILINESTRINGFROMWKB - 846)) | (1L << (MULTIPOINTFROMTEXT - 846)) | (1L << (MULTIPOINTFROMWKB - 846)) | (1L << (MULTIPOLYGONFROMTEXT - 846)) | (1L << (MULTIPOLYGONFROMWKB - 846)) | (1L << (NAME_CONST - 846)) | (1L << (NULLIF - 846)) | (1L << (NUMGEOMETRIES - 846)) | (1L << (NUMINTERIORRINGS - 846)) | (1L << (NUMPOINTS - 846)) | (1L << (OCT - 846)) | (1L << (OCTET_LENGTH - 846)) | (1L << (ORD - 846)) | (1L << (OVERLAPS - 846)) | (1L << (PERIOD_ADD - 846)) | (1L << (PERIOD_DIFF - 846)) | (1L << (PI - 846)) | (1L << (POINTFROMTEXT - 846)) | (1L << (POINTFROMWKB - 846)) | (1L << (POINTN - 846)) | (1L << (POLYFROMTEXT - 846)) | (1L << (POLYFROMWKB - 846)) | (1L << (POLYGONFROMTEXT - 846)) | (1L << (POLYGONFROMWKB - 846)) | (1L << (POW - 846)) | (1L << (POWER - 846)) | (1L << (QUOTE - 846)) | (1L << (RADIANS - 846)) | (1L << (RAND - 846)) | (1L << (RANDOM_BYTES - 846)) | (1L << (RELEASE_LOCK - 846)) | (1L << (REVERSE - 846)) | (1L << (ROUND - 846)) | (1L << (ROW_COUNT - 846)) | (1L << (RPAD - 846)) | (1L << (RTRIM - 846)) | (1L << (SEC_TO_TIME - 846)) | (1L << (SESSION_USER - 846)) | (1L << (SHA - 846)) | (1L << (SHA1 - 846)) | (1L << (SHA2 - 846)) | (1L << (SCHEMA_NAME - 846)) | (1L << (SIGN - 846)) | (1L << (SIN - 846)) | (1L << (SLEEP - 846)) | (1L << (SOUNDEX - 846)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 846)) | (1L << (SQRT - 846)) | (1L << (SRID - 846)) | (1L << (STARTPOINT - 846)) | (1L << (STRCMP - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)) | (1L << (ST_CONTAINS - 910)) | (1L << (ST_CROSSES - 910)) | (1L << (ST_DIFFERENCE - 910)) | (1L << (ST_DIMENSION - 910)) | (1L << (ST_DISJOINT - 910)) | (1L << (ST_DISTANCE - 910)) | (1L << (ST_ENDPOINT - 910)) | (1L << (ST_ENVELOPE - 910)) | (1L << (ST_EQUALS - 910)) | (1L << (ST_EXTERIORRING - 910)) | (1L << (ST_GEOMCOLLFROMTEXT - 910)) | (1L << (ST_GEOMCOLLFROMTXT - 910)) | (1L << (ST_GEOMCOLLFROMWKB - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1L << (ST_GEOMETRYFROMTEXT - 910)) | (1L << (ST_GEOMETRYFROMWKB - 910)) | (1L << (ST_GEOMETRYN - 910)) | (1L << (ST_GEOMETRYTYPE - 910)) | (1L << (ST_GEOMFROMTEXT - 910)) | (1L << (ST_GEOMFROMWKB - 910)) | (1L << (ST_INTERIORRINGN - 910)) | (1L << (ST_INTERSECTION - 910)) | (1L << (ST_INTERSECTS - 910)) | (1L << (ST_ISCLOSED - 910)) | (1L << (ST_ISEMPTY - 910)) | (1L << (ST_ISSIMPLE - 910)) | (1L << (ST_LINEFROMTEXT - 910)) | (1L << (ST_LINEFROMWKB - 910)) | (1L << (ST_LINESTRINGFROMTEXT - 910)) | (1L << (ST_LINESTRINGFROMWKB - 910)) | (1L << (ST_NUMGEOMETRIES - 910)) | (1L << (ST_NUMINTERIORRING - 910)) | (1L << (ST_NUMINTERIORRINGS - 910)) | (1L << (ST_NUMPOINTS - 910)) | (1L << (ST_OVERLAPS - 910)) | (1L << (ST_POINTFROMTEXT - 910)) | (1L << (ST_POINTFROMWKB - 910)) | (1L << (ST_POINTN - 910)) | (1L << (ST_POLYFROMTEXT - 910)) | (1L << (ST_POLYFROMWKB - 910)) | (1L << (ST_POLYGONFROMTEXT - 910)) | (1L << (ST_POLYGONFROMWKB - 910)) | (1L << (ST_SRID - 910)) | (1L << (ST_STARTPOINT - 910)) | (1L << (ST_SYMDIFFERENCE - 910)) | (1L << (ST_TOUCHES - 910)) | (1L << (ST_UNION - 910)) | (1L << (ST_WITHIN - 910)) | (1L << (ST_X - 910)) | (1L << (ST_Y - 910)) | (1L << (SUBDATE - 910)) | (1L << (SUBSTRING_INDEX - 910)) | (1L << (SUBTIME - 910)) | (1L << (SYSTEM_USER - 910)) | (1L << (TAN - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)) | (1L << (TO_SECONDS - 974)) | (1L << (UCASE - 974)) | (1L << (UNCOMPRESS - 974)) | (1L << (UNCOMPRESSED_LENGTH - 974)) | (1L << (UNHEX - 974)) | (1L << (UNIX_TIMESTAMP - 974)) | (1L << (UPDATEXML - 974)) | (1L << (UPPER - 974)) | (1L << (UUID - 974)) | (1L << (UUID_SHORT - 974)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 974)) | (1L << (VERSION - 974)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1L << (WEEKDAY - 974)) | (1L << (WEEKOFYEAR - 974)) | (1L << (WEIGHT_STRING - 974)) | (1L << (WITHIN - 974)) | (1L << (YEARWEEK - 974)) | (1L << (Y_FUNCTION - 974)) | (1L << (X_FUNCTION - 974)) | (1L << (MOD - 974)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1040)) | (1L << (STRING_LITERAL - 1040)) | (1L << (ID - 1040)) | (1L << (REVERSE_QUOTE_ID - 1040)))) != 0)) {
					{
					setState(612);
					((ForeignKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				setState(615);
				indexColumnNames();
				setState(616);
				referenceDefinition();
				}
				break;
			case 4:
				_localctx = new CheckTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(622);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(618);
					match(CONSTRAINT);
					setState(620);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (GROUP - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (ORDER - 105)) | (1L << (RIGHT - 105)) | (1L << (SCHEMA - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (DATE - 199)) | (1L << (TIME - 199)) | (1L << (TIMESTAMP - 199)) | (1L << (DATETIME - 199)) | (1L << (YEAR - 199)) | (1L << (TEXT - 199)) | (1L << (ENUM - 199)) | (1L << (SERIAL - 199)) | (1L << (JSON_VALID - 199)) | (1L << (JSON_SCHEMA_VALID - 199)) | (1L << (AVG - 199)) | (1L << (BIT_AND - 199)) | (1L << (BIT_OR - 199)) | (1L << (BIT_XOR - 199)) | (1L << (COUNT - 199)) | (1L << (GROUP_CONCAT - 199)) | (1L << (MAX - 199)) | (1L << (MIN - 199)) | (1L << (STD - 199)) | (1L << (STDDEV - 199)) | (1L << (STDDEV_POP - 199)) | (1L << (STDDEV_SAMP - 199)) | (1L << (SUM - 199)) | (1L << (VAR_POP - 199)) | (1L << (VAR_SAMP - 199)) | (1L << (VARIANCE - 199)) | (1L << (POSITION - 199)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)) | (1L << (BOOL - 270)) | (1L << (BOOLEAN - 270)) | (1L << (BTREE - 270)) | (1L << (CACHE - 270)) | (1L << (CASCADED - 270)) | (1L << (CHAIN - 270)) | (1L << (CHANGED - 270)) | (1L << (CHANNEL - 270)) | (1L << (CHECKSUM - 270)) | (1L << (PAGE_CHECKSUM - 270)) | (1L << (CIPHER - 270)) | (1L << (CLASS_ORIGIN - 270)) | (1L << (CLIENT - 270)) | (1L << (CLOSE - 270)) | (1L << (COALESCE - 270)) | (1L << (CODE - 270)) | (1L << (COLUMNS - 270)) | (1L << (COLUMN_FORMAT - 270)) | (1L << (COLUMN_NAME - 270)) | (1L << (COMMENT - 270)) | (1L << (COMMIT - 270)) | (1L << (COMPACT - 270)) | (1L << (COMPLETION - 270)) | (1L << (COMPRESSED - 270)) | (1L << (COMPRESSION - 270)) | (1L << (CONCURRENT - 270)) | (1L << (CONNECTION - 270)) | (1L << (CONSISTENT - 270)) | (1L << (CONSTRAINT_CATALOG - 270)) | (1L << (CONSTRAINT_SCHEMA - 270)) | (1L << (CONSTRAINT_NAME - 270)) | (1L << (CONTAINS - 270)) | (1L << (CONTEXT - 270)) | (1L << (CONTRIBUTORS - 270)) | (1L << (COPY - 270)) | (1L << (CPU - 270)) | (1L << (CURSOR_NAME - 270)) | (1L << (DATA - 270)) | (1L << (DATAFILE - 270)) | (1L << (DEALLOCATE - 270)) | (1L << (DEFAULT_AUTH - 270)) | (1L << (DEFINER - 270)) | (1L << (DELAY_KEY_WRITE - 270)) | (1L << (DES_KEY_FILE - 270)) | (1L << (DIRECTORY - 270)) | (1L << (DISABLE - 270)) | (1L << (DISCARD - 270)) | (1L << (DISK - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)) | (1L << (EVENTS - 334)) | (1L << (EVERY - 334)) | (1L << (EXCHANGE - 334)) | (1L << (EXCLUSIVE - 334)) | (1L << (EXPIRE - 334)) | (1L << (EXPORT - 334)) | (1L << (EXTENDED - 334)) | (1L << (EXTENT_SIZE - 334)) | (1L << (FAST - 334)) | (1L << (FAULTS - 334)) | (1L << (FIELDS - 334)) | (1L << (FILE_BLOCK_SIZE - 334)) | (1L << (FILTER - 334)) | (1L << (FIRST - 334)) | (1L << (FIXED - 334)) | (1L << (FLUSH - 334)) | (1L << (FOLLOWS - 334)) | (1L << (FOUND - 334)) | (1L << (FULL - 334)) | (1L << (FUNCTION - 334)) | (1L << (GENERAL - 334)) | (1L << (GLOBAL - 334)) | (1L << (GRANTS - 334)) | (1L << (GROUP_REPLICATION - 334)) | (1L << (HANDLER - 334)) | (1L << (HASH - 334)) | (1L << (HELP - 334)) | (1L << (HOST - 334)) | (1L << (HOSTS - 334)) | (1L << (IDENTIFIED - 334)) | (1L << (IGNORE_SERVER_IDS - 334)) | (1L << (IMPORT - 334)) | (1L << (INDEXES - 334)) | (1L << (INITIAL_SIZE - 334)) | (1L << (INPLACE - 334)) | (1L << (INSERT_METHOD - 334)) | (1L << (INSTALL - 334)) | (1L << (INSTANCE - 334)) | (1L << (INVISIBLE - 334)) | (1L << (INVOKER - 334)) | (1L << (IO - 334)) | (1L << (IO_THREAD - 334)) | (1L << (IPC - 334)) | (1L << (ISOLATION - 334)) | (1L << (ISSUER - 334)) | (1L << (JSON - 334)) | (1L << (KEY_BLOCK_SIZE - 334)) | (1L << (LANGUAGE - 334)) | (1L << (LAST - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)) | (1L << (MASTER_LOG_POS - 398)) | (1L << (MASTER_PASSWORD - 398)) | (1L << (MASTER_PORT - 398)) | (1L << (MASTER_RETRY_COUNT - 398)) | (1L << (MASTER_SSL - 398)) | (1L << (MASTER_SSL_CA - 398)) | (1L << (MASTER_SSL_CAPATH - 398)) | (1L << (MASTER_SSL_CERT - 398)) | (1L << (MASTER_SSL_CIPHER - 398)) | (1L << (MASTER_SSL_CRL - 398)) | (1L << (MASTER_SSL_CRLPATH - 398)) | (1L << (MASTER_SSL_KEY - 398)) | (1L << (MASTER_TLS_VERSION - 398)) | (1L << (MASTER_USER - 398)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 398)) | (1L << (MAX_QUERIES_PER_HOUR - 398)) | (1L << (MAX_ROWS - 398)) | (1L << (MAX_SIZE - 398)) | (1L << (MAX_UPDATES_PER_HOUR - 398)) | (1L << (MAX_USER_CONNECTIONS - 398)) | (1L << (MEDIUM - 398)) | (1L << (MEMBER - 398)) | (1L << (MERGE - 398)) | (1L << (MESSAGE_TEXT - 398)) | (1L << (MID - 398)) | (1L << (MIGRATE - 398)) | (1L << (MIN_ROWS - 398)) | (1L << (MODE - 398)) | (1L << (MODIFY - 398)) | (1L << (MUTEX - 398)) | (1L << (MYSQL - 398)) | (1L << (MYSQL_ERRNO - 398)) | (1L << (NAME - 398)) | (1L << (NAMES - 398)) | (1L << (NCHAR - 398)) | (1L << (NEVER - 398)) | (1L << (NEXT - 398)) | (1L << (NO - 398)) | (1L << (NODEGROUP - 398)) | (1L << (NONE - 398)) | (1L << (OFFLINE - 398)) | (1L << (OFFSET - 398)) | (1L << (OF - 398)) | (1L << (OJ - 398)) | (1L << (OLD_PASSWORD - 398)) | (1L << (ONE - 398)) | (1L << (ONLINE - 398)) | (1L << (ONLY - 398)) | (1L << (OPEN - 398)) | (1L << (OPTIMIZER_COSTS - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)) | (1L << (PORT - 462)) | (1L << (PRECEDES - 462)) | (1L << (PREPARE - 462)) | (1L << (PRESERVE - 462)) | (1L << (PREV - 462)) | (1L << (PROCESSLIST - 462)) | (1L << (PROFILE - 462)) | (1L << (PROFILES - 462)) | (1L << (PROXY - 462)) | (1L << (QUERY - 462)) | (1L << (QUICK - 462)) | (1L << (REBUILD - 462)) | (1L << (RECOVER - 462)) | (1L << (REDO_BUFFER_SIZE - 462)) | (1L << (REDUNDANT - 462)) | (1L << (RELAY - 462)) | (1L << (RELAY_LOG_FILE - 462)) | (1L << (RELAY_LOG_POS - 462)) | (1L << (RELAYLOG - 462)) | (1L << (REMOVE - 462)) | (1L << (REORGANIZE - 462)) | (1L << (REPAIR - 462)) | (1L << (REPLICATE_DO_DB - 462)) | (1L << (REPLICATE_DO_TABLE - 462)) | (1L << (REPLICATE_IGNORE_DB - 462)) | (1L << (REPLICATE_IGNORE_TABLE - 462)) | (1L << (REPLICATE_REWRITE_DB - 462)) | (1L << (REPLICATE_WILD_DO_TABLE - 462)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 462)) | (1L << (REPLICATION - 462)) | (1L << (RESET - 462)) | (1L << (RESUME - 462)) | (1L << (RETURNED_SQLSTATE - 462)) | (1L << (RETURNS - 462)) | (1L << (ROLE - 462)) | (1L << (ROLLBACK - 462)) | (1L << (ROLLUP - 462)) | (1L << (ROTATE - 462)) | (1L << (ROW - 462)) | (1L << (ROWS - 462)) | (1L << (ROW_FORMAT - 462)) | (1L << (SAVEPOINT - 462)) | (1L << (SCHEDULE - 462)) | (1L << (SECURITY - 462)) | (1L << (SERVER - 462)) | (1L << (SESSION - 462)) | (1L << (SHARE - 462)) | (1L << (SHARED - 462)) | (1L << (SIGNED - 462)) | (1L << (SIMPLE - 462)) | (1L << (SLAVE - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)) | (1L << (SQL_CACHE - 526)) | (1L << (SQL_NO_CACHE - 526)) | (1L << (SQL_THREAD - 526)) | (1L << (START - 526)) | (1L << (STARTS - 526)) | (1L << (STATS_AUTO_RECALC - 526)) | (1L << (STATS_PERSISTENT - 526)) | (1L << (STATS_SAMPLE_PAGES - 526)) | (1L << (STATUS - 526)) | (1L << (STOP - 526)) | (1L << (STORAGE - 526)) | (1L << (STRING - 526)) | (1L << (SUBCLASS_ORIGIN - 526)) | (1L << (SUBJECT - 526)) | (1L << (SUBPARTITION - 526)) | (1L << (SUBPARTITIONS - 526)) | (1L << (SUSPEND - 526)) | (1L << (SWAPS - 526)) | (1L << (SWITCHES - 526)) | (1L << (TABLE_NAME - 526)) | (1L << (TABLESPACE - 526)) | (1L << (TEMPORARY - 526)) | (1L << (TEMPTABLE - 526)) | (1L << (THAN - 526)) | (1L << (TRADITIONAL - 526)) | (1L << (TRANSACTION - 526)) | (1L << (TRANSACTIONAL - 526)) | (1L << (TRIGGERS - 526)) | (1L << (TRUNCATE - 526)) | (1L << (UNDEFINED - 526)) | (1L << (UNDOFILE - 526)) | (1L << (UNDO_BUFFER_SIZE - 526)) | (1L << (UNINSTALL - 526)) | (1L << (UNKNOWN - 526)) | (1L << (UNTIL - 526)) | (1L << (UPGRADE - 526)) | (1L << (USER - 526)) | (1L << (USE_FRM - 526)) | (1L << (USER_RESOURCES - 526)) | (1L << (VALIDATION - 526)) | (1L << (VALUE - 526)) | (1L << (VARIABLES - 526)) | (1L << (VIEW - 526)) | (1L << (VISIBLE - 526)) | (1L << (WAIT - 526)) | (1L << (WARNINGS - 526)) | (1L << (WITHOUT - 526)) | (1L << (WORK - 526)) | (1L << (WRAPPER - 526)) | (1L << (X509 - 526)) | (1L << (XA - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (XML - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)) | (1L << (DAY - 590)) | (1L << (HOUR - 590)) | (1L << (MINUTE - 590)) | (1L << (WEEK - 590)) | (1L << (SECOND - 590)) | (1L << (MICROSECOND - 590)) | (1L << (TABLES - 590)) | (1L << (ROUTINE - 590)) | (1L << (EXECUTE - 590)) | (1L << (FILE - 590)) | (1L << (PROCESS - 590)) | (1L << (RELOAD - 590)) | (1L << (SHUTDOWN - 590)) | (1L << (SUPER - 590)) | (1L << (PRIVILEGES - 590)) | (1L << (AUDIT_ADMIN - 590)) | (1L << (BACKUP_ADMIN - 590)) | (1L << (BINLOG_ADMIN - 590)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 590)) | (1L << (CLONE_ADMIN - 590)) | (1L << (CONNECTION_ADMIN - 590)) | (1L << (ENCRYPTION_KEY_ADMIN - 590)) | (1L << (FIREWALL_ADMIN - 590)) | (1L << (FIREWALL_USER - 590)) | (1L << (GROUP_REPLICATION_ADMIN - 590)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 590)) | (1L << (NDB_STORED_USER - 590)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 590)) | (1L << (REPLICATION_APPLIER - 590)) | (1L << (REPLICATION_SLAVE_ADMIN - 590)) | (1L << (RESOURCE_GROUP_ADMIN - 590)) | (1L << (RESOURCE_GROUP_USER - 590)) | (1L << (ROLE_ADMIN - 590)) | (1L << (SESSION_VARIABLES_ADMIN - 590)) | (1L << (SET_USER_ID - 590)) | (1L << (SHOW_ROUTINE - 590)) | (1L << (SYSTEM_VARIABLES_ADMIN - 590)) | (1L << (TABLE_ENCRYPTION_ADMIN - 590)) | (1L << (VERSION_TOKEN_ADMIN - 590)) | (1L << (XA_RECOVER_ADMIN - 590)) | (1L << (ARMSCII8 - 590)) | (1L << (ASCII - 590)) | (1L << (BIG5 - 590)) | (1L << (CP1250 - 590)) | (1L << (CP1251 - 590)) | (1L << (CP1256 - 590)) | (1L << (CP1257 - 590)) | (1L << (CP850 - 590)) | (1L << (CP852 - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)) | (1L << (GREEK - 654)) | (1L << (HEBREW - 654)) | (1L << (HP8 - 654)) | (1L << (KEYBCS2 - 654)) | (1L << (KOI8R - 654)) | (1L << (KOI8U - 654)) | (1L << (LATIN1 - 654)) | (1L << (LATIN2 - 654)) | (1L << (LATIN5 - 654)) | (1L << (LATIN7 - 654)) | (1L << (MACCE - 654)) | (1L << (MACROMAN - 654)) | (1L << (SJIS - 654)) | (1L << (SWE7 - 654)) | (1L << (TIS620 - 654)) | (1L << (UCS2 - 654)) | (1L << (UJIS - 654)) | (1L << (UTF16 - 654)) | (1L << (UTF16LE - 654)) | (1L << (UTF32 - 654)) | (1L << (UTF8 - 654)) | (1L << (UTF8MB3 - 654)) | (1L << (UTF8MB4 - 654)) | (1L << (ARCHIVE - 654)) | (1L << (BLACKHOLE - 654)) | (1L << (CSV - 654)) | (1L << (FEDERATED - 654)) | (1L << (INNODB - 654)) | (1L << (MEMORY - 654)) | (1L << (MRG_MYISAM - 654)) | (1L << (MYISAM - 654)) | (1L << (NDB - 654)) | (1L << (NDBCLUSTER - 654)) | (1L << (PERFORMANCE_SCHEMA - 654)) | (1L << (TOKUDB - 654)) | (1L << (REPEATABLE - 654)) | (1L << (COMMITTED - 654)) | (1L << (UNCOMMITTED - 654)) | (1L << (SERIALIZABLE - 654)) | (1L << (GEOMETRYCOLLECTION - 654)) | (1L << (LINESTRING - 654)) | (1L << (MULTILINESTRING - 654)) | (1L << (MULTIPOINT - 654)) | (1L << (MULTIPOLYGON - 654)) | (1L << (POINT - 654)) | (1L << (POLYGON - 654)) | (1L << (ABS - 654)) | (1L << (ACOS - 654)) | (1L << (ADDDATE - 654)) | (1L << (ADDTIME - 654)) | (1L << (AES_DECRYPT - 654)) | (1L << (AES_ENCRYPT - 654)) | (1L << (AREA - 654)) | (1L << (ASBINARY - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)) | (1L << (ASYMMETRIC_VERIFY - 718)) | (1L << (ATAN - 718)) | (1L << (ATAN2 - 718)) | (1L << (BENCHMARK - 718)) | (1L << (BIN - 718)) | (1L << (BIT_COUNT - 718)) | (1L << (BIT_LENGTH - 718)) | (1L << (BUFFER - 718)) | (1L << (CATALOG_NAME - 718)) | (1L << (CEIL - 718)) | (1L << (CEILING - 718)) | (1L << (CENTROID - 718)) | (1L << (CHARACTER_LENGTH - 718)) | (1L << (CHARSET - 718)) | (1L << (CHAR_LENGTH - 718)) | (1L << (COERCIBILITY - 718)) | (1L << (COLLATION - 718)) | (1L << (COMPRESS - 718)) | (1L << (CONCAT - 718)) | (1L << (CONCAT_WS - 718)) | (1L << (CONNECTION_ID - 718)) | (1L << (CONV - 718)) | (1L << (CONVERT_TZ - 718)) | (1L << (COS - 718)) | (1L << (COT - 718)) | (1L << (CRC32 - 718)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1L << (CREATE_DH_PARAMETERS - 718)) | (1L << (CREATE_DIGEST - 718)) | (1L << (CROSSES - 718)) | (1L << (DATEDIFF - 718)) | (1L << (DATE_FORMAT - 718)) | (1L << (DAYNAME - 718)) | (1L << (DAYOFMONTH - 718)) | (1L << (DAYOFWEEK - 718)) | (1L << (DAYOFYEAR - 718)) | (1L << (DECODE - 718)) | (1L << (DEGREES - 718)) | (1L << (DES_DECRYPT - 718)) | (1L << (DES_ENCRYPT - 718)) | (1L << (DIMENSION - 718)) | (1L << (DISJOINT - 718)) | (1L << (ELT - 718)) | (1L << (ENCODE - 718)) | (1L << (ENCRYPT - 718)) | (1L << (ENDPOINT - 718)) | (1L << (ENVELOPE - 718)) | (1L << (EQUALS - 718)) | (1L << (EXP - 718)) | (1L << (EXPORT_SET - 718)) | (1L << (EXTERIORRING - 718)) | (1L << (EXTRACTVALUE - 718)) | (1L << (FIELD - 718)) | (1L << (FIND_IN_SET - 718)) | (1L << (FLOOR - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 782)) | (1L << (GEOMETRYFROMTEXT - 782)) | (1L << (GEOMETRYFROMWKB - 782)) | (1L << (GEOMETRYN - 782)) | (1L << (GEOMETRYTYPE - 782)) | (1L << (GEOMFROMTEXT - 782)) | (1L << (GEOMFROMWKB - 782)) | (1L << (GET_FORMAT - 782)) | (1L << (GET_LOCK - 782)) | (1L << (GLENGTH - 782)) | (1L << (GREATEST - 782)) | (1L << (GTID_SUBSET - 782)) | (1L << (GTID_SUBTRACT - 782)) | (1L << (HEX - 782)) | (1L << (IFNULL - 782)) | (1L << (INET6_ATON - 782)) | (1L << (INET6_NTOA - 782)) | (1L << (INET_ATON - 782)) | (1L << (INET_NTOA - 782)) | (1L << (INSTR - 782)) | (1L << (INTERIORRINGN - 782)) | (1L << (INTERSECTS - 782)) | (1L << (ISCLOSED - 782)) | (1L << (ISEMPTY - 782)) | (1L << (ISNULL - 782)) | (1L << (ISSIMPLE - 782)) | (1L << (IS_FREE_LOCK - 782)) | (1L << (IS_IPV4 - 782)) | (1L << (IS_IPV4_COMPAT - 782)) | (1L << (IS_IPV4_MAPPED - 782)) | (1L << (IS_IPV6 - 782)) | (1L << (IS_USED_LOCK - 782)) | (1L << (LAST_INSERT_ID - 782)) | (1L << (LCASE - 782)) | (1L << (LEAST - 782)) | (1L << (LENGTH - 782)) | (1L << (LINEFROMTEXT - 782)) | (1L << (LINEFROMWKB - 782)) | (1L << (LINESTRINGFROMTEXT - 782)) | (1L << (LINESTRINGFROMWKB - 782)) | (1L << (LN - 782)) | (1L << (LOAD_FILE - 782)) | (1L << (LOCATE - 782)) | (1L << (LOG - 782)) | (1L << (LOG10 - 782)) | (1L << (LOG2 - 782)) | (1L << (LOWER - 782)) | (1L << (LPAD - 782)) | (1L << (LTRIM - 782)) | (1L << (MAKEDATE - 782)) | (1L << (MAKETIME - 782)) | (1L << (MAKE_SET - 782)) | (1L << (MASTER_POS_WAIT - 782)) | (1L << (MBRCONTAINS - 782)) | (1L << (MBRDISJOINT - 782)) | (1L << (MBREQUAL - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)) | (1L << (MPOINTFROMTEXT - 846)) | (1L << (MPOINTFROMWKB - 846)) | (1L << (MPOLYFROMTEXT - 846)) | (1L << (MPOLYFROMWKB - 846)) | (1L << (MULTILINESTRINGFROMTEXT - 846)) | (1L << (MULTILINESTRINGFROMWKB - 846)) | (1L << (MULTIPOINTFROMTEXT - 846)) | (1L << (MULTIPOINTFROMWKB - 846)) | (1L << (MULTIPOLYGONFROMTEXT - 846)) | (1L << (MULTIPOLYGONFROMWKB - 846)) | (1L << (NAME_CONST - 846)) | (1L << (NULLIF - 846)) | (1L << (NUMGEOMETRIES - 846)) | (1L << (NUMINTERIORRINGS - 846)) | (1L << (NUMPOINTS - 846)) | (1L << (OCT - 846)) | (1L << (OCTET_LENGTH - 846)) | (1L << (ORD - 846)) | (1L << (OVERLAPS - 846)) | (1L << (PERIOD_ADD - 846)) | (1L << (PERIOD_DIFF - 846)) | (1L << (PI - 846)) | (1L << (POINTFROMTEXT - 846)) | (1L << (POINTFROMWKB - 846)) | (1L << (POINTN - 846)) | (1L << (POLYFROMTEXT - 846)) | (1L << (POLYFROMWKB - 846)) | (1L << (POLYGONFROMTEXT - 846)) | (1L << (POLYGONFROMWKB - 846)) | (1L << (POW - 846)) | (1L << (POWER - 846)) | (1L << (QUOTE - 846)) | (1L << (RADIANS - 846)) | (1L << (RAND - 846)) | (1L << (RANDOM_BYTES - 846)) | (1L << (RELEASE_LOCK - 846)) | (1L << (REVERSE - 846)) | (1L << (ROUND - 846)) | (1L << (ROW_COUNT - 846)) | (1L << (RPAD - 846)) | (1L << (RTRIM - 846)) | (1L << (SEC_TO_TIME - 846)) | (1L << (SESSION_USER - 846)) | (1L << (SHA - 846)) | (1L << (SHA1 - 846)) | (1L << (SHA2 - 846)) | (1L << (SCHEMA_NAME - 846)) | (1L << (SIGN - 846)) | (1L << (SIN - 846)) | (1L << (SLEEP - 846)) | (1L << (SOUNDEX - 846)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 846)) | (1L << (SQRT - 846)) | (1L << (SRID - 846)) | (1L << (STARTPOINT - 846)) | (1L << (STRCMP - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)) | (1L << (ST_CONTAINS - 910)) | (1L << (ST_CROSSES - 910)) | (1L << (ST_DIFFERENCE - 910)) | (1L << (ST_DIMENSION - 910)) | (1L << (ST_DISJOINT - 910)) | (1L << (ST_DISTANCE - 910)) | (1L << (ST_ENDPOINT - 910)) | (1L << (ST_ENVELOPE - 910)) | (1L << (ST_EQUALS - 910)) | (1L << (ST_EXTERIORRING - 910)) | (1L << (ST_GEOMCOLLFROMTEXT - 910)) | (1L << (ST_GEOMCOLLFROMTXT - 910)) | (1L << (ST_GEOMCOLLFROMWKB - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1L << (ST_GEOMETRYFROMTEXT - 910)) | (1L << (ST_GEOMETRYFROMWKB - 910)) | (1L << (ST_GEOMETRYN - 910)) | (1L << (ST_GEOMETRYTYPE - 910)) | (1L << (ST_GEOMFROMTEXT - 910)) | (1L << (ST_GEOMFROMWKB - 910)) | (1L << (ST_INTERIORRINGN - 910)) | (1L << (ST_INTERSECTION - 910)) | (1L << (ST_INTERSECTS - 910)) | (1L << (ST_ISCLOSED - 910)) | (1L << (ST_ISEMPTY - 910)) | (1L << (ST_ISSIMPLE - 910)) | (1L << (ST_LINEFROMTEXT - 910)) | (1L << (ST_LINEFROMWKB - 910)) | (1L << (ST_LINESTRINGFROMTEXT - 910)) | (1L << (ST_LINESTRINGFROMWKB - 910)) | (1L << (ST_NUMGEOMETRIES - 910)) | (1L << (ST_NUMINTERIORRING - 910)) | (1L << (ST_NUMINTERIORRINGS - 910)) | (1L << (ST_NUMPOINTS - 910)) | (1L << (ST_OVERLAPS - 910)) | (1L << (ST_POINTFROMTEXT - 910)) | (1L << (ST_POINTFROMWKB - 910)) | (1L << (ST_POINTN - 910)) | (1L << (ST_POLYFROMTEXT - 910)) | (1L << (ST_POLYFROMWKB - 910)) | (1L << (ST_POLYGONFROMTEXT - 910)) | (1L << (ST_POLYGONFROMWKB - 910)) | (1L << (ST_SRID - 910)) | (1L << (ST_STARTPOINT - 910)) | (1L << (ST_SYMDIFFERENCE - 910)) | (1L << (ST_TOUCHES - 910)) | (1L << (ST_UNION - 910)) | (1L << (ST_WITHIN - 910)) | (1L << (ST_X - 910)) | (1L << (ST_Y - 910)) | (1L << (SUBDATE - 910)) | (1L << (SUBSTRING_INDEX - 910)) | (1L << (SUBTIME - 910)) | (1L << (SYSTEM_USER - 910)) | (1L << (TAN - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)) | (1L << (TO_SECONDS - 974)) | (1L << (UCASE - 974)) | (1L << (UNCOMPRESS - 974)) | (1L << (UNCOMPRESSED_LENGTH - 974)) | (1L << (UNHEX - 974)) | (1L << (UNIX_TIMESTAMP - 974)) | (1L << (UPDATEXML - 974)) | (1L << (UPPER - 974)) | (1L << (UUID - 974)) | (1L << (UUID_SHORT - 974)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 974)) | (1L << (VERSION - 974)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1L << (WEEKDAY - 974)) | (1L << (WEEKOFYEAR - 974)) | (1L << (WEIGHT_STRING - 974)) | (1L << (WITHIN - 974)) | (1L << (YEARWEEK - 974)) | (1L << (Y_FUNCTION - 974)) | (1L << (X_FUNCTION - 974)) | (1L << (MOD - 974)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1040)) | (1L << (STRING_LITERAL - 1040)) | (1L << (ID - 1040)) | (1L << (REVERSE_QUOTE_ID - 1040)))) != 0)) {
						{
						setState(619);
						((CheckTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(624);
				match(CHECK);
				setState(625);
				match(LR_BRACKET);
				setState(626);
				expression(0);
				setState(627);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferenceDefinitionContext extends ParserRuleContext {
		public Token matchType;
		public TerminalNode REFERENCES() { return getToken(MySqlParser.REFERENCES, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode MATCH() { return getToken(MySqlParser.MATCH, 0); }
		public ReferenceActionContext referenceAction() {
			return getRuleContext(ReferenceActionContext.class,0);
		}
		public TerminalNode FULL() { return getToken(MySqlParser.FULL, 0); }
		public TerminalNode PARTIAL() { return getToken(MySqlParser.PARTIAL, 0); }
		public TerminalNode SIMPLE() { return getToken(MySqlParser.SIMPLE, 0); }
		public ReferenceDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReferenceDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReferenceDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReferenceDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferenceDefinitionContext referenceDefinition() throws RecognitionException {
		ReferenceDefinitionContext _localctx = new ReferenceDefinitionContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_referenceDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(631);
			match(REFERENCES);
			setState(632);
			tableName();
			setState(634);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(633);
				indexColumnNames();
				}
			}

			setState(638);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MATCH) {
				{
				setState(636);
				match(MATCH);
				setState(637);
				((ReferenceDefinitionContext)_localctx).matchType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FULL || _la==PARTIAL || _la==SIMPLE) ) {
					((ReferenceDefinitionContext)_localctx).matchType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(641);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,78,_ctx) ) {
			case 1:
				{
				setState(640);
				referenceAction();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferenceActionContext extends ParserRuleContext {
		public ReferenceControlTypeContext onDelete;
		public ReferenceControlTypeContext onUpdate;
		public List<TerminalNode> ON() { return getTokens(MySqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MySqlParser.ON, i);
		}
		public TerminalNode DELETE() { return getToken(MySqlParser.DELETE, 0); }
		public List<ReferenceControlTypeContext> referenceControlType() {
			return getRuleContexts(ReferenceControlTypeContext.class);
		}
		public ReferenceControlTypeContext referenceControlType(int i) {
			return getRuleContext(ReferenceControlTypeContext.class,i);
		}
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public ReferenceActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReferenceAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReferenceAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReferenceAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferenceActionContext referenceAction() throws RecognitionException {
		ReferenceActionContext _localctx = new ReferenceActionContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_referenceAction);
		try {
			setState(659);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,81,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(643);
				match(ON);
				setState(644);
				match(DELETE);
				setState(645);
				((ReferenceActionContext)_localctx).onDelete = referenceControlType();
				setState(649);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,79,_ctx) ) {
				case 1:
					{
					setState(646);
					match(ON);
					setState(647);
					match(UPDATE);
					setState(648);
					((ReferenceActionContext)_localctx).onUpdate = referenceControlType();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(651);
				match(ON);
				setState(652);
				match(UPDATE);
				setState(653);
				((ReferenceActionContext)_localctx).onUpdate = referenceControlType();
				setState(657);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,80,_ctx) ) {
				case 1:
					{
					setState(654);
					match(ON);
					setState(655);
					match(DELETE);
					setState(656);
					((ReferenceActionContext)_localctx).onDelete = referenceControlType();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferenceControlTypeContext extends ParserRuleContext {
		public TerminalNode RESTRICT() { return getToken(MySqlParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(MySqlParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode NULL_LITERAL() { return getToken(MySqlParser.NULL_LITERAL, 0); }
		public TerminalNode NO() { return getToken(MySqlParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(MySqlParser.ACTION, 0); }
		public ReferenceControlTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceControlType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReferenceControlType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReferenceControlType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReferenceControlType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferenceControlTypeContext referenceControlType() throws RecognitionException {
		ReferenceControlTypeContext _localctx = new ReferenceControlTypeContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_referenceControlType);
		try {
			setState(667);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RESTRICT:
				enterOuterAlt(_localctx, 1);
				{
				setState(661);
				match(RESTRICT);
				}
				break;
			case CASCADE:
				enterOuterAlt(_localctx, 2);
				{
				setState(662);
				match(CASCADE);
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 3);
				{
				setState(663);
				match(SET);
				setState(664);
				match(NULL_LITERAL);
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 4);
				{
				setState(665);
				match(NO);
				setState(666);
				match(ACTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexColumnDefinitionContext extends ParserRuleContext {
		public IndexColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexColumnDefinition; }
	 
		public IndexColumnDefinitionContext() { }
		public void copyFrom(IndexColumnDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SpecialIndexDeclarationContext extends IndexColumnDefinitionContext {
		public Token indexFormat;
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode FULLTEXT() { return getToken(MySqlParser.FULLTEXT, 0); }
		public TerminalNode SPATIAL() { return getToken(MySqlParser.SPATIAL, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public SpecialIndexDeclarationContext(IndexColumnDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSpecialIndexDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSpecialIndexDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSpecialIndexDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleIndexDeclarationContext extends IndexColumnDefinitionContext {
		public Token indexFormat;
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public SimpleIndexDeclarationContext(IndexColumnDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleIndexDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleIndexDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimpleIndexDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexColumnDefinitionContext indexColumnDefinition() throws RecognitionException {
		IndexColumnDefinitionContext _localctx = new IndexColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_indexColumnDefinition);
		int _la;
		try {
			setState(697);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INDEX:
			case KEY:
				_localctx = new SimpleIndexDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(669);
				((SimpleIndexDeclarationContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((SimpleIndexDeclarationContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(671);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (GROUP - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (ORDER - 105)) | (1L << (RIGHT - 105)) | (1L << (SCHEMA - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (DATE - 199)) | (1L << (TIME - 199)) | (1L << (TIMESTAMP - 199)) | (1L << (DATETIME - 199)) | (1L << (YEAR - 199)) | (1L << (TEXT - 199)) | (1L << (ENUM - 199)) | (1L << (SERIAL - 199)) | (1L << (JSON_VALID - 199)) | (1L << (JSON_SCHEMA_VALID - 199)) | (1L << (AVG - 199)) | (1L << (BIT_AND - 199)) | (1L << (BIT_OR - 199)) | (1L << (BIT_XOR - 199)) | (1L << (COUNT - 199)) | (1L << (GROUP_CONCAT - 199)) | (1L << (MAX - 199)) | (1L << (MIN - 199)) | (1L << (STD - 199)) | (1L << (STDDEV - 199)) | (1L << (STDDEV_POP - 199)) | (1L << (STDDEV_SAMP - 199)) | (1L << (SUM - 199)) | (1L << (VAR_POP - 199)) | (1L << (VAR_SAMP - 199)) | (1L << (VARIANCE - 199)) | (1L << (POSITION - 199)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)) | (1L << (BOOL - 270)) | (1L << (BOOLEAN - 270)) | (1L << (BTREE - 270)) | (1L << (CACHE - 270)) | (1L << (CASCADED - 270)) | (1L << (CHAIN - 270)) | (1L << (CHANGED - 270)) | (1L << (CHANNEL - 270)) | (1L << (CHECKSUM - 270)) | (1L << (PAGE_CHECKSUM - 270)) | (1L << (CIPHER - 270)) | (1L << (CLASS_ORIGIN - 270)) | (1L << (CLIENT - 270)) | (1L << (CLOSE - 270)) | (1L << (COALESCE - 270)) | (1L << (CODE - 270)) | (1L << (COLUMNS - 270)) | (1L << (COLUMN_FORMAT - 270)) | (1L << (COLUMN_NAME - 270)) | (1L << (COMMENT - 270)) | (1L << (COMMIT - 270)) | (1L << (COMPACT - 270)) | (1L << (COMPLETION - 270)) | (1L << (COMPRESSED - 270)) | (1L << (COMPRESSION - 270)) | (1L << (CONCURRENT - 270)) | (1L << (CONNECTION - 270)) | (1L << (CONSISTENT - 270)) | (1L << (CONSTRAINT_CATALOG - 270)) | (1L << (CONSTRAINT_SCHEMA - 270)) | (1L << (CONSTRAINT_NAME - 270)) | (1L << (CONTAINS - 270)) | (1L << (CONTEXT - 270)) | (1L << (CONTRIBUTORS - 270)) | (1L << (COPY - 270)) | (1L << (CPU - 270)) | (1L << (CURSOR_NAME - 270)) | (1L << (DATA - 270)) | (1L << (DATAFILE - 270)) | (1L << (DEALLOCATE - 270)) | (1L << (DEFAULT_AUTH - 270)) | (1L << (DEFINER - 270)) | (1L << (DELAY_KEY_WRITE - 270)) | (1L << (DES_KEY_FILE - 270)) | (1L << (DIRECTORY - 270)) | (1L << (DISABLE - 270)) | (1L << (DISCARD - 270)) | (1L << (DISK - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)) | (1L << (EVENTS - 334)) | (1L << (EVERY - 334)) | (1L << (EXCHANGE - 334)) | (1L << (EXCLUSIVE - 334)) | (1L << (EXPIRE - 334)) | (1L << (EXPORT - 334)) | (1L << (EXTENDED - 334)) | (1L << (EXTENT_SIZE - 334)) | (1L << (FAST - 334)) | (1L << (FAULTS - 334)) | (1L << (FIELDS - 334)) | (1L << (FILE_BLOCK_SIZE - 334)) | (1L << (FILTER - 334)) | (1L << (FIRST - 334)) | (1L << (FIXED - 334)) | (1L << (FLUSH - 334)) | (1L << (FOLLOWS - 334)) | (1L << (FOUND - 334)) | (1L << (FULL - 334)) | (1L << (FUNCTION - 334)) | (1L << (GENERAL - 334)) | (1L << (GLOBAL - 334)) | (1L << (GRANTS - 334)) | (1L << (GROUP_REPLICATION - 334)) | (1L << (HANDLER - 334)) | (1L << (HASH - 334)) | (1L << (HELP - 334)) | (1L << (HOST - 334)) | (1L << (HOSTS - 334)) | (1L << (IDENTIFIED - 334)) | (1L << (IGNORE_SERVER_IDS - 334)) | (1L << (IMPORT - 334)) | (1L << (INDEXES - 334)) | (1L << (INITIAL_SIZE - 334)) | (1L << (INPLACE - 334)) | (1L << (INSERT_METHOD - 334)) | (1L << (INSTALL - 334)) | (1L << (INSTANCE - 334)) | (1L << (INVISIBLE - 334)) | (1L << (INVOKER - 334)) | (1L << (IO - 334)) | (1L << (IO_THREAD - 334)) | (1L << (IPC - 334)) | (1L << (ISOLATION - 334)) | (1L << (ISSUER - 334)) | (1L << (JSON - 334)) | (1L << (KEY_BLOCK_SIZE - 334)) | (1L << (LANGUAGE - 334)) | (1L << (LAST - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)) | (1L << (MASTER_LOG_POS - 398)) | (1L << (MASTER_PASSWORD - 398)) | (1L << (MASTER_PORT - 398)) | (1L << (MASTER_RETRY_COUNT - 398)) | (1L << (MASTER_SSL - 398)) | (1L << (MASTER_SSL_CA - 398)) | (1L << (MASTER_SSL_CAPATH - 398)) | (1L << (MASTER_SSL_CERT - 398)) | (1L << (MASTER_SSL_CIPHER - 398)) | (1L << (MASTER_SSL_CRL - 398)) | (1L << (MASTER_SSL_CRLPATH - 398)) | (1L << (MASTER_SSL_KEY - 398)) | (1L << (MASTER_TLS_VERSION - 398)) | (1L << (MASTER_USER - 398)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 398)) | (1L << (MAX_QUERIES_PER_HOUR - 398)) | (1L << (MAX_ROWS - 398)) | (1L << (MAX_SIZE - 398)) | (1L << (MAX_UPDATES_PER_HOUR - 398)) | (1L << (MAX_USER_CONNECTIONS - 398)) | (1L << (MEDIUM - 398)) | (1L << (MEMBER - 398)) | (1L << (MERGE - 398)) | (1L << (MESSAGE_TEXT - 398)) | (1L << (MID - 398)) | (1L << (MIGRATE - 398)) | (1L << (MIN_ROWS - 398)) | (1L << (MODE - 398)) | (1L << (MODIFY - 398)) | (1L << (MUTEX - 398)) | (1L << (MYSQL - 398)) | (1L << (MYSQL_ERRNO - 398)) | (1L << (NAME - 398)) | (1L << (NAMES - 398)) | (1L << (NCHAR - 398)) | (1L << (NEVER - 398)) | (1L << (NEXT - 398)) | (1L << (NO - 398)) | (1L << (NODEGROUP - 398)) | (1L << (NONE - 398)) | (1L << (OFFLINE - 398)) | (1L << (OFFSET - 398)) | (1L << (OF - 398)) | (1L << (OJ - 398)) | (1L << (OLD_PASSWORD - 398)) | (1L << (ONE - 398)) | (1L << (ONLINE - 398)) | (1L << (ONLY - 398)) | (1L << (OPEN - 398)) | (1L << (OPTIMIZER_COSTS - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)) | (1L << (PORT - 462)) | (1L << (PRECEDES - 462)) | (1L << (PREPARE - 462)) | (1L << (PRESERVE - 462)) | (1L << (PREV - 462)) | (1L << (PROCESSLIST - 462)) | (1L << (PROFILE - 462)) | (1L << (PROFILES - 462)) | (1L << (PROXY - 462)) | (1L << (QUERY - 462)) | (1L << (QUICK - 462)) | (1L << (REBUILD - 462)) | (1L << (RECOVER - 462)) | (1L << (REDO_BUFFER_SIZE - 462)) | (1L << (REDUNDANT - 462)) | (1L << (RELAY - 462)) | (1L << (RELAY_LOG_FILE - 462)) | (1L << (RELAY_LOG_POS - 462)) | (1L << (RELAYLOG - 462)) | (1L << (REMOVE - 462)) | (1L << (REORGANIZE - 462)) | (1L << (REPAIR - 462)) | (1L << (REPLICATE_DO_DB - 462)) | (1L << (REPLICATE_DO_TABLE - 462)) | (1L << (REPLICATE_IGNORE_DB - 462)) | (1L << (REPLICATE_IGNORE_TABLE - 462)) | (1L << (REPLICATE_REWRITE_DB - 462)) | (1L << (REPLICATE_WILD_DO_TABLE - 462)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 462)) | (1L << (REPLICATION - 462)) | (1L << (RESET - 462)) | (1L << (RESUME - 462)) | (1L << (RETURNED_SQLSTATE - 462)) | (1L << (RETURNS - 462)) | (1L << (ROLE - 462)) | (1L << (ROLLBACK - 462)) | (1L << (ROLLUP - 462)) | (1L << (ROTATE - 462)) | (1L << (ROW - 462)) | (1L << (ROWS - 462)) | (1L << (ROW_FORMAT - 462)) | (1L << (SAVEPOINT - 462)) | (1L << (SCHEDULE - 462)) | (1L << (SECURITY - 462)) | (1L << (SERVER - 462)) | (1L << (SESSION - 462)) | (1L << (SHARE - 462)) | (1L << (SHARED - 462)) | (1L << (SIGNED - 462)) | (1L << (SIMPLE - 462)) | (1L << (SLAVE - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)) | (1L << (SQL_CACHE - 526)) | (1L << (SQL_NO_CACHE - 526)) | (1L << (SQL_THREAD - 526)) | (1L << (START - 526)) | (1L << (STARTS - 526)) | (1L << (STATS_AUTO_RECALC - 526)) | (1L << (STATS_PERSISTENT - 526)) | (1L << (STATS_SAMPLE_PAGES - 526)) | (1L << (STATUS - 526)) | (1L << (STOP - 526)) | (1L << (STORAGE - 526)) | (1L << (STRING - 526)) | (1L << (SUBCLASS_ORIGIN - 526)) | (1L << (SUBJECT - 526)) | (1L << (SUBPARTITION - 526)) | (1L << (SUBPARTITIONS - 526)) | (1L << (SUSPEND - 526)) | (1L << (SWAPS - 526)) | (1L << (SWITCHES - 526)) | (1L << (TABLE_NAME - 526)) | (1L << (TABLESPACE - 526)) | (1L << (TEMPORARY - 526)) | (1L << (TEMPTABLE - 526)) | (1L << (THAN - 526)) | (1L << (TRADITIONAL - 526)) | (1L << (TRANSACTION - 526)) | (1L << (TRANSACTIONAL - 526)) | (1L << (TRIGGERS - 526)) | (1L << (TRUNCATE - 526)) | (1L << (UNDEFINED - 526)) | (1L << (UNDOFILE - 526)) | (1L << (UNDO_BUFFER_SIZE - 526)) | (1L << (UNINSTALL - 526)) | (1L << (UNKNOWN - 526)) | (1L << (UNTIL - 526)) | (1L << (UPGRADE - 526)) | (1L << (USER - 526)) | (1L << (USE_FRM - 526)) | (1L << (USER_RESOURCES - 526)) | (1L << (VALIDATION - 526)) | (1L << (VALUE - 526)) | (1L << (VARIABLES - 526)) | (1L << (VIEW - 526)) | (1L << (VISIBLE - 526)) | (1L << (WAIT - 526)) | (1L << (WARNINGS - 526)) | (1L << (WITHOUT - 526)) | (1L << (WORK - 526)) | (1L << (WRAPPER - 526)) | (1L << (X509 - 526)) | (1L << (XA - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (XML - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)) | (1L << (DAY - 590)) | (1L << (HOUR - 590)) | (1L << (MINUTE - 590)) | (1L << (WEEK - 590)) | (1L << (SECOND - 590)) | (1L << (MICROSECOND - 590)) | (1L << (TABLES - 590)) | (1L << (ROUTINE - 590)) | (1L << (EXECUTE - 590)) | (1L << (FILE - 590)) | (1L << (PROCESS - 590)) | (1L << (RELOAD - 590)) | (1L << (SHUTDOWN - 590)) | (1L << (SUPER - 590)) | (1L << (PRIVILEGES - 590)) | (1L << (AUDIT_ADMIN - 590)) | (1L << (BACKUP_ADMIN - 590)) | (1L << (BINLOG_ADMIN - 590)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 590)) | (1L << (CLONE_ADMIN - 590)) | (1L << (CONNECTION_ADMIN - 590)) | (1L << (ENCRYPTION_KEY_ADMIN - 590)) | (1L << (FIREWALL_ADMIN - 590)) | (1L << (FIREWALL_USER - 590)) | (1L << (GROUP_REPLICATION_ADMIN - 590)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 590)) | (1L << (NDB_STORED_USER - 590)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 590)) | (1L << (REPLICATION_APPLIER - 590)) | (1L << (REPLICATION_SLAVE_ADMIN - 590)) | (1L << (RESOURCE_GROUP_ADMIN - 590)) | (1L << (RESOURCE_GROUP_USER - 590)) | (1L << (ROLE_ADMIN - 590)) | (1L << (SESSION_VARIABLES_ADMIN - 590)) | (1L << (SET_USER_ID - 590)) | (1L << (SHOW_ROUTINE - 590)) | (1L << (SYSTEM_VARIABLES_ADMIN - 590)) | (1L << (TABLE_ENCRYPTION_ADMIN - 590)) | (1L << (VERSION_TOKEN_ADMIN - 590)) | (1L << (XA_RECOVER_ADMIN - 590)) | (1L << (ARMSCII8 - 590)) | (1L << (ASCII - 590)) | (1L << (BIG5 - 590)) | (1L << (CP1250 - 590)) | (1L << (CP1251 - 590)) | (1L << (CP1256 - 590)) | (1L << (CP1257 - 590)) | (1L << (CP850 - 590)) | (1L << (CP852 - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)) | (1L << (GREEK - 654)) | (1L << (HEBREW - 654)) | (1L << (HP8 - 654)) | (1L << (KEYBCS2 - 654)) | (1L << (KOI8R - 654)) | (1L << (KOI8U - 654)) | (1L << (LATIN1 - 654)) | (1L << (LATIN2 - 654)) | (1L << (LATIN5 - 654)) | (1L << (LATIN7 - 654)) | (1L << (MACCE - 654)) | (1L << (MACROMAN - 654)) | (1L << (SJIS - 654)) | (1L << (SWE7 - 654)) | (1L << (TIS620 - 654)) | (1L << (UCS2 - 654)) | (1L << (UJIS - 654)) | (1L << (UTF16 - 654)) | (1L << (UTF16LE - 654)) | (1L << (UTF32 - 654)) | (1L << (UTF8 - 654)) | (1L << (UTF8MB3 - 654)) | (1L << (UTF8MB4 - 654)) | (1L << (ARCHIVE - 654)) | (1L << (BLACKHOLE - 654)) | (1L << (CSV - 654)) | (1L << (FEDERATED - 654)) | (1L << (INNODB - 654)) | (1L << (MEMORY - 654)) | (1L << (MRG_MYISAM - 654)) | (1L << (MYISAM - 654)) | (1L << (NDB - 654)) | (1L << (NDBCLUSTER - 654)) | (1L << (PERFORMANCE_SCHEMA - 654)) | (1L << (TOKUDB - 654)) | (1L << (REPEATABLE - 654)) | (1L << (COMMITTED - 654)) | (1L << (UNCOMMITTED - 654)) | (1L << (SERIALIZABLE - 654)) | (1L << (GEOMETRYCOLLECTION - 654)) | (1L << (LINESTRING - 654)) | (1L << (MULTILINESTRING - 654)) | (1L << (MULTIPOINT - 654)) | (1L << (MULTIPOLYGON - 654)) | (1L << (POINT - 654)) | (1L << (POLYGON - 654)) | (1L << (ABS - 654)) | (1L << (ACOS - 654)) | (1L << (ADDDATE - 654)) | (1L << (ADDTIME - 654)) | (1L << (AES_DECRYPT - 654)) | (1L << (AES_ENCRYPT - 654)) | (1L << (AREA - 654)) | (1L << (ASBINARY - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)) | (1L << (ASYMMETRIC_VERIFY - 718)) | (1L << (ATAN - 718)) | (1L << (ATAN2 - 718)) | (1L << (BENCHMARK - 718)) | (1L << (BIN - 718)) | (1L << (BIT_COUNT - 718)) | (1L << (BIT_LENGTH - 718)) | (1L << (BUFFER - 718)) | (1L << (CATALOG_NAME - 718)) | (1L << (CEIL - 718)) | (1L << (CEILING - 718)) | (1L << (CENTROID - 718)) | (1L << (CHARACTER_LENGTH - 718)) | (1L << (CHARSET - 718)) | (1L << (CHAR_LENGTH - 718)) | (1L << (COERCIBILITY - 718)) | (1L << (COLLATION - 718)) | (1L << (COMPRESS - 718)) | (1L << (CONCAT - 718)) | (1L << (CONCAT_WS - 718)) | (1L << (CONNECTION_ID - 718)) | (1L << (CONV - 718)) | (1L << (CONVERT_TZ - 718)) | (1L << (COS - 718)) | (1L << (COT - 718)) | (1L << (CRC32 - 718)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1L << (CREATE_DH_PARAMETERS - 718)) | (1L << (CREATE_DIGEST - 718)) | (1L << (CROSSES - 718)) | (1L << (DATEDIFF - 718)) | (1L << (DATE_FORMAT - 718)) | (1L << (DAYNAME - 718)) | (1L << (DAYOFMONTH - 718)) | (1L << (DAYOFWEEK - 718)) | (1L << (DAYOFYEAR - 718)) | (1L << (DECODE - 718)) | (1L << (DEGREES - 718)) | (1L << (DES_DECRYPT - 718)) | (1L << (DES_ENCRYPT - 718)) | (1L << (DIMENSION - 718)) | (1L << (DISJOINT - 718)) | (1L << (ELT - 718)) | (1L << (ENCODE - 718)) | (1L << (ENCRYPT - 718)) | (1L << (ENDPOINT - 718)) | (1L << (ENVELOPE - 718)) | (1L << (EQUALS - 718)) | (1L << (EXP - 718)) | (1L << (EXPORT_SET - 718)) | (1L << (EXTERIORRING - 718)) | (1L << (EXTRACTVALUE - 718)) | (1L << (FIELD - 718)) | (1L << (FIND_IN_SET - 718)) | (1L << (FLOOR - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 782)) | (1L << (GEOMETRYFROMTEXT - 782)) | (1L << (GEOMETRYFROMWKB - 782)) | (1L << (GEOMETRYN - 782)) | (1L << (GEOMETRYTYPE - 782)) | (1L << (GEOMFROMTEXT - 782)) | (1L << (GEOMFROMWKB - 782)) | (1L << (GET_FORMAT - 782)) | (1L << (GET_LOCK - 782)) | (1L << (GLENGTH - 782)) | (1L << (GREATEST - 782)) | (1L << (GTID_SUBSET - 782)) | (1L << (GTID_SUBTRACT - 782)) | (1L << (HEX - 782)) | (1L << (IFNULL - 782)) | (1L << (INET6_ATON - 782)) | (1L << (INET6_NTOA - 782)) | (1L << (INET_ATON - 782)) | (1L << (INET_NTOA - 782)) | (1L << (INSTR - 782)) | (1L << (INTERIORRINGN - 782)) | (1L << (INTERSECTS - 782)) | (1L << (ISCLOSED - 782)) | (1L << (ISEMPTY - 782)) | (1L << (ISNULL - 782)) | (1L << (ISSIMPLE - 782)) | (1L << (IS_FREE_LOCK - 782)) | (1L << (IS_IPV4 - 782)) | (1L << (IS_IPV4_COMPAT - 782)) | (1L << (IS_IPV4_MAPPED - 782)) | (1L << (IS_IPV6 - 782)) | (1L << (IS_USED_LOCK - 782)) | (1L << (LAST_INSERT_ID - 782)) | (1L << (LCASE - 782)) | (1L << (LEAST - 782)) | (1L << (LENGTH - 782)) | (1L << (LINEFROMTEXT - 782)) | (1L << (LINEFROMWKB - 782)) | (1L << (LINESTRINGFROMTEXT - 782)) | (1L << (LINESTRINGFROMWKB - 782)) | (1L << (LN - 782)) | (1L << (LOAD_FILE - 782)) | (1L << (LOCATE - 782)) | (1L << (LOG - 782)) | (1L << (LOG10 - 782)) | (1L << (LOG2 - 782)) | (1L << (LOWER - 782)) | (1L << (LPAD - 782)) | (1L << (LTRIM - 782)) | (1L << (MAKEDATE - 782)) | (1L << (MAKETIME - 782)) | (1L << (MAKE_SET - 782)) | (1L << (MASTER_POS_WAIT - 782)) | (1L << (MBRCONTAINS - 782)) | (1L << (MBRDISJOINT - 782)) | (1L << (MBREQUAL - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)) | (1L << (MPOINTFROMTEXT - 846)) | (1L << (MPOINTFROMWKB - 846)) | (1L << (MPOLYFROMTEXT - 846)) | (1L << (MPOLYFROMWKB - 846)) | (1L << (MULTILINESTRINGFROMTEXT - 846)) | (1L << (MULTILINESTRINGFROMWKB - 846)) | (1L << (MULTIPOINTFROMTEXT - 846)) | (1L << (MULTIPOINTFROMWKB - 846)) | (1L << (MULTIPOLYGONFROMTEXT - 846)) | (1L << (MULTIPOLYGONFROMWKB - 846)) | (1L << (NAME_CONST - 846)) | (1L << (NULLIF - 846)) | (1L << (NUMGEOMETRIES - 846)) | (1L << (NUMINTERIORRINGS - 846)) | (1L << (NUMPOINTS - 846)) | (1L << (OCT - 846)) | (1L << (OCTET_LENGTH - 846)) | (1L << (ORD - 846)) | (1L << (OVERLAPS - 846)) | (1L << (PERIOD_ADD - 846)) | (1L << (PERIOD_DIFF - 846)) | (1L << (PI - 846)) | (1L << (POINTFROMTEXT - 846)) | (1L << (POINTFROMWKB - 846)) | (1L << (POINTN - 846)) | (1L << (POLYFROMTEXT - 846)) | (1L << (POLYFROMWKB - 846)) | (1L << (POLYGONFROMTEXT - 846)) | (1L << (POLYGONFROMWKB - 846)) | (1L << (POW - 846)) | (1L << (POWER - 846)) | (1L << (QUOTE - 846)) | (1L << (RADIANS - 846)) | (1L << (RAND - 846)) | (1L << (RANDOM_BYTES - 846)) | (1L << (RELEASE_LOCK - 846)) | (1L << (REVERSE - 846)) | (1L << (ROUND - 846)) | (1L << (ROW_COUNT - 846)) | (1L << (RPAD - 846)) | (1L << (RTRIM - 846)) | (1L << (SEC_TO_TIME - 846)) | (1L << (SESSION_USER - 846)) | (1L << (SHA - 846)) | (1L << (SHA1 - 846)) | (1L << (SHA2 - 846)) | (1L << (SCHEMA_NAME - 846)) | (1L << (SIGN - 846)) | (1L << (SIN - 846)) | (1L << (SLEEP - 846)) | (1L << (SOUNDEX - 846)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 846)) | (1L << (SQRT - 846)) | (1L << (SRID - 846)) | (1L << (STARTPOINT - 846)) | (1L << (STRCMP - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)) | (1L << (ST_CONTAINS - 910)) | (1L << (ST_CROSSES - 910)) | (1L << (ST_DIFFERENCE - 910)) | (1L << (ST_DIMENSION - 910)) | (1L << (ST_DISJOINT - 910)) | (1L << (ST_DISTANCE - 910)) | (1L << (ST_ENDPOINT - 910)) | (1L << (ST_ENVELOPE - 910)) | (1L << (ST_EQUALS - 910)) | (1L << (ST_EXTERIORRING - 910)) | (1L << (ST_GEOMCOLLFROMTEXT - 910)) | (1L << (ST_GEOMCOLLFROMTXT - 910)) | (1L << (ST_GEOMCOLLFROMWKB - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1L << (ST_GEOMETRYFROMTEXT - 910)) | (1L << (ST_GEOMETRYFROMWKB - 910)) | (1L << (ST_GEOMETRYN - 910)) | (1L << (ST_GEOMETRYTYPE - 910)) | (1L << (ST_GEOMFROMTEXT - 910)) | (1L << (ST_GEOMFROMWKB - 910)) | (1L << (ST_INTERIORRINGN - 910)) | (1L << (ST_INTERSECTION - 910)) | (1L << (ST_INTERSECTS - 910)) | (1L << (ST_ISCLOSED - 910)) | (1L << (ST_ISEMPTY - 910)) | (1L << (ST_ISSIMPLE - 910)) | (1L << (ST_LINEFROMTEXT - 910)) | (1L << (ST_LINEFROMWKB - 910)) | (1L << (ST_LINESTRINGFROMTEXT - 910)) | (1L << (ST_LINESTRINGFROMWKB - 910)) | (1L << (ST_NUMGEOMETRIES - 910)) | (1L << (ST_NUMINTERIORRING - 910)) | (1L << (ST_NUMINTERIORRINGS - 910)) | (1L << (ST_NUMPOINTS - 910)) | (1L << (ST_OVERLAPS - 910)) | (1L << (ST_POINTFROMTEXT - 910)) | (1L << (ST_POINTFROMWKB - 910)) | (1L << (ST_POINTN - 910)) | (1L << (ST_POLYFROMTEXT - 910)) | (1L << (ST_POLYFROMWKB - 910)) | (1L << (ST_POLYGONFROMTEXT - 910)) | (1L << (ST_POLYGONFROMWKB - 910)) | (1L << (ST_SRID - 910)) | (1L << (ST_STARTPOINT - 910)) | (1L << (ST_SYMDIFFERENCE - 910)) | (1L << (ST_TOUCHES - 910)) | (1L << (ST_UNION - 910)) | (1L << (ST_WITHIN - 910)) | (1L << (ST_X - 910)) | (1L << (ST_Y - 910)) | (1L << (SUBDATE - 910)) | (1L << (SUBSTRING_INDEX - 910)) | (1L << (SUBTIME - 910)) | (1L << (SYSTEM_USER - 910)) | (1L << (TAN - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)) | (1L << (TO_SECONDS - 974)) | (1L << (UCASE - 974)) | (1L << (UNCOMPRESS - 974)) | (1L << (UNCOMPRESSED_LENGTH - 974)) | (1L << (UNHEX - 974)) | (1L << (UNIX_TIMESTAMP - 974)) | (1L << (UPDATEXML - 974)) | (1L << (UPPER - 974)) | (1L << (UUID - 974)) | (1L << (UUID_SHORT - 974)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 974)) | (1L << (VERSION - 974)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1L << (WEEKDAY - 974)) | (1L << (WEEKOFYEAR - 974)) | (1L << (WEIGHT_STRING - 974)) | (1L << (WITHIN - 974)) | (1L << (YEARWEEK - 974)) | (1L << (Y_FUNCTION - 974)) | (1L << (X_FUNCTION - 974)) | (1L << (MOD - 974)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1040)) | (1L << (STRING_LITERAL - 1040)) | (1L << (ID - 1040)) | (1L << (REVERSE_QUOTE_ID - 1040)))) != 0)) {
					{
					setState(670);
					uid();
					}
				}

				setState(674);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(673);
					indexType();
					}
				}

				setState(676);
				indexColumnNames();
				setState(680);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					setState(677);
					indexOption();
					}
					}
					setState(682);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case FULLTEXT:
			case SPATIAL:
				_localctx = new SpecialIndexDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(683);
				_la = _input.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(685);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(684);
					((SpecialIndexDeclarationContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((SpecialIndexDeclarationContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(688);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (GROUP - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (ORDER - 105)) | (1L << (RIGHT - 105)) | (1L << (SCHEMA - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (DATE - 199)) | (1L << (TIME - 199)) | (1L << (TIMESTAMP - 199)) | (1L << (DATETIME - 199)) | (1L << (YEAR - 199)) | (1L << (TEXT - 199)) | (1L << (ENUM - 199)) | (1L << (SERIAL - 199)) | (1L << (JSON_VALID - 199)) | (1L << (JSON_SCHEMA_VALID - 199)) | (1L << (AVG - 199)) | (1L << (BIT_AND - 199)) | (1L << (BIT_OR - 199)) | (1L << (BIT_XOR - 199)) | (1L << (COUNT - 199)) | (1L << (GROUP_CONCAT - 199)) | (1L << (MAX - 199)) | (1L << (MIN - 199)) | (1L << (STD - 199)) | (1L << (STDDEV - 199)) | (1L << (STDDEV_POP - 199)) | (1L << (STDDEV_SAMP - 199)) | (1L << (SUM - 199)) | (1L << (VAR_POP - 199)) | (1L << (VAR_SAMP - 199)) | (1L << (VARIANCE - 199)) | (1L << (POSITION - 199)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)) | (1L << (BOOL - 270)) | (1L << (BOOLEAN - 270)) | (1L << (BTREE - 270)) | (1L << (CACHE - 270)) | (1L << (CASCADED - 270)) | (1L << (CHAIN - 270)) | (1L << (CHANGED - 270)) | (1L << (CHANNEL - 270)) | (1L << (CHECKSUM - 270)) | (1L << (PAGE_CHECKSUM - 270)) | (1L << (CIPHER - 270)) | (1L << (CLASS_ORIGIN - 270)) | (1L << (CLIENT - 270)) | (1L << (CLOSE - 270)) | (1L << (COALESCE - 270)) | (1L << (CODE - 270)) | (1L << (COLUMNS - 270)) | (1L << (COLUMN_FORMAT - 270)) | (1L << (COLUMN_NAME - 270)) | (1L << (COMMENT - 270)) | (1L << (COMMIT - 270)) | (1L << (COMPACT - 270)) | (1L << (COMPLETION - 270)) | (1L << (COMPRESSED - 270)) | (1L << (COMPRESSION - 270)) | (1L << (CONCURRENT - 270)) | (1L << (CONNECTION - 270)) | (1L << (CONSISTENT - 270)) | (1L << (CONSTRAINT_CATALOG - 270)) | (1L << (CONSTRAINT_SCHEMA - 270)) | (1L << (CONSTRAINT_NAME - 270)) | (1L << (CONTAINS - 270)) | (1L << (CONTEXT - 270)) | (1L << (CONTRIBUTORS - 270)) | (1L << (COPY - 270)) | (1L << (CPU - 270)) | (1L << (CURSOR_NAME - 270)) | (1L << (DATA - 270)) | (1L << (DATAFILE - 270)) | (1L << (DEALLOCATE - 270)) | (1L << (DEFAULT_AUTH - 270)) | (1L << (DEFINER - 270)) | (1L << (DELAY_KEY_WRITE - 270)) | (1L << (DES_KEY_FILE - 270)) | (1L << (DIRECTORY - 270)) | (1L << (DISABLE - 270)) | (1L << (DISCARD - 270)) | (1L << (DISK - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)) | (1L << (EVENTS - 334)) | (1L << (EVERY - 334)) | (1L << (EXCHANGE - 334)) | (1L << (EXCLUSIVE - 334)) | (1L << (EXPIRE - 334)) | (1L << (EXPORT - 334)) | (1L << (EXTENDED - 334)) | (1L << (EXTENT_SIZE - 334)) | (1L << (FAST - 334)) | (1L << (FAULTS - 334)) | (1L << (FIELDS - 334)) | (1L << (FILE_BLOCK_SIZE - 334)) | (1L << (FILTER - 334)) | (1L << (FIRST - 334)) | (1L << (FIXED - 334)) | (1L << (FLUSH - 334)) | (1L << (FOLLOWS - 334)) | (1L << (FOUND - 334)) | (1L << (FULL - 334)) | (1L << (FUNCTION - 334)) | (1L << (GENERAL - 334)) | (1L << (GLOBAL - 334)) | (1L << (GRANTS - 334)) | (1L << (GROUP_REPLICATION - 334)) | (1L << (HANDLER - 334)) | (1L << (HASH - 334)) | (1L << (HELP - 334)) | (1L << (HOST - 334)) | (1L << (HOSTS - 334)) | (1L << (IDENTIFIED - 334)) | (1L << (IGNORE_SERVER_IDS - 334)) | (1L << (IMPORT - 334)) | (1L << (INDEXES - 334)) | (1L << (INITIAL_SIZE - 334)) | (1L << (INPLACE - 334)) | (1L << (INSERT_METHOD - 334)) | (1L << (INSTALL - 334)) | (1L << (INSTANCE - 334)) | (1L << (INVISIBLE - 334)) | (1L << (INVOKER - 334)) | (1L << (IO - 334)) | (1L << (IO_THREAD - 334)) | (1L << (IPC - 334)) | (1L << (ISOLATION - 334)) | (1L << (ISSUER - 334)) | (1L << (JSON - 334)) | (1L << (KEY_BLOCK_SIZE - 334)) | (1L << (LANGUAGE - 334)) | (1L << (LAST - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)) | (1L << (MASTER_LOG_POS - 398)) | (1L << (MASTER_PASSWORD - 398)) | (1L << (MASTER_PORT - 398)) | (1L << (MASTER_RETRY_COUNT - 398)) | (1L << (MASTER_SSL - 398)) | (1L << (MASTER_SSL_CA - 398)) | (1L << (MASTER_SSL_CAPATH - 398)) | (1L << (MASTER_SSL_CERT - 398)) | (1L << (MASTER_SSL_CIPHER - 398)) | (1L << (MASTER_SSL_CRL - 398)) | (1L << (MASTER_SSL_CRLPATH - 398)) | (1L << (MASTER_SSL_KEY - 398)) | (1L << (MASTER_TLS_VERSION - 398)) | (1L << (MASTER_USER - 398)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 398)) | (1L << (MAX_QUERIES_PER_HOUR - 398)) | (1L << (MAX_ROWS - 398)) | (1L << (MAX_SIZE - 398)) | (1L << (MAX_UPDATES_PER_HOUR - 398)) | (1L << (MAX_USER_CONNECTIONS - 398)) | (1L << (MEDIUM - 398)) | (1L << (MEMBER - 398)) | (1L << (MERGE - 398)) | (1L << (MESSAGE_TEXT - 398)) | (1L << (MID - 398)) | (1L << (MIGRATE - 398)) | (1L << (MIN_ROWS - 398)) | (1L << (MODE - 398)) | (1L << (MODIFY - 398)) | (1L << (MUTEX - 398)) | (1L << (MYSQL - 398)) | (1L << (MYSQL_ERRNO - 398)) | (1L << (NAME - 398)) | (1L << (NAMES - 398)) | (1L << (NCHAR - 398)) | (1L << (NEVER - 398)) | (1L << (NEXT - 398)) | (1L << (NO - 398)) | (1L << (NODEGROUP - 398)) | (1L << (NONE - 398)) | (1L << (OFFLINE - 398)) | (1L << (OFFSET - 398)) | (1L << (OF - 398)) | (1L << (OJ - 398)) | (1L << (OLD_PASSWORD - 398)) | (1L << (ONE - 398)) | (1L << (ONLINE - 398)) | (1L << (ONLY - 398)) | (1L << (OPEN - 398)) | (1L << (OPTIMIZER_COSTS - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)) | (1L << (PORT - 462)) | (1L << (PRECEDES - 462)) | (1L << (PREPARE - 462)) | (1L << (PRESERVE - 462)) | (1L << (PREV - 462)) | (1L << (PROCESSLIST - 462)) | (1L << (PROFILE - 462)) | (1L << (PROFILES - 462)) | (1L << (PROXY - 462)) | (1L << (QUERY - 462)) | (1L << (QUICK - 462)) | (1L << (REBUILD - 462)) | (1L << (RECOVER - 462)) | (1L << (REDO_BUFFER_SIZE - 462)) | (1L << (REDUNDANT - 462)) | (1L << (RELAY - 462)) | (1L << (RELAY_LOG_FILE - 462)) | (1L << (RELAY_LOG_POS - 462)) | (1L << (RELAYLOG - 462)) | (1L << (REMOVE - 462)) | (1L << (REORGANIZE - 462)) | (1L << (REPAIR - 462)) | (1L << (REPLICATE_DO_DB - 462)) | (1L << (REPLICATE_DO_TABLE - 462)) | (1L << (REPLICATE_IGNORE_DB - 462)) | (1L << (REPLICATE_IGNORE_TABLE - 462)) | (1L << (REPLICATE_REWRITE_DB - 462)) | (1L << (REPLICATE_WILD_DO_TABLE - 462)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 462)) | (1L << (REPLICATION - 462)) | (1L << (RESET - 462)) | (1L << (RESUME - 462)) | (1L << (RETURNED_SQLSTATE - 462)) | (1L << (RETURNS - 462)) | (1L << (ROLE - 462)) | (1L << (ROLLBACK - 462)) | (1L << (ROLLUP - 462)) | (1L << (ROTATE - 462)) | (1L << (ROW - 462)) | (1L << (ROWS - 462)) | (1L << (ROW_FORMAT - 462)) | (1L << (SAVEPOINT - 462)) | (1L << (SCHEDULE - 462)) | (1L << (SECURITY - 462)) | (1L << (SERVER - 462)) | (1L << (SESSION - 462)) | (1L << (SHARE - 462)) | (1L << (SHARED - 462)) | (1L << (SIGNED - 462)) | (1L << (SIMPLE - 462)) | (1L << (SLAVE - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)) | (1L << (SQL_CACHE - 526)) | (1L << (SQL_NO_CACHE - 526)) | (1L << (SQL_THREAD - 526)) | (1L << (START - 526)) | (1L << (STARTS - 526)) | (1L << (STATS_AUTO_RECALC - 526)) | (1L << (STATS_PERSISTENT - 526)) | (1L << (STATS_SAMPLE_PAGES - 526)) | (1L << (STATUS - 526)) | (1L << (STOP - 526)) | (1L << (STORAGE - 526)) | (1L << (STRING - 526)) | (1L << (SUBCLASS_ORIGIN - 526)) | (1L << (SUBJECT - 526)) | (1L << (SUBPARTITION - 526)) | (1L << (SUBPARTITIONS - 526)) | (1L << (SUSPEND - 526)) | (1L << (SWAPS - 526)) | (1L << (SWITCHES - 526)) | (1L << (TABLE_NAME - 526)) | (1L << (TABLESPACE - 526)) | (1L << (TEMPORARY - 526)) | (1L << (TEMPTABLE - 526)) | (1L << (THAN - 526)) | (1L << (TRADITIONAL - 526)) | (1L << (TRANSACTION - 526)) | (1L << (TRANSACTIONAL - 526)) | (1L << (TRIGGERS - 526)) | (1L << (TRUNCATE - 526)) | (1L << (UNDEFINED - 526)) | (1L << (UNDOFILE - 526)) | (1L << (UNDO_BUFFER_SIZE - 526)) | (1L << (UNINSTALL - 526)) | (1L << (UNKNOWN - 526)) | (1L << (UNTIL - 526)) | (1L << (UPGRADE - 526)) | (1L << (USER - 526)) | (1L << (USE_FRM - 526)) | (1L << (USER_RESOURCES - 526)) | (1L << (VALIDATION - 526)) | (1L << (VALUE - 526)) | (1L << (VARIABLES - 526)) | (1L << (VIEW - 526)) | (1L << (VISIBLE - 526)) | (1L << (WAIT - 526)) | (1L << (WARNINGS - 526)) | (1L << (WITHOUT - 526)) | (1L << (WORK - 526)) | (1L << (WRAPPER - 526)) | (1L << (X509 - 526)) | (1L << (XA - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (XML - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)) | (1L << (DAY - 590)) | (1L << (HOUR - 590)) | (1L << (MINUTE - 590)) | (1L << (WEEK - 590)) | (1L << (SECOND - 590)) | (1L << (MICROSECOND - 590)) | (1L << (TABLES - 590)) | (1L << (ROUTINE - 590)) | (1L << (EXECUTE - 590)) | (1L << (FILE - 590)) | (1L << (PROCESS - 590)) | (1L << (RELOAD - 590)) | (1L << (SHUTDOWN - 590)) | (1L << (SUPER - 590)) | (1L << (PRIVILEGES - 590)) | (1L << (AUDIT_ADMIN - 590)) | (1L << (BACKUP_ADMIN - 590)) | (1L << (BINLOG_ADMIN - 590)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 590)) | (1L << (CLONE_ADMIN - 590)) | (1L << (CONNECTION_ADMIN - 590)) | (1L << (ENCRYPTION_KEY_ADMIN - 590)) | (1L << (FIREWALL_ADMIN - 590)) | (1L << (FIREWALL_USER - 590)) | (1L << (GROUP_REPLICATION_ADMIN - 590)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 590)) | (1L << (NDB_STORED_USER - 590)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 590)) | (1L << (REPLICATION_APPLIER - 590)) | (1L << (REPLICATION_SLAVE_ADMIN - 590)) | (1L << (RESOURCE_GROUP_ADMIN - 590)) | (1L << (RESOURCE_GROUP_USER - 590)) | (1L << (ROLE_ADMIN - 590)) | (1L << (SESSION_VARIABLES_ADMIN - 590)) | (1L << (SET_USER_ID - 590)) | (1L << (SHOW_ROUTINE - 590)) | (1L << (SYSTEM_VARIABLES_ADMIN - 590)) | (1L << (TABLE_ENCRYPTION_ADMIN - 590)) | (1L << (VERSION_TOKEN_ADMIN - 590)) | (1L << (XA_RECOVER_ADMIN - 590)) | (1L << (ARMSCII8 - 590)) | (1L << (ASCII - 590)) | (1L << (BIG5 - 590)) | (1L << (CP1250 - 590)) | (1L << (CP1251 - 590)) | (1L << (CP1256 - 590)) | (1L << (CP1257 - 590)) | (1L << (CP850 - 590)) | (1L << (CP852 - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)) | (1L << (GREEK - 654)) | (1L << (HEBREW - 654)) | (1L << (HP8 - 654)) | (1L << (KEYBCS2 - 654)) | (1L << (KOI8R - 654)) | (1L << (KOI8U - 654)) | (1L << (LATIN1 - 654)) | (1L << (LATIN2 - 654)) | (1L << (LATIN5 - 654)) | (1L << (LATIN7 - 654)) | (1L << (MACCE - 654)) | (1L << (MACROMAN - 654)) | (1L << (SJIS - 654)) | (1L << (SWE7 - 654)) | (1L << (TIS620 - 654)) | (1L << (UCS2 - 654)) | (1L << (UJIS - 654)) | (1L << (UTF16 - 654)) | (1L << (UTF16LE - 654)) | (1L << (UTF32 - 654)) | (1L << (UTF8 - 654)) | (1L << (UTF8MB3 - 654)) | (1L << (UTF8MB4 - 654)) | (1L << (ARCHIVE - 654)) | (1L << (BLACKHOLE - 654)) | (1L << (CSV - 654)) | (1L << (FEDERATED - 654)) | (1L << (INNODB - 654)) | (1L << (MEMORY - 654)) | (1L << (MRG_MYISAM - 654)) | (1L << (MYISAM - 654)) | (1L << (NDB - 654)) | (1L << (NDBCLUSTER - 654)) | (1L << (PERFORMANCE_SCHEMA - 654)) | (1L << (TOKUDB - 654)) | (1L << (REPEATABLE - 654)) | (1L << (COMMITTED - 654)) | (1L << (UNCOMMITTED - 654)) | (1L << (SERIALIZABLE - 654)) | (1L << (GEOMETRYCOLLECTION - 654)) | (1L << (LINESTRING - 654)) | (1L << (MULTILINESTRING - 654)) | (1L << (MULTIPOINT - 654)) | (1L << (MULTIPOLYGON - 654)) | (1L << (POINT - 654)) | (1L << (POLYGON - 654)) | (1L << (ABS - 654)) | (1L << (ACOS - 654)) | (1L << (ADDDATE - 654)) | (1L << (ADDTIME - 654)) | (1L << (AES_DECRYPT - 654)) | (1L << (AES_ENCRYPT - 654)) | (1L << (AREA - 654)) | (1L << (ASBINARY - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)) | (1L << (ASYMMETRIC_VERIFY - 718)) | (1L << (ATAN - 718)) | (1L << (ATAN2 - 718)) | (1L << (BENCHMARK - 718)) | (1L << (BIN - 718)) | (1L << (BIT_COUNT - 718)) | (1L << (BIT_LENGTH - 718)) | (1L << (BUFFER - 718)) | (1L << (CATALOG_NAME - 718)) | (1L << (CEIL - 718)) | (1L << (CEILING - 718)) | (1L << (CENTROID - 718)) | (1L << (CHARACTER_LENGTH - 718)) | (1L << (CHARSET - 718)) | (1L << (CHAR_LENGTH - 718)) | (1L << (COERCIBILITY - 718)) | (1L << (COLLATION - 718)) | (1L << (COMPRESS - 718)) | (1L << (CONCAT - 718)) | (1L << (CONCAT_WS - 718)) | (1L << (CONNECTION_ID - 718)) | (1L << (CONV - 718)) | (1L << (CONVERT_TZ - 718)) | (1L << (COS - 718)) | (1L << (COT - 718)) | (1L << (CRC32 - 718)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1L << (CREATE_DH_PARAMETERS - 718)) | (1L << (CREATE_DIGEST - 718)) | (1L << (CROSSES - 718)) | (1L << (DATEDIFF - 718)) | (1L << (DATE_FORMAT - 718)) | (1L << (DAYNAME - 718)) | (1L << (DAYOFMONTH - 718)) | (1L << (DAYOFWEEK - 718)) | (1L << (DAYOFYEAR - 718)) | (1L << (DECODE - 718)) | (1L << (DEGREES - 718)) | (1L << (DES_DECRYPT - 718)) | (1L << (DES_ENCRYPT - 718)) | (1L << (DIMENSION - 718)) | (1L << (DISJOINT - 718)) | (1L << (ELT - 718)) | (1L << (ENCODE - 718)) | (1L << (ENCRYPT - 718)) | (1L << (ENDPOINT - 718)) | (1L << (ENVELOPE - 718)) | (1L << (EQUALS - 718)) | (1L << (EXP - 718)) | (1L << (EXPORT_SET - 718)) | (1L << (EXTERIORRING - 718)) | (1L << (EXTRACTVALUE - 718)) | (1L << (FIELD - 718)) | (1L << (FIND_IN_SET - 718)) | (1L << (FLOOR - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 782)) | (1L << (GEOMETRYFROMTEXT - 782)) | (1L << (GEOMETRYFROMWKB - 782)) | (1L << (GEOMETRYN - 782)) | (1L << (GEOMETRYTYPE - 782)) | (1L << (GEOMFROMTEXT - 782)) | (1L << (GEOMFROMWKB - 782)) | (1L << (GET_FORMAT - 782)) | (1L << (GET_LOCK - 782)) | (1L << (GLENGTH - 782)) | (1L << (GREATEST - 782)) | (1L << (GTID_SUBSET - 782)) | (1L << (GTID_SUBTRACT - 782)) | (1L << (HEX - 782)) | (1L << (IFNULL - 782)) | (1L << (INET6_ATON - 782)) | (1L << (INET6_NTOA - 782)) | (1L << (INET_ATON - 782)) | (1L << (INET_NTOA - 782)) | (1L << (INSTR - 782)) | (1L << (INTERIORRINGN - 782)) | (1L << (INTERSECTS - 782)) | (1L << (ISCLOSED - 782)) | (1L << (ISEMPTY - 782)) | (1L << (ISNULL - 782)) | (1L << (ISSIMPLE - 782)) | (1L << (IS_FREE_LOCK - 782)) | (1L << (IS_IPV4 - 782)) | (1L << (IS_IPV4_COMPAT - 782)) | (1L << (IS_IPV4_MAPPED - 782)) | (1L << (IS_IPV6 - 782)) | (1L << (IS_USED_LOCK - 782)) | (1L << (LAST_INSERT_ID - 782)) | (1L << (LCASE - 782)) | (1L << (LEAST - 782)) | (1L << (LENGTH - 782)) | (1L << (LINEFROMTEXT - 782)) | (1L << (LINEFROMWKB - 782)) | (1L << (LINESTRINGFROMTEXT - 782)) | (1L << (LINESTRINGFROMWKB - 782)) | (1L << (LN - 782)) | (1L << (LOAD_FILE - 782)) | (1L << (LOCATE - 782)) | (1L << (LOG - 782)) | (1L << (LOG10 - 782)) | (1L << (LOG2 - 782)) | (1L << (LOWER - 782)) | (1L << (LPAD - 782)) | (1L << (LTRIM - 782)) | (1L << (MAKEDATE - 782)) | (1L << (MAKETIME - 782)) | (1L << (MAKE_SET - 782)) | (1L << (MASTER_POS_WAIT - 782)) | (1L << (MBRCONTAINS - 782)) | (1L << (MBRDISJOINT - 782)) | (1L << (MBREQUAL - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)) | (1L << (MPOINTFROMTEXT - 846)) | (1L << (MPOINTFROMWKB - 846)) | (1L << (MPOLYFROMTEXT - 846)) | (1L << (MPOLYFROMWKB - 846)) | (1L << (MULTILINESTRINGFROMTEXT - 846)) | (1L << (MULTILINESTRINGFROMWKB - 846)) | (1L << (MULTIPOINTFROMTEXT - 846)) | (1L << (MULTIPOINTFROMWKB - 846)) | (1L << (MULTIPOLYGONFROMTEXT - 846)) | (1L << (MULTIPOLYGONFROMWKB - 846)) | (1L << (NAME_CONST - 846)) | (1L << (NULLIF - 846)) | (1L << (NUMGEOMETRIES - 846)) | (1L << (NUMINTERIORRINGS - 846)) | (1L << (NUMPOINTS - 846)) | (1L << (OCT - 846)) | (1L << (OCTET_LENGTH - 846)) | (1L << (ORD - 846)) | (1L << (OVERLAPS - 846)) | (1L << (PERIOD_ADD - 846)) | (1L << (PERIOD_DIFF - 846)) | (1L << (PI - 846)) | (1L << (POINTFROMTEXT - 846)) | (1L << (POINTFROMWKB - 846)) | (1L << (POINTN - 846)) | (1L << (POLYFROMTEXT - 846)) | (1L << (POLYFROMWKB - 846)) | (1L << (POLYGONFROMTEXT - 846)) | (1L << (POLYGONFROMWKB - 846)) | (1L << (POW - 846)) | (1L << (POWER - 846)) | (1L << (QUOTE - 846)) | (1L << (RADIANS - 846)) | (1L << (RAND - 846)) | (1L << (RANDOM_BYTES - 846)) | (1L << (RELEASE_LOCK - 846)) | (1L << (REVERSE - 846)) | (1L << (ROUND - 846)) | (1L << (ROW_COUNT - 846)) | (1L << (RPAD - 846)) | (1L << (RTRIM - 846)) | (1L << (SEC_TO_TIME - 846)) | (1L << (SESSION_USER - 846)) | (1L << (SHA - 846)) | (1L << (SHA1 - 846)) | (1L << (SHA2 - 846)) | (1L << (SCHEMA_NAME - 846)) | (1L << (SIGN - 846)) | (1L << (SIN - 846)) | (1L << (SLEEP - 846)) | (1L << (SOUNDEX - 846)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 846)) | (1L << (SQRT - 846)) | (1L << (SRID - 846)) | (1L << (STARTPOINT - 846)) | (1L << (STRCMP - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)) | (1L << (ST_CONTAINS - 910)) | (1L << (ST_CROSSES - 910)) | (1L << (ST_DIFFERENCE - 910)) | (1L << (ST_DIMENSION - 910)) | (1L << (ST_DISJOINT - 910)) | (1L << (ST_DISTANCE - 910)) | (1L << (ST_ENDPOINT - 910)) | (1L << (ST_ENVELOPE - 910)) | (1L << (ST_EQUALS - 910)) | (1L << (ST_EXTERIORRING - 910)) | (1L << (ST_GEOMCOLLFROMTEXT - 910)) | (1L << (ST_GEOMCOLLFROMTXT - 910)) | (1L << (ST_GEOMCOLLFROMWKB - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1L << (ST_GEOMETRYFROMTEXT - 910)) | (1L << (ST_GEOMETRYFROMWKB - 910)) | (1L << (ST_GEOMETRYN - 910)) | (1L << (ST_GEOMETRYTYPE - 910)) | (1L << (ST_GEOMFROMTEXT - 910)) | (1L << (ST_GEOMFROMWKB - 910)) | (1L << (ST_INTERIORRINGN - 910)) | (1L << (ST_INTERSECTION - 910)) | (1L << (ST_INTERSECTS - 910)) | (1L << (ST_ISCLOSED - 910)) | (1L << (ST_ISEMPTY - 910)) | (1L << (ST_ISSIMPLE - 910)) | (1L << (ST_LINEFROMTEXT - 910)) | (1L << (ST_LINEFROMWKB - 910)) | (1L << (ST_LINESTRINGFROMTEXT - 910)) | (1L << (ST_LINESTRINGFROMWKB - 910)) | (1L << (ST_NUMGEOMETRIES - 910)) | (1L << (ST_NUMINTERIORRING - 910)) | (1L << (ST_NUMINTERIORRINGS - 910)) | (1L << (ST_NUMPOINTS - 910)) | (1L << (ST_OVERLAPS - 910)) | (1L << (ST_POINTFROMTEXT - 910)) | (1L << (ST_POINTFROMWKB - 910)) | (1L << (ST_POINTN - 910)) | (1L << (ST_POLYFROMTEXT - 910)) | (1L << (ST_POLYFROMWKB - 910)) | (1L << (ST_POLYGONFROMTEXT - 910)) | (1L << (ST_POLYGONFROMWKB - 910)) | (1L << (ST_SRID - 910)) | (1L << (ST_STARTPOINT - 910)) | (1L << (ST_SYMDIFFERENCE - 910)) | (1L << (ST_TOUCHES - 910)) | (1L << (ST_UNION - 910)) | (1L << (ST_WITHIN - 910)) | (1L << (ST_X - 910)) | (1L << (ST_Y - 910)) | (1L << (SUBDATE - 910)) | (1L << (SUBSTRING_INDEX - 910)) | (1L << (SUBTIME - 910)) | (1L << (SYSTEM_USER - 910)) | (1L << (TAN - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)) | (1L << (TO_SECONDS - 974)) | (1L << (UCASE - 974)) | (1L << (UNCOMPRESS - 974)) | (1L << (UNCOMPRESSED_LENGTH - 974)) | (1L << (UNHEX - 974)) | (1L << (UNIX_TIMESTAMP - 974)) | (1L << (UPDATEXML - 974)) | (1L << (UPPER - 974)) | (1L << (UUID - 974)) | (1L << (UUID_SHORT - 974)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 974)) | (1L << (VERSION - 974)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1L << (WEEKDAY - 974)) | (1L << (WEEKOFYEAR - 974)) | (1L << (WEIGHT_STRING - 974)) | (1L << (WITHIN - 974)) | (1L << (YEARWEEK - 974)) | (1L << (Y_FUNCTION - 974)) | (1L << (X_FUNCTION - 974)) | (1L << (MOD - 974)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1040)) | (1L << (STRING_LITERAL - 1040)) | (1L << (ID - 1040)) | (1L << (REVERSE_QUOTE_ID - 1040)))) != 0)) {
					{
					setState(687);
					uid();
					}
				}

				setState(690);
				indexColumnNames();
				setState(694);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					setState(691);
					indexOption();
					}
					}
					setState(696);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableOptionContext extends ParserRuleContext {
		public TableOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableOption; }
	 
		public TableOptionContext() { }
		public void copyFrom(TableOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class TableOptionEngineContext extends TableOptionContext {
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionEngineContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionEngine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionEngine(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionEngine(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionMaxRowsContext extends TableOptionContext {
		public TerminalNode MAX_ROWS() { return getToken(MySqlParser.MAX_ROWS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionMaxRowsContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionMaxRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionMaxRows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionMaxRows(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionCollateContext extends TableOptionContext {
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCollateContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionCollate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionCollate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionCollate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionPersistentContext extends TableOptionContext {
		public Token extBoolValue;
		public TerminalNode STATS_PERSISTENT() { return getToken(MySqlParser.STATS_PERSISTENT, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionPersistentContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionPersistent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionPersistent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionPersistent(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionTablespaceContext extends TableOptionContext {
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TablespaceStorageContext tablespaceStorage() {
			return getRuleContext(TablespaceStorageContext.class,0);
		}
		public TableOptionTablespaceContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionTablespace(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionPackKeysContext extends TableOptionContext {
		public Token extBoolValue;
		public TerminalNode PACK_KEYS() { return getToken(MySqlParser.PACK_KEYS, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionPackKeysContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionPackKeys(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionPackKeys(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionPackKeys(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionPasswordContext extends TableOptionContext {
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionPasswordContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionPassword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionPassword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionPassword(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionUnionContext extends TableOptionContext {
		public TerminalNode UNION() { return getToken(MySqlParser.UNION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionUnionContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionUnion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionUnion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionUnion(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionSamplePageContext extends TableOptionContext {
		public TerminalNode STATS_SAMPLE_PAGES() { return getToken(MySqlParser.STATS_SAMPLE_PAGES, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionSamplePageContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionSamplePage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionSamplePage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionSamplePage(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionCharsetContext extends TableOptionContext {
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode CHARSET() { return getToken(MySqlParser.CHARSET, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(MySqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(MySqlParser.DEFAULT, i);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCharsetContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionCharset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionCharset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionCharset(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionIndexDirectoryContext extends TableOptionContext {
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySqlParser.DIRECTORY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionIndexDirectoryContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionIndexDirectory(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionIndexDirectory(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionIndexDirectory(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionKeyBlockSizeContext extends TableOptionContext {
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionKeyBlockSizeContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionKeyBlockSize(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionKeyBlockSize(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionKeyBlockSize(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionEncryptionContext extends TableOptionContext {
		public TerminalNode ENCRYPTION() { return getToken(MySqlParser.ENCRYPTION, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionEncryptionContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionEncryption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionEncryption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionEncryption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionDataDirectoryContext extends TableOptionContext {
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySqlParser.DIRECTORY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionDataDirectoryContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionDataDirectory(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionDataDirectory(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionDataDirectory(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionRecalculationContext extends TableOptionContext {
		public Token extBoolValue;
		public TerminalNode STATS_AUTO_RECALC() { return getToken(MySqlParser.STATS_AUTO_RECALC, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionRecalculationContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionRecalculation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionRecalculation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionRecalculation(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionAutoIncrementContext extends TableOptionContext {
		public TerminalNode AUTO_INCREMENT() { return getToken(MySqlParser.AUTO_INCREMENT, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionAutoIncrementContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionAutoIncrement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionAutoIncrement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionAutoIncrement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionChecksumContext extends TableOptionContext {
		public Token boolValue;
		public TerminalNode CHECKSUM() { return getToken(MySqlParser.CHECKSUM, 0); }
		public TerminalNode PAGE_CHECKSUM() { return getToken(MySqlParser.PAGE_CHECKSUM, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionChecksumContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionChecksum(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionChecksum(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionChecksum(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionDelayContext extends TableOptionContext {
		public Token boolValue;
		public TerminalNode DELAY_KEY_WRITE() { return getToken(MySqlParser.DELAY_KEY_WRITE, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionDelayContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionDelay(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionDelay(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionDelay(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionConnectionContext extends TableOptionContext {
		public TerminalNode CONNECTION() { return getToken(MySqlParser.CONNECTION, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionConnectionContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionConnection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionConnection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionConnection(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionCommentContext extends TableOptionContext {
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCommentContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionComment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionComment(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionAverageContext extends TableOptionContext {
		public TerminalNode AVG_ROW_LENGTH() { return getToken(MySqlParser.AVG_ROW_LENGTH, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionAverageContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionAverage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionAverage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionAverage(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionRowFormatContext extends TableOptionContext {
		public Token rowFormat;
		public TerminalNode ROW_FORMAT() { return getToken(MySqlParser.ROW_FORMAT, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode DYNAMIC() { return getToken(MySqlParser.DYNAMIC, 0); }
		public TerminalNode FIXED() { return getToken(MySqlParser.FIXED, 0); }
		public TerminalNode COMPRESSED() { return getToken(MySqlParser.COMPRESSED, 0); }
		public TerminalNode REDUNDANT() { return getToken(MySqlParser.REDUNDANT, 0); }
		public TerminalNode COMPACT() { return getToken(MySqlParser.COMPACT, 0); }
		public TerminalNode ID() { return getToken(MySqlParser.ID, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionRowFormatContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionRowFormat(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionRowFormat(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionRowFormat(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionCompressionContext extends TableOptionContext {
		public TerminalNode COMPRESSION() { return getToken(MySqlParser.COMPRESSION, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode ID() { return getToken(MySqlParser.ID, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCompressionContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionCompression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionCompression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionCompression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionInsertMethodContext extends TableOptionContext {
		public Token insertMethod;
		public TerminalNode INSERT_METHOD() { return getToken(MySqlParser.INSERT_METHOD, 0); }
		public TerminalNode NO() { return getToken(MySqlParser.NO, 0); }
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(MySqlParser.LAST, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionInsertMethodContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionInsertMethod(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionInsertMethod(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionInsertMethod(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionMinRowsContext extends TableOptionContext {
		public TerminalNode MIN_ROWS() { return getToken(MySqlParser.MIN_ROWS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionMinRowsContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionMinRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionMinRows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionMinRows(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableOptionContext tableOption() throws RecognitionException {
		TableOptionContext _localctx = new TableOptionContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_tableOption);
		int _la;
		try {
			setState(843);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,119,_ctx) ) {
			case 1:
				_localctx = new TableOptionEngineContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(699);
				match(ENGINE);
				setState(701);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(700);
					match(EQUAL_SYMBOL);
					}
				}

				setState(703);
				engineName();
				}
				break;
			case 2:
				_localctx = new TableOptionAutoIncrementContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(704);
				match(AUTO_INCREMENT);
				setState(706);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(705);
					match(EQUAL_SYMBOL);
					}
				}

				setState(708);
				decimalLiteral();
				}
				break;
			case 3:
				_localctx = new TableOptionAverageContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(709);
				match(AVG_ROW_LENGTH);
				setState(711);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(710);
					match(EQUAL_SYMBOL);
					}
				}

				setState(713);
				decimalLiteral();
				}
				break;
			case 4:
				_localctx = new TableOptionCharsetContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(715);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(714);
					match(DEFAULT);
					}
				}

				setState(720);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHARACTER:
					{
					setState(717);
					match(CHARACTER);
					setState(718);
					match(SET);
					}
					break;
				case CHARSET:
					{
					setState(719);
					match(CHARSET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(723);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(722);
					match(EQUAL_SYMBOL);
					}
				}

				setState(727);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					setState(725);
					charsetName();
					}
					break;
				case DEFAULT:
					{
					setState(726);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 5:
				_localctx = new TableOptionChecksumContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(729);
				_la = _input.LA(1);
				if ( !(_la==CHECKSUM || _la==PAGE_CHECKSUM) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(731);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(730);
					match(EQUAL_SYMBOL);
					}
				}

				setState(733);
				((TableOptionChecksumContext)_localctx).boolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionChecksumContext)_localctx).boolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 6:
				_localctx = new TableOptionCollateContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(735);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(734);
					match(DEFAULT);
					}
				}

				setState(737);
				match(COLLATE);
				setState(739);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(738);
					match(EQUAL_SYMBOL);
					}
				}

				setState(741);
				collationName();
				}
				break;
			case 7:
				_localctx = new TableOptionCommentContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(742);
				match(COMMENT);
				setState(744);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(743);
					match(EQUAL_SYMBOL);
					}
				}

				setState(746);
				match(STRING_LITERAL);
				}
				break;
			case 8:
				_localctx = new TableOptionCompressionContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(747);
				match(COMPRESSION);
				setState(749);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(748);
					match(EQUAL_SYMBOL);
					}
				}

				setState(751);
				_la = _input.LA(1);
				if ( !(_la==STRING_LITERAL || _la==ID) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 9:
				_localctx = new TableOptionConnectionContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(752);
				match(CONNECTION);
				setState(754);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(753);
					match(EQUAL_SYMBOL);
					}
				}

				setState(756);
				match(STRING_LITERAL);
				}
				break;
			case 10:
				_localctx = new TableOptionDataDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(757);
				match(DATA);
				setState(758);
				match(DIRECTORY);
				setState(760);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(759);
					match(EQUAL_SYMBOL);
					}
				}

				setState(762);
				match(STRING_LITERAL);
				}
				break;
			case 11:
				_localctx = new TableOptionDelayContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(763);
				match(DELAY_KEY_WRITE);
				setState(765);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(764);
					match(EQUAL_SYMBOL);
					}
				}

				setState(767);
				((TableOptionDelayContext)_localctx).boolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionDelayContext)_localctx).boolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 12:
				_localctx = new TableOptionEncryptionContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(768);
				match(ENCRYPTION);
				setState(770);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(769);
					match(EQUAL_SYMBOL);
					}
				}

				setState(772);
				match(STRING_LITERAL);
				}
				break;
			case 13:
				_localctx = new TableOptionIndexDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(773);
				match(INDEX);
				setState(774);
				match(DIRECTORY);
				setState(776);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(775);
					match(EQUAL_SYMBOL);
					}
				}

				setState(778);
				match(STRING_LITERAL);
				}
				break;
			case 14:
				_localctx = new TableOptionInsertMethodContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(779);
				match(INSERT_METHOD);
				setState(781);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(780);
					match(EQUAL_SYMBOL);
					}
				}

				setState(783);
				((TableOptionInsertMethodContext)_localctx).insertMethod = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST || _la==NO) ) {
					((TableOptionInsertMethodContext)_localctx).insertMethod = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 15:
				_localctx = new TableOptionKeyBlockSizeContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(784);
				match(KEY_BLOCK_SIZE);
				setState(786);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(785);
					match(EQUAL_SYMBOL);
					}
				}

				setState(788);
				fileSizeLiteral();
				}
				break;
			case 16:
				_localctx = new TableOptionMaxRowsContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(789);
				match(MAX_ROWS);
				setState(791);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(790);
					match(EQUAL_SYMBOL);
					}
				}

				setState(793);
				decimalLiteral();
				}
				break;
			case 17:
				_localctx = new TableOptionMinRowsContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(794);
				match(MIN_ROWS);
				setState(796);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(795);
					match(EQUAL_SYMBOL);
					}
				}

				setState(798);
				decimalLiteral();
				}
				break;
			case 18:
				_localctx = new TableOptionPackKeysContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(799);
				match(PACK_KEYS);
				setState(801);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(800);
					match(EQUAL_SYMBOL);
					}
				}

				setState(803);
				((TableOptionPackKeysContext)_localctx).extBoolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionPackKeysContext)_localctx).extBoolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 19:
				_localctx = new TableOptionPasswordContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(804);
				match(PASSWORD);
				setState(806);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(805);
					match(EQUAL_SYMBOL);
					}
				}

				setState(808);
				match(STRING_LITERAL);
				}
				break;
			case 20:
				_localctx = new TableOptionRowFormatContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(809);
				match(ROW_FORMAT);
				setState(811);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(810);
					match(EQUAL_SYMBOL);
					}
				}

				setState(813);
				((TableOptionRowFormatContext)_localctx).rowFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || ((((_la - 307)) & ~0x3f) == 0 && ((1L << (_la - 307)) & ((1L << (COMPACT - 307)) | (1L << (COMPRESSED - 307)) | (1L << (DYNAMIC - 307)) | (1L << (FIXED - 307)))) != 0) || _la==REDUNDANT || _la==ID) ) {
					((TableOptionRowFormatContext)_localctx).rowFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 21:
				_localctx = new TableOptionRecalculationContext(_localctx);
				enterOuterAlt(_localctx, 21);
				{
				setState(814);
				match(STATS_AUTO_RECALC);
				setState(816);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(815);
					match(EQUAL_SYMBOL);
					}
				}

				setState(818);
				((TableOptionRecalculationContext)_localctx).extBoolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionRecalculationContext)_localctx).extBoolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 22:
				_localctx = new TableOptionPersistentContext(_localctx);
				enterOuterAlt(_localctx, 22);
				{
				setState(819);
				match(STATS_PERSISTENT);
				setState(821);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(820);
					match(EQUAL_SYMBOL);
					}
				}

				setState(823);
				((TableOptionPersistentContext)_localctx).extBoolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionPersistentContext)_localctx).extBoolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 23:
				_localctx = new TableOptionSamplePageContext(_localctx);
				enterOuterAlt(_localctx, 23);
				{
				setState(824);
				match(STATS_SAMPLE_PAGES);
				setState(826);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(825);
					match(EQUAL_SYMBOL);
					}
				}

				setState(828);
				decimalLiteral();
				}
				break;
			case 24:
				_localctx = new TableOptionTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 24);
				{
				setState(829);
				match(TABLESPACE);
				setState(830);
				uid();
				setState(832);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,117,_ctx) ) {
				case 1:
					{
					setState(831);
					tablespaceStorage();
					}
					break;
				}
				}
				break;
			case 25:
				_localctx = new TableOptionTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 25);
				{
				setState(834);
				tablespaceStorage();
				}
				break;
			case 26:
				_localctx = new TableOptionUnionContext(_localctx);
				enterOuterAlt(_localctx, 26);
				{
				setState(835);
				match(UNION);
				setState(837);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(836);
					match(EQUAL_SYMBOL);
					}
				}

				setState(839);
				match(LR_BRACKET);
				setState(840);
				tables();
				setState(841);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablespaceStorageContext extends ParserRuleContext {
		public TerminalNode STORAGE() { return getToken(MySqlParser.STORAGE, 0); }
		public TerminalNode DISK() { return getToken(MySqlParser.DISK, 0); }
		public TerminalNode MEMORY() { return getToken(MySqlParser.MEMORY, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TablespaceStorageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablespaceStorage; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTablespaceStorage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTablespaceStorage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTablespaceStorage(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablespaceStorageContext tablespaceStorage() throws RecognitionException {
		TablespaceStorageContext _localctx = new TablespaceStorageContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_tablespaceStorage);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(845);
			match(STORAGE);
			setState(846);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==DISK || _la==MEMORY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinitionsContext extends ParserRuleContext {
		public DecimalLiteralContext count;
		public DecimalLiteralContext subCount;
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public List<TerminalNode> BY() { return getTokens(MySqlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(MySqlParser.BY, i);
		}
		public PartitionFunctionDefinitionContext partitionFunctionDefinition() {
			return getRuleContext(PartitionFunctionDefinitionContext.class,0);
		}
		public TerminalNode PARTITIONS() { return getToken(MySqlParser.PARTITIONS, 0); }
		public TerminalNode SUBPARTITION() { return getToken(MySqlParser.SUBPARTITION, 0); }
		public SubpartitionFunctionDefinitionContext subpartitionFunctionDefinition() {
			return getRuleContext(SubpartitionFunctionDefinitionContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<PartitionDefinitionContext> partitionDefinition() {
			return getRuleContexts(PartitionDefinitionContext.class);
		}
		public PartitionDefinitionContext partitionDefinition(int i) {
			return getRuleContext(PartitionDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode SUBPARTITIONS() { return getToken(MySqlParser.SUBPARTITIONS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public PartitionDefinitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionDefinitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionDefinitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionDefinitions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionDefinitionsContext partitionDefinitions() throws RecognitionException {
		PartitionDefinitionsContext _localctx = new PartitionDefinitionsContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_partitionDefinitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(848);
			match(PARTITION);
			setState(849);
			match(BY);
			setState(850);
			partitionFunctionDefinition();
			setState(853);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITIONS) {
				{
				setState(851);
				match(PARTITIONS);
				setState(852);
				((PartitionDefinitionsContext)_localctx).count = decimalLiteral();
				}
			}

			setState(862);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SUBPARTITION) {
				{
				setState(855);
				match(SUBPARTITION);
				setState(856);
				match(BY);
				setState(857);
				subpartitionFunctionDefinition();
				setState(860);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUBPARTITIONS) {
					{
					setState(858);
					match(SUBPARTITIONS);
					setState(859);
					((PartitionDefinitionsContext)_localctx).subCount = decimalLiteral();
					}
				}

				}
			}

			setState(875);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,124,_ctx) ) {
			case 1:
				{
				setState(864);
				match(LR_BRACKET);
				setState(865);
				partitionDefinition();
				setState(870);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(866);
					match(COMMA);
					setState(867);
					partitionDefinition();
					}
					}
					setState(872);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(873);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionFunctionDefinitionContext extends ParserRuleContext {
		public PartitionFunctionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionFunctionDefinition; }
	 
		public PartitionFunctionDefinitionContext() { }
		public void copyFrom(PartitionFunctionDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PartitionFunctionKeyContext extends PartitionFunctionDefinitionContext {
		public Token algType;
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode LINEAR() { return getToken(MySqlParser.LINEAR, 0); }
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode TWO_DECIMAL() { return getToken(MySqlParser.TWO_DECIMAL, 0); }
		public PartitionFunctionKeyContext(PartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionFunctionKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionFunctionKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionFunctionKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionFunctionHashContext extends PartitionFunctionDefinitionContext {
		public TerminalNode HASH() { return getToken(MySqlParser.HASH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode LINEAR() { return getToken(MySqlParser.LINEAR, 0); }
		public PartitionFunctionHashContext(PartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionFunctionHash(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionFunctionHash(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionFunctionHash(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionFunctionListContext extends PartitionFunctionDefinitionContext {
		public TerminalNode LIST() { return getToken(MySqlParser.LIST, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public PartitionFunctionListContext(PartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionFunctionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionFunctionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionFunctionList(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionFunctionRangeContext extends PartitionFunctionDefinitionContext {
		public TerminalNode RANGE() { return getToken(MySqlParser.RANGE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public PartitionFunctionRangeContext(PartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionFunctionRange(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionFunctionRange(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionFunctionRange(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionFunctionDefinitionContext partitionFunctionDefinition() throws RecognitionException {
		PartitionFunctionDefinitionContext _localctx = new PartitionFunctionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_partitionFunctionDefinition);
		int _la;
		try {
			setState(922);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,130,_ctx) ) {
			case 1:
				_localctx = new PartitionFunctionHashContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(878);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(877);
					match(LINEAR);
					}
				}

				setState(880);
				match(HASH);
				setState(881);
				match(LR_BRACKET);
				setState(882);
				expression(0);
				setState(883);
				match(RR_BRACKET);
				}
				break;
			case 2:
				_localctx = new PartitionFunctionKeyContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(886);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(885);
					match(LINEAR);
					}
				}

				setState(888);
				match(KEY);
				setState(892);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALGORITHM) {
					{
					setState(889);
					match(ALGORITHM);
					setState(890);
					match(EQUAL_SYMBOL);
					setState(891);
					((PartitionFunctionKeyContext)_localctx).algType = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ONE_DECIMAL || _la==TWO_DECIMAL) ) {
						((PartitionFunctionKeyContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(894);
				match(LR_BRACKET);
				setState(895);
				uidList();
				setState(896);
				match(RR_BRACKET);
				}
				break;
			case 3:
				_localctx = new PartitionFunctionRangeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(898);
				match(RANGE);
				setState(908);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LR_BRACKET:
					{
					setState(899);
					match(LR_BRACKET);
					setState(900);
					expression(0);
					setState(901);
					match(RR_BRACKET);
					}
					break;
				case COLUMNS:
					{
					setState(903);
					match(COLUMNS);
					setState(904);
					match(LR_BRACKET);
					setState(905);
					uidList();
					setState(906);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				_localctx = new PartitionFunctionListContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(910);
				match(LIST);
				setState(920);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LR_BRACKET:
					{
					setState(911);
					match(LR_BRACKET);
					setState(912);
					expression(0);
					setState(913);
					match(RR_BRACKET);
					}
					break;
				case COLUMNS:
					{
					setState(915);
					match(COLUMNS);
					setState(916);
					match(LR_BRACKET);
					setState(917);
					uidList();
					setState(918);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubpartitionFunctionDefinitionContext extends ParserRuleContext {
		public SubpartitionFunctionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpartitionFunctionDefinition; }
	 
		public SubpartitionFunctionDefinitionContext() { }
		public void copyFrom(SubpartitionFunctionDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SubPartitionFunctionHashContext extends SubpartitionFunctionDefinitionContext {
		public TerminalNode HASH() { return getToken(MySqlParser.HASH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode LINEAR() { return getToken(MySqlParser.LINEAR, 0); }
		public SubPartitionFunctionHashContext(SubpartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubPartitionFunctionHash(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubPartitionFunctionHash(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSubPartitionFunctionHash(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubPartitionFunctionKeyContext extends SubpartitionFunctionDefinitionContext {
		public Token algType;
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode LINEAR() { return getToken(MySqlParser.LINEAR, 0); }
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode TWO_DECIMAL() { return getToken(MySqlParser.TWO_DECIMAL, 0); }
		public SubPartitionFunctionKeyContext(SubpartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubPartitionFunctionKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubPartitionFunctionKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSubPartitionFunctionKey(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubpartitionFunctionDefinitionContext subpartitionFunctionDefinition() throws RecognitionException {
		SubpartitionFunctionDefinitionContext _localctx = new SubpartitionFunctionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_subpartitionFunctionDefinition);
		int _la;
		try {
			setState(945);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,134,_ctx) ) {
			case 1:
				_localctx = new SubPartitionFunctionHashContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(925);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(924);
					match(LINEAR);
					}
				}

				setState(927);
				match(HASH);
				setState(928);
				match(LR_BRACKET);
				setState(929);
				expression(0);
				setState(930);
				match(RR_BRACKET);
				}
				break;
			case 2:
				_localctx = new SubPartitionFunctionKeyContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(933);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(932);
					match(LINEAR);
					}
				}

				setState(935);
				match(KEY);
				setState(939);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALGORITHM) {
					{
					setState(936);
					match(ALGORITHM);
					setState(937);
					match(EQUAL_SYMBOL);
					setState(938);
					((SubPartitionFunctionKeyContext)_localctx).algType = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ONE_DECIMAL || _la==TWO_DECIMAL) ) {
						((SubPartitionFunctionKeyContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(941);
				match(LR_BRACKET);
				setState(942);
				uidList();
				setState(943);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinitionContext extends ParserRuleContext {
		public PartitionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinition; }
	 
		public PartitionDefinitionContext() { }
		public void copyFrom(PartitionDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PartitionComparisionContext extends PartitionDefinitionContext {
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(MySqlParser.VALUES, 0); }
		public TerminalNode LESS() { return getToken(MySqlParser.LESS, 0); }
		public TerminalNode THAN() { return getToken(MySqlParser.THAN, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<PartitionDefinerAtomContext> partitionDefinerAtom() {
			return getRuleContexts(PartitionDefinerAtomContext.class);
		}
		public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return getRuleContext(PartitionDefinerAtomContext.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public PartitionComparisionContext(PartitionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionComparision(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionComparision(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionComparision(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionListAtomContext extends PartitionDefinitionContext {
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(MySqlParser.VALUES, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<PartitionDefinerAtomContext> partitionDefinerAtom() {
			return getRuleContexts(PartitionDefinerAtomContext.class);
		}
		public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return getRuleContext(PartitionDefinerAtomContext.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public PartitionListAtomContext(PartitionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionListAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionListAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionListAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionListVectorContext extends PartitionDefinitionContext {
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(MySqlParser.VALUES, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<PartitionDefinerVectorContext> partitionDefinerVector() {
			return getRuleContexts(PartitionDefinerVectorContext.class);
		}
		public PartitionDefinerVectorContext partitionDefinerVector(int i) {
			return getRuleContext(PartitionDefinerVectorContext.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public PartitionListVectorContext(PartitionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionListVector(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionListVector(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionListVector(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionSimpleContext extends PartitionDefinitionContext {
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public PartitionSimpleContext(PartitionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionSimple(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionSimple(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionSimple(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionDefinitionContext partitionDefinition() throws RecognitionException {
		PartitionDefinitionContext _localctx = new PartitionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_partitionDefinition);
		int _la;
		try {
			setState(1093);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,153,_ctx) ) {
			case 1:
				_localctx = new PartitionComparisionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(947);
				match(PARTITION);
				setState(948);
				uid();
				setState(949);
				match(VALUES);
				setState(950);
				match(LESS);
				setState(951);
				match(THAN);
				setState(952);
				match(LR_BRACKET);
				setState(953);
				partitionDefinerAtom();
				setState(958);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(954);
					match(COMMA);
					setState(955);
					partitionDefinerAtom();
					}
					}
					setState(960);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(961);
				match(RR_BRACKET);
				setState(965);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==INDEX || ((((_la - 305)) & ~0x3f) == 0 && ((1L << (_la - 305)) & ((1L << (COMMENT - 305)) | (1L << (DATA - 305)) | (1L << (ENGINE - 305)))) != 0) || ((((_la - 428)) & ~0x3f) == 0 && ((1L << (_la - 428)) & ((1L << (MAX_ROWS - 428)) | (1L << (MIN_ROWS - 428)) | (1L << (NODEGROUP - 428)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(962);
					partitionOption();
					}
					}
					setState(967);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(979);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(968);
					match(LR_BRACKET);
					setState(969);
					subpartitionDefinition();
					setState(974);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(970);
						match(COMMA);
						setState(971);
						subpartitionDefinition();
						}
						}
						setState(976);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(977);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case 2:
				_localctx = new PartitionComparisionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(981);
				match(PARTITION);
				setState(982);
				uid();
				setState(983);
				match(VALUES);
				setState(984);
				match(LESS);
				setState(985);
				match(THAN);
				setState(986);
				partitionDefinerAtom();
				setState(990);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==INDEX || ((((_la - 305)) & ~0x3f) == 0 && ((1L << (_la - 305)) & ((1L << (COMMENT - 305)) | (1L << (DATA - 305)) | (1L << (ENGINE - 305)))) != 0) || ((((_la - 428)) & ~0x3f) == 0 && ((1L << (_la - 428)) & ((1L << (MAX_ROWS - 428)) | (1L << (MIN_ROWS - 428)) | (1L << (NODEGROUP - 428)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(987);
					partitionOption();
					}
					}
					setState(992);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1004);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(993);
					match(LR_BRACKET);
					setState(994);
					subpartitionDefinition();
					setState(999);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(995);
						match(COMMA);
						setState(996);
						subpartitionDefinition();
						}
						}
						setState(1001);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(1002);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case 3:
				_localctx = new PartitionListAtomContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1006);
				match(PARTITION);
				setState(1007);
				uid();
				setState(1008);
				match(VALUES);
				setState(1009);
				match(IN);
				setState(1010);
				match(LR_BRACKET);
				setState(1011);
				partitionDefinerAtom();
				setState(1016);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1012);
					match(COMMA);
					setState(1013);
					partitionDefinerAtom();
					}
					}
					setState(1018);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1019);
				match(RR_BRACKET);
				setState(1023);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==INDEX || ((((_la - 305)) & ~0x3f) == 0 && ((1L << (_la - 305)) & ((1L << (COMMENT - 305)) | (1L << (DATA - 305)) | (1L << (ENGINE - 305)))) != 0) || ((((_la - 428)) & ~0x3f) == 0 && ((1L << (_la - 428)) & ((1L << (MAX_ROWS - 428)) | (1L << (MIN_ROWS - 428)) | (1L << (NODEGROUP - 428)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(1020);
					partitionOption();
					}
					}
					setState(1025);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1037);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(1026);
					match(LR_BRACKET);
					setState(1027);
					subpartitionDefinition();
					setState(1032);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1028);
						match(COMMA);
						setState(1029);
						subpartitionDefinition();
						}
						}
						setState(1034);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(1035);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case 4:
				_localctx = new PartitionListVectorContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1039);
				match(PARTITION);
				setState(1040);
				uid();
				setState(1041);
				match(VALUES);
				setState(1042);
				match(IN);
				setState(1043);
				match(LR_BRACKET);
				setState(1044);
				partitionDefinerVector();
				setState(1049);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1045);
					match(COMMA);
					setState(1046);
					partitionDefinerVector();
					}
					}
					setState(1051);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1052);
				match(RR_BRACKET);
				setState(1056);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==INDEX || ((((_la - 305)) & ~0x3f) == 0 && ((1L << (_la - 305)) & ((1L << (COMMENT - 305)) | (1L << (DATA - 305)) | (1L << (ENGINE - 305)))) != 0) || ((((_la - 428)) & ~0x3f) == 0 && ((1L << (_la - 428)) & ((1L << (MAX_ROWS - 428)) | (1L << (MIN_ROWS - 428)) | (1L << (NODEGROUP - 428)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(1053);
					partitionOption();
					}
					}
					setState(1058);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1070);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(1059);
					match(LR_BRACKET);
					setState(1060);
					subpartitionDefinition();
					setState(1065);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1061);
						match(COMMA);
						setState(1062);
						subpartitionDefinition();
						}
						}
						setState(1067);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(1068);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case 5:
				_localctx = new PartitionSimpleContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1072);
				match(PARTITION);
				setState(1073);
				uid();
				setState(1077);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==INDEX || ((((_la - 305)) & ~0x3f) == 0 && ((1L << (_la - 305)) & ((1L << (COMMENT - 305)) | (1L << (DATA - 305)) | (1L << (ENGINE - 305)))) != 0) || ((((_la - 428)) & ~0x3f) == 0 && ((1L << (_la - 428)) & ((1L << (MAX_ROWS - 428)) | (1L << (MIN_ROWS - 428)) | (1L << (NODEGROUP - 428)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(1074);
					partitionOption();
					}
					}
					setState(1079);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1091);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(1080);
					match(LR_BRACKET);
					setState(1081);
					subpartitionDefinition();
					setState(1086);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1082);
						match(COMMA);
						setState(1083);
						subpartitionDefinition();
						}
						}
						setState(1088);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(1089);
					match(RR_BRACKET);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinerAtomContext extends ParserRuleContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode MAXVALUE() { return getToken(MySqlParser.MAXVALUE, 0); }
		public PartitionDefinerAtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinerAtom; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionDefinerAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionDefinerAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionDefinerAtom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionDefinerAtomContext partitionDefinerAtom() throws RecognitionException {
		PartitionDefinerAtomContext _localctx = new PartitionDefinerAtomContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_partitionDefinerAtom);
		try {
			setState(1098);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,154,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1095);
				constant();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1096);
				expression(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1097);
				match(MAXVALUE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinerVectorContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<PartitionDefinerAtomContext> partitionDefinerAtom() {
			return getRuleContexts(PartitionDefinerAtomContext.class);
		}
		public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return getRuleContext(PartitionDefinerAtomContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public PartitionDefinerVectorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinerVector; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionDefinerVector(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionDefinerVector(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionDefinerVector(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionDefinerVectorContext partitionDefinerVector() throws RecognitionException {
		PartitionDefinerVectorContext _localctx = new PartitionDefinerVectorContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_partitionDefinerVector);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1100);
			match(LR_BRACKET);
			setState(1101);
			partitionDefinerAtom();
			setState(1104); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1102);
				match(COMMA);
				setState(1103);
				partitionDefinerAtom();
				}
				}
				setState(1106); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==COMMA );
			setState(1108);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubpartitionDefinitionContext extends ParserRuleContext {
		public TerminalNode SUBPARTITION() { return getToken(MySqlParser.SUBPARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public SubpartitionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpartitionDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubpartitionDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubpartitionDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSubpartitionDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubpartitionDefinitionContext subpartitionDefinition() throws RecognitionException {
		SubpartitionDefinitionContext _localctx = new SubpartitionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_subpartitionDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1110);
			match(SUBPARTITION);
			setState(1111);
			uid();
			setState(1115);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==INDEX || ((((_la - 305)) & ~0x3f) == 0 && ((1L << (_la - 305)) & ((1L << (COMMENT - 305)) | (1L << (DATA - 305)) | (1L << (ENGINE - 305)))) != 0) || ((((_la - 428)) & ~0x3f) == 0 && ((1L << (_la - 428)) & ((1L << (MAX_ROWS - 428)) | (1L << (MIN_ROWS - 428)) | (1L << (NODEGROUP - 428)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
				{
				{
				setState(1112);
				partitionOption();
				}
				}
				setState(1117);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionOptionContext extends ParserRuleContext {
		public PartitionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionOption; }
	 
		public PartitionOptionContext() { }
		public void copyFrom(PartitionOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PartitionOptionCommentContext extends PartitionOptionContext {
		public Token comment;
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionCommentContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionComment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionOptionComment(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionNodeGroupContext extends PartitionOptionContext {
		public UidContext nodegroup;
		public TerminalNode NODEGROUP() { return getToken(MySqlParser.NODEGROUP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionNodeGroupContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionNodeGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionNodeGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionOptionNodeGroup(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionIndexDirectoryContext extends PartitionOptionContext {
		public Token indexDirectory;
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySqlParser.DIRECTORY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionIndexDirectoryContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionIndexDirectory(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionIndexDirectory(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionOptionIndexDirectory(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionMaxRowsContext extends PartitionOptionContext {
		public DecimalLiteralContext maxRows;
		public TerminalNode MAX_ROWS() { return getToken(MySqlParser.MAX_ROWS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionMaxRowsContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionMaxRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionMaxRows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionOptionMaxRows(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionTablespaceContext extends PartitionOptionContext {
		public UidContext tablespace;
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionTablespaceContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionOptionTablespace(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionEngineContext extends PartitionOptionContext {
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode STORAGE() { return getToken(MySqlParser.STORAGE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionEngineContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionEngine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionEngine(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionOptionEngine(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionMinRowsContext extends PartitionOptionContext {
		public DecimalLiteralContext minRows;
		public TerminalNode MIN_ROWS() { return getToken(MySqlParser.MIN_ROWS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionMinRowsContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionMinRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionMinRows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionOptionMinRows(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionDataDirectoryContext extends PartitionOptionContext {
		public Token dataDirectory;
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySqlParser.DIRECTORY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionDataDirectoryContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionDataDirectory(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionDataDirectory(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionOptionDataDirectory(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionOptionContext partitionOption() throws RecognitionException {
		PartitionOptionContext _localctx = new PartitionOptionContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_partitionOption);
		int _la;
		try {
			setState(1163);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENGINE:
			case STORAGE:
				_localctx = new PartitionOptionEngineContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1119);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE) {
					{
					setState(1118);
					match(STORAGE);
					}
				}

				setState(1121);
				match(ENGINE);
				setState(1123);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1122);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1125);
				engineName();
				}
				break;
			case COMMENT:
				_localctx = new PartitionOptionCommentContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1126);
				match(COMMENT);
				setState(1128);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1127);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1130);
				((PartitionOptionCommentContext)_localctx).comment = match(STRING_LITERAL);
				}
				break;
			case DATA:
				_localctx = new PartitionOptionDataDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1131);
				match(DATA);
				setState(1132);
				match(DIRECTORY);
				setState(1134);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1133);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1136);
				((PartitionOptionDataDirectoryContext)_localctx).dataDirectory = match(STRING_LITERAL);
				}
				break;
			case INDEX:
				_localctx = new PartitionOptionIndexDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1137);
				match(INDEX);
				setState(1138);
				match(DIRECTORY);
				setState(1140);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1139);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1142);
				((PartitionOptionIndexDirectoryContext)_localctx).indexDirectory = match(STRING_LITERAL);
				}
				break;
			case MAX_ROWS:
				_localctx = new PartitionOptionMaxRowsContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1143);
				match(MAX_ROWS);
				setState(1145);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1144);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1147);
				((PartitionOptionMaxRowsContext)_localctx).maxRows = decimalLiteral();
				}
				break;
			case MIN_ROWS:
				_localctx = new PartitionOptionMinRowsContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(1148);
				match(MIN_ROWS);
				setState(1150);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1149);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1152);
				((PartitionOptionMinRowsContext)_localctx).minRows = decimalLiteral();
				}
				break;
			case TABLESPACE:
				_localctx = new PartitionOptionTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(1153);
				match(TABLESPACE);
				setState(1155);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1154);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1157);
				((PartitionOptionTablespaceContext)_localctx).tablespace = uid();
				}
				break;
			case NODEGROUP:
				_localctx = new PartitionOptionNodeGroupContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(1158);
				match(NODEGROUP);
				setState(1160);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1159);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1162);
				((PartitionOptionNodeGroupContext)_localctx).nodegroup = uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalTypeContext extends ParserRuleContext {
		public IntervalTypeBaseContext intervalTypeBase() {
			return getRuleContext(IntervalTypeBaseContext.class,0);
		}
		public TerminalNode YEAR() { return getToken(MySqlParser.YEAR, 0); }
		public TerminalNode YEAR_MONTH() { return getToken(MySqlParser.YEAR_MONTH, 0); }
		public TerminalNode DAY_HOUR() { return getToken(MySqlParser.DAY_HOUR, 0); }
		public TerminalNode DAY_MINUTE() { return getToken(MySqlParser.DAY_MINUTE, 0); }
		public TerminalNode DAY_SECOND() { return getToken(MySqlParser.DAY_SECOND, 0); }
		public TerminalNode HOUR_MINUTE() { return getToken(MySqlParser.HOUR_MINUTE, 0); }
		public TerminalNode HOUR_SECOND() { return getToken(MySqlParser.HOUR_SECOND, 0); }
		public TerminalNode MINUTE_SECOND() { return getToken(MySqlParser.MINUTE_SECOND, 0); }
		public TerminalNode SECOND_MICROSECOND() { return getToken(MySqlParser.SECOND_MICROSECOND, 0); }
		public TerminalNode MINUTE_MICROSECOND() { return getToken(MySqlParser.MINUTE_MICROSECOND, 0); }
		public TerminalNode HOUR_MICROSECOND() { return getToken(MySqlParser.HOUR_MICROSECOND, 0); }
		public TerminalNode DAY_MICROSECOND() { return getToken(MySqlParser.DAY_MICROSECOND, 0); }
		public IntervalTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIntervalType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIntervalType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIntervalType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalTypeContext intervalType() throws RecognitionException {
		IntervalTypeContext _localctx = new IntervalTypeContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_intervalType);
		try {
			setState(1178);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
				enterOuterAlt(_localctx, 1);
				{
				setState(1165);
				intervalTypeBase();
				}
				break;
			case YEAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(1166);
				match(YEAR);
				}
				break;
			case YEAR_MONTH:
				enterOuterAlt(_localctx, 3);
				{
				setState(1167);
				match(YEAR_MONTH);
				}
				break;
			case DAY_HOUR:
				enterOuterAlt(_localctx, 4);
				{
				setState(1168);
				match(DAY_HOUR);
				}
				break;
			case DAY_MINUTE:
				enterOuterAlt(_localctx, 5);
				{
				setState(1169);
				match(DAY_MINUTE);
				}
				break;
			case DAY_SECOND:
				enterOuterAlt(_localctx, 6);
				{
				setState(1170);
				match(DAY_SECOND);
				}
				break;
			case HOUR_MINUTE:
				enterOuterAlt(_localctx, 7);
				{
				setState(1171);
				match(HOUR_MINUTE);
				}
				break;
			case HOUR_SECOND:
				enterOuterAlt(_localctx, 8);
				{
				setState(1172);
				match(HOUR_SECOND);
				}
				break;
			case MINUTE_SECOND:
				enterOuterAlt(_localctx, 9);
				{
				setState(1173);
				match(MINUTE_SECOND);
				}
				break;
			case SECOND_MICROSECOND:
				enterOuterAlt(_localctx, 10);
				{
				setState(1174);
				match(SECOND_MICROSECOND);
				}
				break;
			case MINUTE_MICROSECOND:
				enterOuterAlt(_localctx, 11);
				{
				setState(1175);
				match(MINUTE_MICROSECOND);
				}
				break;
			case HOUR_MICROSECOND:
				enterOuterAlt(_localctx, 12);
				{
				setState(1176);
				match(HOUR_MICROSECOND);
				}
				break;
			case DAY_MICROSECOND:
				enterOuterAlt(_localctx, 13);
				{
				setState(1177);
				match(DAY_MICROSECOND);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeleteStatementContext extends ParserRuleContext {
		public SingleDeleteStatementContext singleDeleteStatement() {
			return getRuleContext(SingleDeleteStatementContext.class,0);
		}
		public MultipleDeleteStatementContext multipleDeleteStatement() {
			return getRuleContext(MultipleDeleteStatementContext.class,0);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDeleteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDeleteStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDeleteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeleteStatementContext deleteStatement() throws RecognitionException {
		DeleteStatementContext _localctx = new DeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_deleteStatement);
		try {
			setState(1182);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,168,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1180);
				singleDeleteStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1181);
				multipleDeleteStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertStatementContext extends ParserRuleContext {
		public Token priority;
		public UidListContext partitions;
		public UidListContext columns;
		public UpdatedElementContext setFirst;
		public UpdatedElementContext updatedElement;
		public List<UpdatedElementContext> setElements = new ArrayList<UpdatedElementContext>();
		public UpdatedElementContext duplicatedFirst;
		public List<UpdatedElementContext> duplicatedElements = new ArrayList<UpdatedElementContext>();
		public TerminalNode INSERT() { return getToken(MySqlParser.INSERT, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public InsertStatementValueContext insertStatementValue() {
			return getRuleContext(InsertStatementValueContext.class,0);
		}
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode DUPLICATE() { return getToken(MySqlParser.DUPLICATE, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public TerminalNode DELAYED() { return getToken(MySqlParser.DELAYED, 0); }
		public TerminalNode HIGH_PRIORITY() { return getToken(MySqlParser.HIGH_PRIORITY, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public List<UidListContext> uidList() {
			return getRuleContexts(UidListContext.class);
		}
		public UidListContext uidList(int i) {
			return getRuleContext(UidListContext.class,i);
		}
		public InsertStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterInsertStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitInsertStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitInsertStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertStatementContext insertStatement() throws RecognitionException {
		InsertStatementContext _localctx = new InsertStatementContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_insertStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1184);
			match(INSERT);
			setState(1186);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 39)) & ~0x3f) == 0 && ((1L << (_la - 39)) & ((1L << (DELAYED - 39)) | (1L << (HIGH_PRIORITY - 39)) | (1L << (LOW_PRIORITY - 39)))) != 0)) {
				{
				setState(1185);
				((InsertStatementContext)_localctx).priority = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 39)) & ~0x3f) == 0 && ((1L << (_la - 39)) & ((1L << (DELAYED - 39)) | (1L << (HIGH_PRIORITY - 39)) | (1L << (LOW_PRIORITY - 39)))) != 0)) ) {
					((InsertStatementContext)_localctx).priority = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1189);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(1188);
				match(IGNORE);
				}
			}

			setState(1192);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(1191);
				match(INTO);
				}
			}

			setState(1194);
			tableName();
			setState(1201);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(1195);
				match(PARTITION);
				setState(1196);
				match(LR_BRACKET);
				setState(1198);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (GROUP - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (ORDER - 105)) | (1L << (RIGHT - 105)) | (1L << (SCHEMA - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (DATE - 199)) | (1L << (TIME - 199)) | (1L << (TIMESTAMP - 199)) | (1L << (DATETIME - 199)) | (1L << (YEAR - 199)) | (1L << (TEXT - 199)) | (1L << (ENUM - 199)) | (1L << (SERIAL - 199)) | (1L << (JSON_VALID - 199)) | (1L << (JSON_SCHEMA_VALID - 199)) | (1L << (AVG - 199)) | (1L << (BIT_AND - 199)) | (1L << (BIT_OR - 199)) | (1L << (BIT_XOR - 199)) | (1L << (COUNT - 199)) | (1L << (GROUP_CONCAT - 199)) | (1L << (MAX - 199)) | (1L << (MIN - 199)) | (1L << (STD - 199)) | (1L << (STDDEV - 199)) | (1L << (STDDEV_POP - 199)) | (1L << (STDDEV_SAMP - 199)) | (1L << (SUM - 199)) | (1L << (VAR_POP - 199)) | (1L << (VAR_SAMP - 199)) | (1L << (VARIANCE - 199)) | (1L << (POSITION - 199)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)) | (1L << (BOOL - 270)) | (1L << (BOOLEAN - 270)) | (1L << (BTREE - 270)) | (1L << (CACHE - 270)) | (1L << (CASCADED - 270)) | (1L << (CHAIN - 270)) | (1L << (CHANGED - 270)) | (1L << (CHANNEL - 270)) | (1L << (CHECKSUM - 270)) | (1L << (PAGE_CHECKSUM - 270)) | (1L << (CIPHER - 270)) | (1L << (CLASS_ORIGIN - 270)) | (1L << (CLIENT - 270)) | (1L << (CLOSE - 270)) | (1L << (COALESCE - 270)) | (1L << (CODE - 270)) | (1L << (COLUMNS - 270)) | (1L << (COLUMN_FORMAT - 270)) | (1L << (COLUMN_NAME - 270)) | (1L << (COMMENT - 270)) | (1L << (COMMIT - 270)) | (1L << (COMPACT - 270)) | (1L << (COMPLETION - 270)) | (1L << (COMPRESSED - 270)) | (1L << (COMPRESSION - 270)) | (1L << (CONCURRENT - 270)) | (1L << (CONNECTION - 270)) | (1L << (CONSISTENT - 270)) | (1L << (CONSTRAINT_CATALOG - 270)) | (1L << (CONSTRAINT_SCHEMA - 270)) | (1L << (CONSTRAINT_NAME - 270)) | (1L << (CONTAINS - 270)) | (1L << (CONTEXT - 270)) | (1L << (CONTRIBUTORS - 270)) | (1L << (COPY - 270)) | (1L << (CPU - 270)) | (1L << (CURSOR_NAME - 270)) | (1L << (DATA - 270)) | (1L << (DATAFILE - 270)) | (1L << (DEALLOCATE - 270)) | (1L << (DEFAULT_AUTH - 270)) | (1L << (DEFINER - 270)) | (1L << (DELAY_KEY_WRITE - 270)) | (1L << (DES_KEY_FILE - 270)) | (1L << (DIRECTORY - 270)) | (1L << (DISABLE - 270)) | (1L << (DISCARD - 270)) | (1L << (DISK - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)) | (1L << (EVENTS - 334)) | (1L << (EVERY - 334)) | (1L << (EXCHANGE - 334)) | (1L << (EXCLUSIVE - 334)) | (1L << (EXPIRE - 334)) | (1L << (EXPORT - 334)) | (1L << (EXTENDED - 334)) | (1L << (EXTENT_SIZE - 334)) | (1L << (FAST - 334)) | (1L << (FAULTS - 334)) | (1L << (FIELDS - 334)) | (1L << (FILE_BLOCK_SIZE - 334)) | (1L << (FILTER - 334)) | (1L << (FIRST - 334)) | (1L << (FIXED - 334)) | (1L << (FLUSH - 334)) | (1L << (FOLLOWS - 334)) | (1L << (FOUND - 334)) | (1L << (FULL - 334)) | (1L << (FUNCTION - 334)) | (1L << (GENERAL - 334)) | (1L << (GLOBAL - 334)) | (1L << (GRANTS - 334)) | (1L << (GROUP_REPLICATION - 334)) | (1L << (HANDLER - 334)) | (1L << (HASH - 334)) | (1L << (HELP - 334)) | (1L << (HOST - 334)) | (1L << (HOSTS - 334)) | (1L << (IDENTIFIED - 334)) | (1L << (IGNORE_SERVER_IDS - 334)) | (1L << (IMPORT - 334)) | (1L << (INDEXES - 334)) | (1L << (INITIAL_SIZE - 334)) | (1L << (INPLACE - 334)) | (1L << (INSERT_METHOD - 334)) | (1L << (INSTALL - 334)) | (1L << (INSTANCE - 334)) | (1L << (INVISIBLE - 334)) | (1L << (INVOKER - 334)) | (1L << (IO - 334)) | (1L << (IO_THREAD - 334)) | (1L << (IPC - 334)) | (1L << (ISOLATION - 334)) | (1L << (ISSUER - 334)) | (1L << (JSON - 334)) | (1L << (KEY_BLOCK_SIZE - 334)) | (1L << (LANGUAGE - 334)) | (1L << (LAST - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)) | (1L << (MASTER_LOG_POS - 398)) | (1L << (MASTER_PASSWORD - 398)) | (1L << (MASTER_PORT - 398)) | (1L << (MASTER_RETRY_COUNT - 398)) | (1L << (MASTER_SSL - 398)) | (1L << (MASTER_SSL_CA - 398)) | (1L << (MASTER_SSL_CAPATH - 398)) | (1L << (MASTER_SSL_CERT - 398)) | (1L << (MASTER_SSL_CIPHER - 398)) | (1L << (MASTER_SSL_CRL - 398)) | (1L << (MASTER_SSL_CRLPATH - 398)) | (1L << (MASTER_SSL_KEY - 398)) | (1L << (MASTER_TLS_VERSION - 398)) | (1L << (MASTER_USER - 398)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 398)) | (1L << (MAX_QUERIES_PER_HOUR - 398)) | (1L << (MAX_ROWS - 398)) | (1L << (MAX_SIZE - 398)) | (1L << (MAX_UPDATES_PER_HOUR - 398)) | (1L << (MAX_USER_CONNECTIONS - 398)) | (1L << (MEDIUM - 398)) | (1L << (MEMBER - 398)) | (1L << (MERGE - 398)) | (1L << (MESSAGE_TEXT - 398)) | (1L << (MID - 398)) | (1L << (MIGRATE - 398)) | (1L << (MIN_ROWS - 398)) | (1L << (MODE - 398)) | (1L << (MODIFY - 398)) | (1L << (MUTEX - 398)) | (1L << (MYSQL - 398)) | (1L << (MYSQL_ERRNO - 398)) | (1L << (NAME - 398)) | (1L << (NAMES - 398)) | (1L << (NCHAR - 398)) | (1L << (NEVER - 398)) | (1L << (NEXT - 398)) | (1L << (NO - 398)) | (1L << (NODEGROUP - 398)) | (1L << (NONE - 398)) | (1L << (OFFLINE - 398)) | (1L << (OFFSET - 398)) | (1L << (OF - 398)) | (1L << (OJ - 398)) | (1L << (OLD_PASSWORD - 398)) | (1L << (ONE - 398)) | (1L << (ONLINE - 398)) | (1L << (ONLY - 398)) | (1L << (OPEN - 398)) | (1L << (OPTIMIZER_COSTS - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)) | (1L << (PORT - 462)) | (1L << (PRECEDES - 462)) | (1L << (PREPARE - 462)) | (1L << (PRESERVE - 462)) | (1L << (PREV - 462)) | (1L << (PROCESSLIST - 462)) | (1L << (PROFILE - 462)) | (1L << (PROFILES - 462)) | (1L << (PROXY - 462)) | (1L << (QUERY - 462)) | (1L << (QUICK - 462)) | (1L << (REBUILD - 462)) | (1L << (RECOVER - 462)) | (1L << (REDO_BUFFER_SIZE - 462)) | (1L << (REDUNDANT - 462)) | (1L << (RELAY - 462)) | (1L << (RELAY_LOG_FILE - 462)) | (1L << (RELAY_LOG_POS - 462)) | (1L << (RELAYLOG - 462)) | (1L << (REMOVE - 462)) | (1L << (REORGANIZE - 462)) | (1L << (REPAIR - 462)) | (1L << (REPLICATE_DO_DB - 462)) | (1L << (REPLICATE_DO_TABLE - 462)) | (1L << (REPLICATE_IGNORE_DB - 462)) | (1L << (REPLICATE_IGNORE_TABLE - 462)) | (1L << (REPLICATE_REWRITE_DB - 462)) | (1L << (REPLICATE_WILD_DO_TABLE - 462)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 462)) | (1L << (REPLICATION - 462)) | (1L << (RESET - 462)) | (1L << (RESUME - 462)) | (1L << (RETURNED_SQLSTATE - 462)) | (1L << (RETURNS - 462)) | (1L << (ROLE - 462)) | (1L << (ROLLBACK - 462)) | (1L << (ROLLUP - 462)) | (1L << (ROTATE - 462)) | (1L << (ROW - 462)) | (1L << (ROWS - 462)) | (1L << (ROW_FORMAT - 462)) | (1L << (SAVEPOINT - 462)) | (1L << (SCHEDULE - 462)) | (1L << (SECURITY - 462)) | (1L << (SERVER - 462)) | (1L << (SESSION - 462)) | (1L << (SHARE - 462)) | (1L << (SHARED - 462)) | (1L << (SIGNED - 462)) | (1L << (SIMPLE - 462)) | (1L << (SLAVE - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)) | (1L << (SQL_CACHE - 526)) | (1L << (SQL_NO_CACHE - 526)) | (1L << (SQL_THREAD - 526)) | (1L << (START - 526)) | (1L << (STARTS - 526)) | (1L << (STATS_AUTO_RECALC - 526)) | (1L << (STATS_PERSISTENT - 526)) | (1L << (STATS_SAMPLE_PAGES - 526)) | (1L << (STATUS - 526)) | (1L << (STOP - 526)) | (1L << (STORAGE - 526)) | (1L << (STRING - 526)) | (1L << (SUBCLASS_ORIGIN - 526)) | (1L << (SUBJECT - 526)) | (1L << (SUBPARTITION - 526)) | (1L << (SUBPARTITIONS - 526)) | (1L << (SUSPEND - 526)) | (1L << (SWAPS - 526)) | (1L << (SWITCHES - 526)) | (1L << (TABLE_NAME - 526)) | (1L << (TABLESPACE - 526)) | (1L << (TEMPORARY - 526)) | (1L << (TEMPTABLE - 526)) | (1L << (THAN - 526)) | (1L << (TRADITIONAL - 526)) | (1L << (TRANSACTION - 526)) | (1L << (TRANSACTIONAL - 526)) | (1L << (TRIGGERS - 526)) | (1L << (TRUNCATE - 526)) | (1L << (UNDEFINED - 526)) | (1L << (UNDOFILE - 526)) | (1L << (UNDO_BUFFER_SIZE - 526)) | (1L << (UNINSTALL - 526)) | (1L << (UNKNOWN - 526)) | (1L << (UNTIL - 526)) | (1L << (UPGRADE - 526)) | (1L << (USER - 526)) | (1L << (USE_FRM - 526)) | (1L << (USER_RESOURCES - 526)) | (1L << (VALIDATION - 526)) | (1L << (VALUE - 526)) | (1L << (VARIABLES - 526)) | (1L << (VIEW - 526)) | (1L << (VISIBLE - 526)) | (1L << (WAIT - 526)) | (1L << (WARNINGS - 526)) | (1L << (WITHOUT - 526)) | (1L << (WORK - 526)) | (1L << (WRAPPER - 526)) | (1L << (X509 - 526)) | (1L << (XA - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (XML - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)) | (1L << (DAY - 590)) | (1L << (HOUR - 590)) | (1L << (MINUTE - 590)) | (1L << (WEEK - 590)) | (1L << (SECOND - 590)) | (1L << (MICROSECOND - 590)) | (1L << (TABLES - 590)) | (1L << (ROUTINE - 590)) | (1L << (EXECUTE - 590)) | (1L << (FILE - 590)) | (1L << (PROCESS - 590)) | (1L << (RELOAD - 590)) | (1L << (SHUTDOWN - 590)) | (1L << (SUPER - 590)) | (1L << (PRIVILEGES - 590)) | (1L << (AUDIT_ADMIN - 590)) | (1L << (BACKUP_ADMIN - 590)) | (1L << (BINLOG_ADMIN - 590)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 590)) | (1L << (CLONE_ADMIN - 590)) | (1L << (CONNECTION_ADMIN - 590)) | (1L << (ENCRYPTION_KEY_ADMIN - 590)) | (1L << (FIREWALL_ADMIN - 590)) | (1L << (FIREWALL_USER - 590)) | (1L << (GROUP_REPLICATION_ADMIN - 590)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 590)) | (1L << (NDB_STORED_USER - 590)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 590)) | (1L << (REPLICATION_APPLIER - 590)) | (1L << (REPLICATION_SLAVE_ADMIN - 590)) | (1L << (RESOURCE_GROUP_ADMIN - 590)) | (1L << (RESOURCE_GROUP_USER - 590)) | (1L << (ROLE_ADMIN - 590)) | (1L << (SESSION_VARIABLES_ADMIN - 590)) | (1L << (SET_USER_ID - 590)) | (1L << (SHOW_ROUTINE - 590)) | (1L << (SYSTEM_VARIABLES_ADMIN - 590)) | (1L << (TABLE_ENCRYPTION_ADMIN - 590)) | (1L << (VERSION_TOKEN_ADMIN - 590)) | (1L << (XA_RECOVER_ADMIN - 590)) | (1L << (ARMSCII8 - 590)) | (1L << (ASCII - 590)) | (1L << (BIG5 - 590)) | (1L << (CP1250 - 590)) | (1L << (CP1251 - 590)) | (1L << (CP1256 - 590)) | (1L << (CP1257 - 590)) | (1L << (CP850 - 590)) | (1L << (CP852 - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)) | (1L << (GREEK - 654)) | (1L << (HEBREW - 654)) | (1L << (HP8 - 654)) | (1L << (KEYBCS2 - 654)) | (1L << (KOI8R - 654)) | (1L << (KOI8U - 654)) | (1L << (LATIN1 - 654)) | (1L << (LATIN2 - 654)) | (1L << (LATIN5 - 654)) | (1L << (LATIN7 - 654)) | (1L << (MACCE - 654)) | (1L << (MACROMAN - 654)) | (1L << (SJIS - 654)) | (1L << (SWE7 - 654)) | (1L << (TIS620 - 654)) | (1L << (UCS2 - 654)) | (1L << (UJIS - 654)) | (1L << (UTF16 - 654)) | (1L << (UTF16LE - 654)) | (1L << (UTF32 - 654)) | (1L << (UTF8 - 654)) | (1L << (UTF8MB3 - 654)) | (1L << (UTF8MB4 - 654)) | (1L << (ARCHIVE - 654)) | (1L << (BLACKHOLE - 654)) | (1L << (CSV - 654)) | (1L << (FEDERATED - 654)) | (1L << (INNODB - 654)) | (1L << (MEMORY - 654)) | (1L << (MRG_MYISAM - 654)) | (1L << (MYISAM - 654)) | (1L << (NDB - 654)) | (1L << (NDBCLUSTER - 654)) | (1L << (PERFORMANCE_SCHEMA - 654)) | (1L << (TOKUDB - 654)) | (1L << (REPEATABLE - 654)) | (1L << (COMMITTED - 654)) | (1L << (UNCOMMITTED - 654)) | (1L << (SERIALIZABLE - 654)) | (1L << (GEOMETRYCOLLECTION - 654)) | (1L << (LINESTRING - 654)) | (1L << (MULTILINESTRING - 654)) | (1L << (MULTIPOINT - 654)) | (1L << (MULTIPOLYGON - 654)) | (1L << (POINT - 654)) | (1L << (POLYGON - 654)) | (1L << (ABS - 654)) | (1L << (ACOS - 654)) | (1L << (ADDDATE - 654)) | (1L << (ADDTIME - 654)) | (1L << (AES_DECRYPT - 654)) | (1L << (AES_ENCRYPT - 654)) | (1L << (AREA - 654)) | (1L << (ASBINARY - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)) | (1L << (ASYMMETRIC_VERIFY - 718)) | (1L << (ATAN - 718)) | (1L << (ATAN2 - 718)) | (1L << (BENCHMARK - 718)) | (1L << (BIN - 718)) | (1L << (BIT_COUNT - 718)) | (1L << (BIT_LENGTH - 718)) | (1L << (BUFFER - 718)) | (1L << (CATALOG_NAME - 718)) | (1L << (CEIL - 718)) | (1L << (CEILING - 718)) | (1L << (CENTROID - 718)) | (1L << (CHARACTER_LENGTH - 718)) | (1L << (CHARSET - 718)) | (1L << (CHAR_LENGTH - 718)) | (1L << (COERCIBILITY - 718)) | (1L << (COLLATION - 718)) | (1L << (COMPRESS - 718)) | (1L << (CONCAT - 718)) | (1L << (CONCAT_WS - 718)) | (1L << (CONNECTION_ID - 718)) | (1L << (CONV - 718)) | (1L << (CONVERT_TZ - 718)) | (1L << (COS - 718)) | (1L << (COT - 718)) | (1L << (CRC32 - 718)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1L << (CREATE_DH_PARAMETERS - 718)) | (1L << (CREATE_DIGEST - 718)) | (1L << (CROSSES - 718)) | (1L << (DATEDIFF - 718)) | (1L << (DATE_FORMAT - 718)) | (1L << (DAYNAME - 718)) | (1L << (DAYOFMONTH - 718)) | (1L << (DAYOFWEEK - 718)) | (1L << (DAYOFYEAR - 718)) | (1L << (DECODE - 718)) | (1L << (DEGREES - 718)) | (1L << (DES_DECRYPT - 718)) | (1L << (DES_ENCRYPT - 718)) | (1L << (DIMENSION - 718)) | (1L << (DISJOINT - 718)) | (1L << (ELT - 718)) | (1L << (ENCODE - 718)) | (1L << (ENCRYPT - 718)) | (1L << (ENDPOINT - 718)) | (1L << (ENVELOPE - 718)) | (1L << (EQUALS - 718)) | (1L << (EXP - 718)) | (1L << (EXPORT_SET - 718)) | (1L << (EXTERIORRING - 718)) | (1L << (EXTRACTVALUE - 718)) | (1L << (FIELD - 718)) | (1L << (FIND_IN_SET - 718)) | (1L << (FLOOR - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 782)) | (1L << (GEOMETRYFROMTEXT - 782)) | (1L << (GEOMETRYFROMWKB - 782)) | (1L << (GEOMETRYN - 782)) | (1L << (GEOMETRYTYPE - 782)) | (1L << (GEOMFROMTEXT - 782)) | (1L << (GEOMFROMWKB - 782)) | (1L << (GET_FORMAT - 782)) | (1L << (GET_LOCK - 782)) | (1L << (GLENGTH - 782)) | (1L << (GREATEST - 782)) | (1L << (GTID_SUBSET - 782)) | (1L << (GTID_SUBTRACT - 782)) | (1L << (HEX - 782)) | (1L << (IFNULL - 782)) | (1L << (INET6_ATON - 782)) | (1L << (INET6_NTOA - 782)) | (1L << (INET_ATON - 782)) | (1L << (INET_NTOA - 782)) | (1L << (INSTR - 782)) | (1L << (INTERIORRINGN - 782)) | (1L << (INTERSECTS - 782)) | (1L << (ISCLOSED - 782)) | (1L << (ISEMPTY - 782)) | (1L << (ISNULL - 782)) | (1L << (ISSIMPLE - 782)) | (1L << (IS_FREE_LOCK - 782)) | (1L << (IS_IPV4 - 782)) | (1L << (IS_IPV4_COMPAT - 782)) | (1L << (IS_IPV4_MAPPED - 782)) | (1L << (IS_IPV6 - 782)) | (1L << (IS_USED_LOCK - 782)) | (1L << (LAST_INSERT_ID - 782)) | (1L << (LCASE - 782)) | (1L << (LEAST - 782)) | (1L << (LENGTH - 782)) | (1L << (LINEFROMTEXT - 782)) | (1L << (LINEFROMWKB - 782)) | (1L << (LINESTRINGFROMTEXT - 782)) | (1L << (LINESTRINGFROMWKB - 782)) | (1L << (LN - 782)) | (1L << (LOAD_FILE - 782)) | (1L << (LOCATE - 782)) | (1L << (LOG - 782)) | (1L << (LOG10 - 782)) | (1L << (LOG2 - 782)) | (1L << (LOWER - 782)) | (1L << (LPAD - 782)) | (1L << (LTRIM - 782)) | (1L << (MAKEDATE - 782)) | (1L << (MAKETIME - 782)) | (1L << (MAKE_SET - 782)) | (1L << (MASTER_POS_WAIT - 782)) | (1L << (MBRCONTAINS - 782)) | (1L << (MBRDISJOINT - 782)) | (1L << (MBREQUAL - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)) | (1L << (MPOINTFROMTEXT - 846)) | (1L << (MPOINTFROMWKB - 846)) | (1L << (MPOLYFROMTEXT - 846)) | (1L << (MPOLYFROMWKB - 846)) | (1L << (MULTILINESTRINGFROMTEXT - 846)) | (1L << (MULTILINESTRINGFROMWKB - 846)) | (1L << (MULTIPOINTFROMTEXT - 846)) | (1L << (MULTIPOINTFROMWKB - 846)) | (1L << (MULTIPOLYGONFROMTEXT - 846)) | (1L << (MULTIPOLYGONFROMWKB - 846)) | (1L << (NAME_CONST - 846)) | (1L << (NULLIF - 846)) | (1L << (NUMGEOMETRIES - 846)) | (1L << (NUMINTERIORRINGS - 846)) | (1L << (NUMPOINTS - 846)) | (1L << (OCT - 846)) | (1L << (OCTET_LENGTH - 846)) | (1L << (ORD - 846)) | (1L << (OVERLAPS - 846)) | (1L << (PERIOD_ADD - 846)) | (1L << (PERIOD_DIFF - 846)) | (1L << (PI - 846)) | (1L << (POINTFROMTEXT - 846)) | (1L << (POINTFROMWKB - 846)) | (1L << (POINTN - 846)) | (1L << (POLYFROMTEXT - 846)) | (1L << (POLYFROMWKB - 846)) | (1L << (POLYGONFROMTEXT - 846)) | (1L << (POLYGONFROMWKB - 846)) | (1L << (POW - 846)) | (1L << (POWER - 846)) | (1L << (QUOTE - 846)) | (1L << (RADIANS - 846)) | (1L << (RAND - 846)) | (1L << (RANDOM_BYTES - 846)) | (1L << (RELEASE_LOCK - 846)) | (1L << (REVERSE - 846)) | (1L << (ROUND - 846)) | (1L << (ROW_COUNT - 846)) | (1L << (RPAD - 846)) | (1L << (RTRIM - 846)) | (1L << (SEC_TO_TIME - 846)) | (1L << (SESSION_USER - 846)) | (1L << (SHA - 846)) | (1L << (SHA1 - 846)) | (1L << (SHA2 - 846)) | (1L << (SCHEMA_NAME - 846)) | (1L << (SIGN - 846)) | (1L << (SIN - 846)) | (1L << (SLEEP - 846)) | (1L << (SOUNDEX - 846)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 846)) | (1L << (SQRT - 846)) | (1L << (SRID - 846)) | (1L << (STARTPOINT - 846)) | (1L << (STRCMP - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)) | (1L << (ST_CONTAINS - 910)) | (1L << (ST_CROSSES - 910)) | (1L << (ST_DIFFERENCE - 910)) | (1L << (ST_DIMENSION - 910)) | (1L << (ST_DISJOINT - 910)) | (1L << (ST_DISTANCE - 910)) | (1L << (ST_ENDPOINT - 910)) | (1L << (ST_ENVELOPE - 910)) | (1L << (ST_EQUALS - 910)) | (1L << (ST_EXTERIORRING - 910)) | (1L << (ST_GEOMCOLLFROMTEXT - 910)) | (1L << (ST_GEOMCOLLFROMTXT - 910)) | (1L << (ST_GEOMCOLLFROMWKB - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1L << (ST_GEOMETRYFROMTEXT - 910)) | (1L << (ST_GEOMETRYFROMWKB - 910)) | (1L << (ST_GEOMETRYN - 910)) | (1L << (ST_GEOMETRYTYPE - 910)) | (1L << (ST_GEOMFROMTEXT - 910)) | (1L << (ST_GEOMFROMWKB - 910)) | (1L << (ST_INTERIORRINGN - 910)) | (1L << (ST_INTERSECTION - 910)) | (1L << (ST_INTERSECTS - 910)) | (1L << (ST_ISCLOSED - 910)) | (1L << (ST_ISEMPTY - 910)) | (1L << (ST_ISSIMPLE - 910)) | (1L << (ST_LINEFROMTEXT - 910)) | (1L << (ST_LINEFROMWKB - 910)) | (1L << (ST_LINESTRINGFROMTEXT - 910)) | (1L << (ST_LINESTRINGFROMWKB - 910)) | (1L << (ST_NUMGEOMETRIES - 910)) | (1L << (ST_NUMINTERIORRING - 910)) | (1L << (ST_NUMINTERIORRINGS - 910)) | (1L << (ST_NUMPOINTS - 910)) | (1L << (ST_OVERLAPS - 910)) | (1L << (ST_POINTFROMTEXT - 910)) | (1L << (ST_POINTFROMWKB - 910)) | (1L << (ST_POINTN - 910)) | (1L << (ST_POLYFROMTEXT - 910)) | (1L << (ST_POLYFROMWKB - 910)) | (1L << (ST_POLYGONFROMTEXT - 910)) | (1L << (ST_POLYGONFROMWKB - 910)) | (1L << (ST_SRID - 910)) | (1L << (ST_STARTPOINT - 910)) | (1L << (ST_SYMDIFFERENCE - 910)) | (1L << (ST_TOUCHES - 910)) | (1L << (ST_UNION - 910)) | (1L << (ST_WITHIN - 910)) | (1L << (ST_X - 910)) | (1L << (ST_Y - 910)) | (1L << (SUBDATE - 910)) | (1L << (SUBSTRING_INDEX - 910)) | (1L << (SUBTIME - 910)) | (1L << (SYSTEM_USER - 910)) | (1L << (TAN - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)) | (1L << (TO_SECONDS - 974)) | (1L << (UCASE - 974)) | (1L << (UNCOMPRESS - 974)) | (1L << (UNCOMPRESSED_LENGTH - 974)) | (1L << (UNHEX - 974)) | (1L << (UNIX_TIMESTAMP - 974)) | (1L << (UPDATEXML - 974)) | (1L << (UPPER - 974)) | (1L << (UUID - 974)) | (1L << (UUID_SHORT - 974)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 974)) | (1L << (VERSION - 974)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1L << (WEEKDAY - 974)) | (1L << (WEEKOFYEAR - 974)) | (1L << (WEIGHT_STRING - 974)) | (1L << (WITHIN - 974)) | (1L << (YEARWEEK - 974)) | (1L << (Y_FUNCTION - 974)) | (1L << (X_FUNCTION - 974)) | (1L << (MOD - 974)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1040)) | (1L << (STRING_LITERAL - 1040)) | (1L << (ID - 1040)) | (1L << (REVERSE_QUOTE_ID - 1040)))) != 0)) {
					{
					setState(1197);
					((InsertStatementContext)_localctx).partitions = uidList();
					}
				}

				setState(1200);
				match(RR_BRACKET);
				}
			}

			setState(1219);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case VALUES:
			case VALUE:
			case LR_BRACKET:
				{
				setState(1207);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,174,_ctx) ) {
				case 1:
					{
					setState(1203);
					match(LR_BRACKET);
					setState(1204);
					((InsertStatementContext)_localctx).columns = uidList();
					setState(1205);
					match(RR_BRACKET);
					}
					break;
				}
				setState(1209);
				insertStatementValue();
				}
				break;
			case SET:
				{
				setState(1210);
				match(SET);
				setState(1211);
				((InsertStatementContext)_localctx).setFirst = updatedElement();
				setState(1216);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1212);
					match(COMMA);
					setState(1213);
					((InsertStatementContext)_localctx).updatedElement = updatedElement();
					((InsertStatementContext)_localctx).setElements.add(((InsertStatementContext)_localctx).updatedElement);
					}
					}
					setState(1218);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1233);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(1221);
				match(ON);
				setState(1222);
				match(DUPLICATE);
				setState(1223);
				match(KEY);
				setState(1224);
				match(UPDATE);
				setState(1225);
				((InsertStatementContext)_localctx).duplicatedFirst = updatedElement();
				setState(1230);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1226);
					match(COMMA);
					setState(1227);
					((InsertStatementContext)_localctx).updatedElement = updatedElement();
					((InsertStatementContext)_localctx).duplicatedElements.add(((InsertStatementContext)_localctx).updatedElement);
					}
					}
					setState(1232);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectStatementContext extends ParserRuleContext {
		public SelectStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectStatement; }
	 
		public SelectStatementContext() { }
		public void copyFrom(SelectStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class UnionSelectContext extends SelectStatementContext {
		public Token unionType;
		public QuerySpecificationNointoContext querySpecificationNointo() {
			return getRuleContext(QuerySpecificationNointoContext.class,0);
		}
		public List<UnionStatementContext> unionStatement() {
			return getRuleContexts(UnionStatementContext.class);
		}
		public UnionStatementContext unionStatement(int i) {
			return getRuleContext(UnionStatementContext.class,i);
		}
		public TerminalNode UNION() { return getToken(MySqlParser.UNION, 0); }
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public UnionSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnionSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnionSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUnionSelect(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UnionParenthesisSelectContext extends SelectStatementContext {
		public Token unionType;
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public List<UnionParenthesisContext> unionParenthesis() {
			return getRuleContexts(UnionParenthesisContext.class);
		}
		public UnionParenthesisContext unionParenthesis(int i) {
			return getRuleContext(UnionParenthesisContext.class,i);
		}
		public TerminalNode UNION() { return getToken(MySqlParser.UNION, 0); }
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public UnionParenthesisSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnionParenthesisSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnionParenthesisSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUnionParenthesisSelect(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleSelectContext extends SelectStatementContext {
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public SimpleSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimpleSelect(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ParenthesisSelectContext extends SelectStatementContext {
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public ParenthesisSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterParenthesisSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitParenthesisSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitParenthesisSelect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectStatementContext selectStatement() throws RecognitionException {
		SelectStatementContext _localctx = new SelectStatementContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_selectStatement);
		int _la;
		try {
			int _alt;
			setState(1290);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,194,_ctx) ) {
			case 1:
				_localctx = new SimpleSelectContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1235);
				querySpecification();
				setState(1237);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR || _la==LOCK) {
					{
					setState(1236);
					lockClause();
					}
				}

				}
				break;
			case 2:
				_localctx = new ParenthesisSelectContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1239);
				queryExpression();
				setState(1241);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR || _la==LOCK) {
					{
					setState(1240);
					lockClause();
					}
				}

				}
				break;
			case 3:
				_localctx = new UnionSelectContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1243);
				querySpecificationNointo();
				setState(1245); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(1244);
						unionStatement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(1247); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,181,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(1257);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNION) {
					{
					setState(1249);
					match(UNION);
					setState(1251);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL || _la==DISTINCT) {
						{
						setState(1250);
						((UnionSelectContext)_localctx).unionType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==DISTINCT) ) {
							((UnionSelectContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(1255);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case SELECT:
						{
						setState(1253);
						querySpecification();
						}
						break;
					case LR_BRACKET:
						{
						setState(1254);
						queryExpression();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(1260);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,185,_ctx) ) {
				case 1:
					{
					setState(1259);
					orderByClause();
					}
					break;
				}
				setState(1263);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(1262);
					limitClause();
					}
				}

				setState(1266);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR || _la==LOCK) {
					{
					setState(1265);
					lockClause();
					}
				}

				}
				break;
			case 4:
				_localctx = new UnionParenthesisSelectContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1268);
				queryExpressionNointo();
				setState(1270); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(1269);
						unionParenthesis();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(1272); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,188,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(1279);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNION) {
					{
					setState(1274);
					match(UNION);
					setState(1276);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL || _la==DISTINCT) {
						{
						setState(1275);
						((UnionParenthesisSelectContext)_localctx).unionType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==DISTINCT) ) {
							((UnionParenthesisSelectContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(1278);
					queryExpression();
					}
				}

				setState(1282);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,191,_ctx) ) {
				case 1:
					{
					setState(1281);
					orderByClause();
					}
					break;
				}
				setState(1285);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(1284);
					limitClause();
					}
				}

				setState(1288);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR || _la==LOCK) {
					{
					setState(1287);
					lockClause();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateStatementContext extends ParserRuleContext {
		public SingleUpdateStatementContext singleUpdateStatement() {
			return getRuleContext(SingleUpdateStatementContext.class,0);
		}
		public MultipleUpdateStatementContext multipleUpdateStatement() {
			return getRuleContext(MultipleUpdateStatementContext.class,0);
		}
		public UpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUpdateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUpdateStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUpdateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateStatementContext updateStatement() throws RecognitionException {
		UpdateStatementContext _localctx = new UpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_updateStatement);
		try {
			setState(1294);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,195,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1292);
				singleUpdateStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1293);
				multipleUpdateStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertStatementValueContext extends ParserRuleContext {
		public Token insertFormat;
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public TerminalNode VALUES() { return getToken(MySqlParser.VALUES, 0); }
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public List<ExpressionsWithDefaultsContext> expressionsWithDefaults() {
			return getRuleContexts(ExpressionsWithDefaultsContext.class);
		}
		public ExpressionsWithDefaultsContext expressionsWithDefaults(int i) {
			return getRuleContext(ExpressionsWithDefaultsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public InsertStatementValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertStatementValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterInsertStatementValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitInsertStatementValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitInsertStatementValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertStatementValueContext insertStatementValue() throws RecognitionException {
		InsertStatementValueContext _localctx = new InsertStatementValueContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_insertStatementValue);
		int _la;
		try {
			setState(1314);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case LR_BRACKET:
				enterOuterAlt(_localctx, 1);
				{
				setState(1296);
				selectStatement();
				}
				break;
			case VALUES:
			case VALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1297);
				((InsertStatementValueContext)_localctx).insertFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==VALUES || _la==VALUE) ) {
					((InsertStatementValueContext)_localctx).insertFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1298);
				match(LR_BRACKET);
				setState(1300);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,196,_ctx) ) {
				case 1:
					{
					setState(1299);
					expressionsWithDefaults();
					}
					break;
				}
				setState(1302);
				match(RR_BRACKET);
				setState(1311);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1303);
					match(COMMA);
					setState(1304);
					match(LR_BRACKET);
					setState(1306);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,197,_ctx) ) {
					case 1:
						{
						setState(1305);
						expressionsWithDefaults();
						}
						break;
					}
					setState(1308);
					match(RR_BRACKET);
					}
					}
					setState(1313);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdatedElementContext extends ParserRuleContext {
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public UpdatedElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updatedElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUpdatedElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUpdatedElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUpdatedElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdatedElementContext updatedElement() throws RecognitionException {
		UpdatedElementContext _localctx = new UpdatedElementContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_updatedElement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1316);
			fullColumnName();
			setState(1317);
			match(EQUAL_SYMBOL);
			setState(1320);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,200,_ctx) ) {
			case 1:
				{
				setState(1318);
				expression(0);
				}
				break;
			case 2:
				{
				setState(1319);
				match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AssignmentFieldContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public AssignmentFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignmentField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAssignmentField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAssignmentField(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAssignmentField(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AssignmentFieldContext assignmentField() throws RecognitionException {
		AssignmentFieldContext _localctx = new AssignmentFieldContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_assignmentField);
		try {
			setState(1324);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case GROUP:
			case LEFT:
			case NUMBER:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_VALID:
			case JSON_SCHEMA_VALID:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(1322);
				uid();
				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(1323);
				match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockClauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public TerminalNode SHARE() { return getToken(MySqlParser.SHARE, 0); }
		public TerminalNode MODE() { return getToken(MySqlParser.MODE, 0); }
		public LockClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLockClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLockClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLockClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockClauseContext lockClause() throws RecognitionException {
		LockClauseContext _localctx = new LockClauseContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_lockClause);
		try {
			setState(1332);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(1326);
				match(FOR);
				setState(1327);
				match(UPDATE);
				}
				break;
			case LOCK:
				enterOuterAlt(_localctx, 2);
				{
				setState(1328);
				match(LOCK);
				setState(1329);
				match(IN);
				setState(1330);
				match(SHARE);
				setState(1331);
				match(MODE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleDeleteStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode DELETE() { return getToken(MySqlParser.DELETE, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode QUICK() { return getToken(MySqlParser.QUICK, 0); }
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public LimitClauseAtomContext limitClauseAtom() {
			return getRuleContext(LimitClauseAtomContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public SingleDeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleDeleteStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSingleDeleteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSingleDeleteStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSingleDeleteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleDeleteStatementContext singleDeleteStatement() throws RecognitionException {
		SingleDeleteStatementContext _localctx = new SingleDeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_singleDeleteStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1334);
			match(DELETE);
			setState(1336);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(1335);
				((SingleDeleteStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(1339);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==QUICK) {
				{
				setState(1338);
				match(QUICK);
				}
			}

			setState(1342);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(1341);
				match(IGNORE);
				}
			}

			setState(1344);
			match(FROM);
			setState(1345);
			tableName();
			setState(1351);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(1346);
				match(PARTITION);
				setState(1347);
				match(LR_BRACKET);
				setState(1348);
				uidList();
				setState(1349);
				match(RR_BRACKET);
				}
			}

			setState(1355);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(1353);
				match(WHERE);
				setState(1354);
				expression(0);
				}
			}

			setState(1358);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(1357);
				orderByClause();
				}
			}

			setState(1362);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(1360);
				match(LIMIT);
				setState(1361);
				limitClauseAtom();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultipleDeleteStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode DELETE() { return getToken(MySqlParser.DELETE, 0); }
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public TerminalNode QUICK() { return getToken(MySqlParser.QUICK, 0); }
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public List<TerminalNode> DOT() { return getTokens(MySqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(MySqlParser.DOT, i);
		}
		public List<TerminalNode> STAR() { return getTokens(MySqlParser.STAR); }
		public TerminalNode STAR(int i) {
			return getToken(MySqlParser.STAR, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public MultipleDeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipleDeleteStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMultipleDeleteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMultipleDeleteStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMultipleDeleteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultipleDeleteStatementContext multipleDeleteStatement() throws RecognitionException {
		MultipleDeleteStatementContext _localctx = new MultipleDeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_multipleDeleteStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1364);
			match(DELETE);
			setState(1366);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(1365);
				((MultipleDeleteStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(1369);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,211,_ctx) ) {
			case 1:
				{
				setState(1368);
				match(QUICK);
				}
				break;
			}
			setState(1372);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(1371);
				match(IGNORE);
				}
			}

			setState(1413);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case GROUP:
			case LEFT:
			case NUMBER:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_VALID:
			case JSON_SCHEMA_VALID:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				{
				setState(1374);
				tableName();
				setState(1377);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT) {
					{
					setState(1375);
					match(DOT);
					setState(1376);
					match(STAR);
					}
				}

				setState(1387);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1379);
					match(COMMA);
					setState(1380);
					tableName();
					setState(1383);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOT) {
						{
						setState(1381);
						match(DOT);
						setState(1382);
						match(STAR);
						}
					}

					}
					}
					setState(1389);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1390);
				match(FROM);
				setState(1391);
				tableSources();
				}
				break;
			case FROM:
				{
				setState(1393);
				match(FROM);
				setState(1394);
				tableName();
				setState(1397);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT) {
					{
					setState(1395);
					match(DOT);
					setState(1396);
					match(STAR);
					}
				}

				setState(1407);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1399);
					match(COMMA);
					setState(1400);
					tableName();
					setState(1403);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOT) {
						{
						setState(1401);
						match(DOT);
						setState(1402);
						match(STAR);
						}
					}

					}
					}
					setState(1409);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1410);
				match(USING);
				setState(1411);
				tableSources();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1417);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(1415);
				match(WHERE);
				setState(1416);
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleUpdateStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SingleUpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleUpdateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSingleUpdateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSingleUpdateStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSingleUpdateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleUpdateStatementContext singleUpdateStatement() throws RecognitionException {
		SingleUpdateStatementContext _localctx = new SingleUpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_singleUpdateStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1419);
			match(UPDATE);
			setState(1421);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(1420);
				((SingleUpdateStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(1424);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(1423);
				match(IGNORE);
				}
			}

			setState(1426);
			tableName();
			setState(1431);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (GROUP - 66)) | (1L << (LEFT - 66)) | (1L << (NUMBER - 66)) | (1L << (ORDER - 66)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (RIGHT - 133)) | (1L << (SCHEMA - 133)) | (1L << (STACKED - 133)))) != 0) || ((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (DATE - 199)) | (1L << (TIME - 199)) | (1L << (TIMESTAMP - 199)) | (1L << (DATETIME - 199)) | (1L << (YEAR - 199)) | (1L << (TEXT - 199)) | (1L << (ENUM - 199)) | (1L << (SERIAL - 199)) | (1L << (JSON_VALID - 199)) | (1L << (JSON_SCHEMA_VALID - 199)) | (1L << (AVG - 199)) | (1L << (BIT_AND - 199)) | (1L << (BIT_OR - 199)) | (1L << (BIT_XOR - 199)) | (1L << (COUNT - 199)) | (1L << (GROUP_CONCAT - 199)) | (1L << (MAX - 199)) | (1L << (MIN - 199)) | (1L << (STD - 199)) | (1L << (STDDEV - 199)) | (1L << (STDDEV_POP - 199)) | (1L << (STDDEV_SAMP - 199)) | (1L << (SUM - 199)) | (1L << (VAR_POP - 199)) | (1L << (VAR_SAMP - 199)) | (1L << (VARIANCE - 199)) | (1L << (POSITION - 199)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)) | (1L << (BOOL - 270)) | (1L << (BOOLEAN - 270)) | (1L << (BTREE - 270)) | (1L << (CACHE - 270)) | (1L << (CASCADED - 270)) | (1L << (CHAIN - 270)) | (1L << (CHANGED - 270)) | (1L << (CHANNEL - 270)) | (1L << (CHECKSUM - 270)) | (1L << (PAGE_CHECKSUM - 270)) | (1L << (CIPHER - 270)) | (1L << (CLASS_ORIGIN - 270)) | (1L << (CLIENT - 270)) | (1L << (CLOSE - 270)) | (1L << (COALESCE - 270)) | (1L << (CODE - 270)) | (1L << (COLUMNS - 270)) | (1L << (COLUMN_FORMAT - 270)) | (1L << (COLUMN_NAME - 270)) | (1L << (COMMENT - 270)) | (1L << (COMMIT - 270)) | (1L << (COMPACT - 270)) | (1L << (COMPLETION - 270)) | (1L << (COMPRESSED - 270)) | (1L << (COMPRESSION - 270)) | (1L << (CONCURRENT - 270)) | (1L << (CONNECTION - 270)) | (1L << (CONSISTENT - 270)) | (1L << (CONSTRAINT_CATALOG - 270)) | (1L << (CONSTRAINT_SCHEMA - 270)) | (1L << (CONSTRAINT_NAME - 270)) | (1L << (CONTAINS - 270)) | (1L << (CONTEXT - 270)) | (1L << (CONTRIBUTORS - 270)) | (1L << (COPY - 270)) | (1L << (CPU - 270)) | (1L << (CURSOR_NAME - 270)) | (1L << (DATA - 270)) | (1L << (DATAFILE - 270)) | (1L << (DEALLOCATE - 270)) | (1L << (DEFAULT_AUTH - 270)) | (1L << (DEFINER - 270)) | (1L << (DELAY_KEY_WRITE - 270)) | (1L << (DES_KEY_FILE - 270)) | (1L << (DIRECTORY - 270)) | (1L << (DISABLE - 270)) | (1L << (DISCARD - 270)) | (1L << (DISK - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)) | (1L << (EVENTS - 334)) | (1L << (EVERY - 334)) | (1L << (EXCHANGE - 334)) | (1L << (EXCLUSIVE - 334)) | (1L << (EXPIRE - 334)) | (1L << (EXPORT - 334)) | (1L << (EXTENDED - 334)) | (1L << (EXTENT_SIZE - 334)) | (1L << (FAST - 334)) | (1L << (FAULTS - 334)) | (1L << (FIELDS - 334)) | (1L << (FILE_BLOCK_SIZE - 334)) | (1L << (FILTER - 334)) | (1L << (FIRST - 334)) | (1L << (FIXED - 334)) | (1L << (FLUSH - 334)) | (1L << (FOLLOWS - 334)) | (1L << (FOUND - 334)) | (1L << (FULL - 334)) | (1L << (FUNCTION - 334)) | (1L << (GENERAL - 334)) | (1L << (GLOBAL - 334)) | (1L << (GRANTS - 334)) | (1L << (GROUP_REPLICATION - 334)) | (1L << (HANDLER - 334)) | (1L << (HASH - 334)) | (1L << (HELP - 334)) | (1L << (HOST - 334)) | (1L << (HOSTS - 334)) | (1L << (IDENTIFIED - 334)) | (1L << (IGNORE_SERVER_IDS - 334)) | (1L << (IMPORT - 334)) | (1L << (INDEXES - 334)) | (1L << (INITIAL_SIZE - 334)) | (1L << (INPLACE - 334)) | (1L << (INSERT_METHOD - 334)) | (1L << (INSTALL - 334)) | (1L << (INSTANCE - 334)) | (1L << (INVISIBLE - 334)) | (1L << (INVOKER - 334)) | (1L << (IO - 334)) | (1L << (IO_THREAD - 334)) | (1L << (IPC - 334)) | (1L << (ISOLATION - 334)) | (1L << (ISSUER - 334)) | (1L << (JSON - 334)) | (1L << (KEY_BLOCK_SIZE - 334)) | (1L << (LANGUAGE - 334)) | (1L << (LAST - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)) | (1L << (MASTER_LOG_POS - 398)) | (1L << (MASTER_PASSWORD - 398)) | (1L << (MASTER_PORT - 398)) | (1L << (MASTER_RETRY_COUNT - 398)) | (1L << (MASTER_SSL - 398)) | (1L << (MASTER_SSL_CA - 398)) | (1L << (MASTER_SSL_CAPATH - 398)) | (1L << (MASTER_SSL_CERT - 398)) | (1L << (MASTER_SSL_CIPHER - 398)) | (1L << (MASTER_SSL_CRL - 398)) | (1L << (MASTER_SSL_CRLPATH - 398)) | (1L << (MASTER_SSL_KEY - 398)) | (1L << (MASTER_TLS_VERSION - 398)) | (1L << (MASTER_USER - 398)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 398)) | (1L << (MAX_QUERIES_PER_HOUR - 398)) | (1L << (MAX_ROWS - 398)) | (1L << (MAX_SIZE - 398)) | (1L << (MAX_UPDATES_PER_HOUR - 398)) | (1L << (MAX_USER_CONNECTIONS - 398)) | (1L << (MEDIUM - 398)) | (1L << (MEMBER - 398)) | (1L << (MERGE - 398)) | (1L << (MESSAGE_TEXT - 398)) | (1L << (MID - 398)) | (1L << (MIGRATE - 398)) | (1L << (MIN_ROWS - 398)) | (1L << (MODE - 398)) | (1L << (MODIFY - 398)) | (1L << (MUTEX - 398)) | (1L << (MYSQL - 398)) | (1L << (MYSQL_ERRNO - 398)) | (1L << (NAME - 398)) | (1L << (NAMES - 398)) | (1L << (NCHAR - 398)) | (1L << (NEVER - 398)) | (1L << (NEXT - 398)) | (1L << (NO - 398)) | (1L << (NODEGROUP - 398)) | (1L << (NONE - 398)) | (1L << (OFFLINE - 398)) | (1L << (OFFSET - 398)) | (1L << (OF - 398)) | (1L << (OJ - 398)) | (1L << (OLD_PASSWORD - 398)) | (1L << (ONE - 398)) | (1L << (ONLINE - 398)) | (1L << (ONLY - 398)) | (1L << (OPEN - 398)) | (1L << (OPTIMIZER_COSTS - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)) | (1L << (PORT - 462)) | (1L << (PRECEDES - 462)) | (1L << (PREPARE - 462)) | (1L << (PRESERVE - 462)) | (1L << (PREV - 462)) | (1L << (PROCESSLIST - 462)) | (1L << (PROFILE - 462)) | (1L << (PROFILES - 462)) | (1L << (PROXY - 462)) | (1L << (QUERY - 462)) | (1L << (QUICK - 462)) | (1L << (REBUILD - 462)) | (1L << (RECOVER - 462)) | (1L << (REDO_BUFFER_SIZE - 462)) | (1L << (REDUNDANT - 462)) | (1L << (RELAY - 462)) | (1L << (RELAY_LOG_FILE - 462)) | (1L << (RELAY_LOG_POS - 462)) | (1L << (RELAYLOG - 462)) | (1L << (REMOVE - 462)) | (1L << (REORGANIZE - 462)) | (1L << (REPAIR - 462)) | (1L << (REPLICATE_DO_DB - 462)) | (1L << (REPLICATE_DO_TABLE - 462)) | (1L << (REPLICATE_IGNORE_DB - 462)) | (1L << (REPLICATE_IGNORE_TABLE - 462)) | (1L << (REPLICATE_REWRITE_DB - 462)) | (1L << (REPLICATE_WILD_DO_TABLE - 462)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 462)) | (1L << (REPLICATION - 462)) | (1L << (RESET - 462)) | (1L << (RESUME - 462)) | (1L << (RETURNED_SQLSTATE - 462)) | (1L << (RETURNS - 462)) | (1L << (ROLE - 462)) | (1L << (ROLLBACK - 462)) | (1L << (ROLLUP - 462)) | (1L << (ROTATE - 462)) | (1L << (ROW - 462)) | (1L << (ROWS - 462)) | (1L << (ROW_FORMAT - 462)) | (1L << (SAVEPOINT - 462)) | (1L << (SCHEDULE - 462)) | (1L << (SECURITY - 462)) | (1L << (SERVER - 462)) | (1L << (SESSION - 462)) | (1L << (SHARE - 462)) | (1L << (SHARED - 462)) | (1L << (SIGNED - 462)) | (1L << (SIMPLE - 462)) | (1L << (SLAVE - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)) | (1L << (SQL_CACHE - 526)) | (1L << (SQL_NO_CACHE - 526)) | (1L << (SQL_THREAD - 526)) | (1L << (START - 526)) | (1L << (STARTS - 526)) | (1L << (STATS_AUTO_RECALC - 526)) | (1L << (STATS_PERSISTENT - 526)) | (1L << (STATS_SAMPLE_PAGES - 526)) | (1L << (STATUS - 526)) | (1L << (STOP - 526)) | (1L << (STORAGE - 526)) | (1L << (STRING - 526)) | (1L << (SUBCLASS_ORIGIN - 526)) | (1L << (SUBJECT - 526)) | (1L << (SUBPARTITION - 526)) | (1L << (SUBPARTITIONS - 526)) | (1L << (SUSPEND - 526)) | (1L << (SWAPS - 526)) | (1L << (SWITCHES - 526)) | (1L << (TABLE_NAME - 526)) | (1L << (TABLESPACE - 526)) | (1L << (TEMPORARY - 526)) | (1L << (TEMPTABLE - 526)) | (1L << (THAN - 526)) | (1L << (TRADITIONAL - 526)) | (1L << (TRANSACTION - 526)) | (1L << (TRANSACTIONAL - 526)) | (1L << (TRIGGERS - 526)) | (1L << (TRUNCATE - 526)) | (1L << (UNDEFINED - 526)) | (1L << (UNDOFILE - 526)) | (1L << (UNDO_BUFFER_SIZE - 526)) | (1L << (UNINSTALL - 526)) | (1L << (UNKNOWN - 526)) | (1L << (UNTIL - 526)) | (1L << (UPGRADE - 526)) | (1L << (USER - 526)) | (1L << (USE_FRM - 526)) | (1L << (USER_RESOURCES - 526)) | (1L << (VALIDATION - 526)) | (1L << (VALUE - 526)) | (1L << (VARIABLES - 526)) | (1L << (VIEW - 526)) | (1L << (VISIBLE - 526)) | (1L << (WAIT - 526)) | (1L << (WARNINGS - 526)) | (1L << (WITHOUT - 526)) | (1L << (WORK - 526)) | (1L << (WRAPPER - 526)) | (1L << (X509 - 526)) | (1L << (XA - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (XML - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)) | (1L << (DAY - 590)) | (1L << (HOUR - 590)) | (1L << (MINUTE - 590)) | (1L << (WEEK - 590)) | (1L << (SECOND - 590)) | (1L << (MICROSECOND - 590)) | (1L << (TABLES - 590)) | (1L << (ROUTINE - 590)) | (1L << (EXECUTE - 590)) | (1L << (FILE - 590)) | (1L << (PROCESS - 590)) | (1L << (RELOAD - 590)) | (1L << (SHUTDOWN - 590)) | (1L << (SUPER - 590)) | (1L << (PRIVILEGES - 590)) | (1L << (AUDIT_ADMIN - 590)) | (1L << (BACKUP_ADMIN - 590)) | (1L << (BINLOG_ADMIN - 590)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 590)) | (1L << (CLONE_ADMIN - 590)) | (1L << (CONNECTION_ADMIN - 590)) | (1L << (ENCRYPTION_KEY_ADMIN - 590)) | (1L << (FIREWALL_ADMIN - 590)) | (1L << (FIREWALL_USER - 590)) | (1L << (GROUP_REPLICATION_ADMIN - 590)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 590)) | (1L << (NDB_STORED_USER - 590)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 590)) | (1L << (REPLICATION_APPLIER - 590)) | (1L << (REPLICATION_SLAVE_ADMIN - 590)) | (1L << (RESOURCE_GROUP_ADMIN - 590)) | (1L << (RESOURCE_GROUP_USER - 590)) | (1L << (ROLE_ADMIN - 590)) | (1L << (SESSION_VARIABLES_ADMIN - 590)) | (1L << (SET_USER_ID - 590)) | (1L << (SHOW_ROUTINE - 590)) | (1L << (SYSTEM_VARIABLES_ADMIN - 590)) | (1L << (TABLE_ENCRYPTION_ADMIN - 590)) | (1L << (VERSION_TOKEN_ADMIN - 590)) | (1L << (XA_RECOVER_ADMIN - 590)) | (1L << (ARMSCII8 - 590)) | (1L << (ASCII - 590)) | (1L << (BIG5 - 590)) | (1L << (CP1250 - 590)) | (1L << (CP1251 - 590)) | (1L << (CP1256 - 590)) | (1L << (CP1257 - 590)) | (1L << (CP850 - 590)) | (1L << (CP852 - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)) | (1L << (GREEK - 654)) | (1L << (HEBREW - 654)) | (1L << (HP8 - 654)) | (1L << (KEYBCS2 - 654)) | (1L << (KOI8R - 654)) | (1L << (KOI8U - 654)) | (1L << (LATIN1 - 654)) | (1L << (LATIN2 - 654)) | (1L << (LATIN5 - 654)) | (1L << (LATIN7 - 654)) | (1L << (MACCE - 654)) | (1L << (MACROMAN - 654)) | (1L << (SJIS - 654)) | (1L << (SWE7 - 654)) | (1L << (TIS620 - 654)) | (1L << (UCS2 - 654)) | (1L << (UJIS - 654)) | (1L << (UTF16 - 654)) | (1L << (UTF16LE - 654)) | (1L << (UTF32 - 654)) | (1L << (UTF8 - 654)) | (1L << (UTF8MB3 - 654)) | (1L << (UTF8MB4 - 654)) | (1L << (ARCHIVE - 654)) | (1L << (BLACKHOLE - 654)) | (1L << (CSV - 654)) | (1L << (FEDERATED - 654)) | (1L << (INNODB - 654)) | (1L << (MEMORY - 654)) | (1L << (MRG_MYISAM - 654)) | (1L << (MYISAM - 654)) | (1L << (NDB - 654)) | (1L << (NDBCLUSTER - 654)) | (1L << (PERFORMANCE_SCHEMA - 654)) | (1L << (TOKUDB - 654)) | (1L << (REPEATABLE - 654)) | (1L << (COMMITTED - 654)) | (1L << (UNCOMMITTED - 654)) | (1L << (SERIALIZABLE - 654)) | (1L << (GEOMETRYCOLLECTION - 654)) | (1L << (LINESTRING - 654)) | (1L << (MULTILINESTRING - 654)) | (1L << (MULTIPOINT - 654)) | (1L << (MULTIPOLYGON - 654)) | (1L << (POINT - 654)) | (1L << (POLYGON - 654)) | (1L << (ABS - 654)) | (1L << (ACOS - 654)) | (1L << (ADDDATE - 654)) | (1L << (ADDTIME - 654)) | (1L << (AES_DECRYPT - 654)) | (1L << (AES_ENCRYPT - 654)) | (1L << (AREA - 654)) | (1L << (ASBINARY - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)) | (1L << (ASYMMETRIC_VERIFY - 718)) | (1L << (ATAN - 718)) | (1L << (ATAN2 - 718)) | (1L << (BENCHMARK - 718)) | (1L << (BIN - 718)) | (1L << (BIT_COUNT - 718)) | (1L << (BIT_LENGTH - 718)) | (1L << (BUFFER - 718)) | (1L << (CATALOG_NAME - 718)) | (1L << (CEIL - 718)) | (1L << (CEILING - 718)) | (1L << (CENTROID - 718)) | (1L << (CHARACTER_LENGTH - 718)) | (1L << (CHARSET - 718)) | (1L << (CHAR_LENGTH - 718)) | (1L << (COERCIBILITY - 718)) | (1L << (COLLATION - 718)) | (1L << (COMPRESS - 718)) | (1L << (CONCAT - 718)) | (1L << (CONCAT_WS - 718)) | (1L << (CONNECTION_ID - 718)) | (1L << (CONV - 718)) | (1L << (CONVERT_TZ - 718)) | (1L << (COS - 718)) | (1L << (COT - 718)) | (1L << (CRC32 - 718)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1L << (CREATE_DH_PARAMETERS - 718)) | (1L << (CREATE_DIGEST - 718)) | (1L << (CROSSES - 718)) | (1L << (DATEDIFF - 718)) | (1L << (DATE_FORMAT - 718)) | (1L << (DAYNAME - 718)) | (1L << (DAYOFMONTH - 718)) | (1L << (DAYOFWEEK - 718)) | (1L << (DAYOFYEAR - 718)) | (1L << (DECODE - 718)) | (1L << (DEGREES - 718)) | (1L << (DES_DECRYPT - 718)) | (1L << (DES_ENCRYPT - 718)) | (1L << (DIMENSION - 718)) | (1L << (DISJOINT - 718)) | (1L << (ELT - 718)) | (1L << (ENCODE - 718)) | (1L << (ENCRYPT - 718)) | (1L << (ENDPOINT - 718)) | (1L << (ENVELOPE - 718)) | (1L << (EQUALS - 718)) | (1L << (EXP - 718)) | (1L << (EXPORT_SET - 718)) | (1L << (EXTERIORRING - 718)) | (1L << (EXTRACTVALUE - 718)) | (1L << (FIELD - 718)) | (1L << (FIND_IN_SET - 718)) | (1L << (FLOOR - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 782)) | (1L << (GEOMETRYFROMTEXT - 782)) | (1L << (GEOMETRYFROMWKB - 782)) | (1L << (GEOMETRYN - 782)) | (1L << (GEOMETRYTYPE - 782)) | (1L << (GEOMFROMTEXT - 782)) | (1L << (GEOMFROMWKB - 782)) | (1L << (GET_FORMAT - 782)) | (1L << (GET_LOCK - 782)) | (1L << (GLENGTH - 782)) | (1L << (GREATEST - 782)) | (1L << (GTID_SUBSET - 782)) | (1L << (GTID_SUBTRACT - 782)) | (1L << (HEX - 782)) | (1L << (IFNULL - 782)) | (1L << (INET6_ATON - 782)) | (1L << (INET6_NTOA - 782)) | (1L << (INET_ATON - 782)) | (1L << (INET_NTOA - 782)) | (1L << (INSTR - 782)) | (1L << (INTERIORRINGN - 782)) | (1L << (INTERSECTS - 782)) | (1L << (ISCLOSED - 782)) | (1L << (ISEMPTY - 782)) | (1L << (ISNULL - 782)) | (1L << (ISSIMPLE - 782)) | (1L << (IS_FREE_LOCK - 782)) | (1L << (IS_IPV4 - 782)) | (1L << (IS_IPV4_COMPAT - 782)) | (1L << (IS_IPV4_MAPPED - 782)) | (1L << (IS_IPV6 - 782)) | (1L << (IS_USED_LOCK - 782)) | (1L << (LAST_INSERT_ID - 782)) | (1L << (LCASE - 782)) | (1L << (LEAST - 782)) | (1L << (LENGTH - 782)) | (1L << (LINEFROMTEXT - 782)) | (1L << (LINEFROMWKB - 782)) | (1L << (LINESTRINGFROMTEXT - 782)) | (1L << (LINESTRINGFROMWKB - 782)) | (1L << (LN - 782)) | (1L << (LOAD_FILE - 782)) | (1L << (LOCATE - 782)) | (1L << (LOG - 782)) | (1L << (LOG10 - 782)) | (1L << (LOG2 - 782)) | (1L << (LOWER - 782)) | (1L << (LPAD - 782)) | (1L << (LTRIM - 782)) | (1L << (MAKEDATE - 782)) | (1L << (MAKETIME - 782)) | (1L << (MAKE_SET - 782)) | (1L << (MASTER_POS_WAIT - 782)) | (1L << (MBRCONTAINS - 782)) | (1L << (MBRDISJOINT - 782)) | (1L << (MBREQUAL - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)) | (1L << (MPOINTFROMTEXT - 846)) | (1L << (MPOINTFROMWKB - 846)) | (1L << (MPOLYFROMTEXT - 846)) | (1L << (MPOLYFROMWKB - 846)) | (1L << (MULTILINESTRINGFROMTEXT - 846)) | (1L << (MULTILINESTRINGFROMWKB - 846)) | (1L << (MULTIPOINTFROMTEXT - 846)) | (1L << (MULTIPOINTFROMWKB - 846)) | (1L << (MULTIPOLYGONFROMTEXT - 846)) | (1L << (MULTIPOLYGONFROMWKB - 846)) | (1L << (NAME_CONST - 846)) | (1L << (NULLIF - 846)) | (1L << (NUMGEOMETRIES - 846)) | (1L << (NUMINTERIORRINGS - 846)) | (1L << (NUMPOINTS - 846)) | (1L << (OCT - 846)) | (1L << (OCTET_LENGTH - 846)) | (1L << (ORD - 846)) | (1L << (OVERLAPS - 846)) | (1L << (PERIOD_ADD - 846)) | (1L << (PERIOD_DIFF - 846)) | (1L << (PI - 846)) | (1L << (POINTFROMTEXT - 846)) | (1L << (POINTFROMWKB - 846)) | (1L << (POINTN - 846)) | (1L << (POLYFROMTEXT - 846)) | (1L << (POLYFROMWKB - 846)) | (1L << (POLYGONFROMTEXT - 846)) | (1L << (POLYGONFROMWKB - 846)) | (1L << (POW - 846)) | (1L << (POWER - 846)) | (1L << (QUOTE - 846)) | (1L << (RADIANS - 846)) | (1L << (RAND - 846)) | (1L << (RANDOM_BYTES - 846)) | (1L << (RELEASE_LOCK - 846)) | (1L << (REVERSE - 846)) | (1L << (ROUND - 846)) | (1L << (ROW_COUNT - 846)) | (1L << (RPAD - 846)) | (1L << (RTRIM - 846)) | (1L << (SEC_TO_TIME - 846)) | (1L << (SESSION_USER - 846)) | (1L << (SHA - 846)) | (1L << (SHA1 - 846)) | (1L << (SHA2 - 846)) | (1L << (SCHEMA_NAME - 846)) | (1L << (SIGN - 846)) | (1L << (SIN - 846)) | (1L << (SLEEP - 846)) | (1L << (SOUNDEX - 846)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 846)) | (1L << (SQRT - 846)) | (1L << (SRID - 846)) | (1L << (STARTPOINT - 846)) | (1L << (STRCMP - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)) | (1L << (ST_CONTAINS - 910)) | (1L << (ST_CROSSES - 910)) | (1L << (ST_DIFFERENCE - 910)) | (1L << (ST_DIMENSION - 910)) | (1L << (ST_DISJOINT - 910)) | (1L << (ST_DISTANCE - 910)) | (1L << (ST_ENDPOINT - 910)) | (1L << (ST_ENVELOPE - 910)) | (1L << (ST_EQUALS - 910)) | (1L << (ST_EXTERIORRING - 910)) | (1L << (ST_GEOMCOLLFROMTEXT - 910)) | (1L << (ST_GEOMCOLLFROMTXT - 910)) | (1L << (ST_GEOMCOLLFROMWKB - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1L << (ST_GEOMETRYFROMTEXT - 910)) | (1L << (ST_GEOMETRYFROMWKB - 910)) | (1L << (ST_GEOMETRYN - 910)) | (1L << (ST_GEOMETRYTYPE - 910)) | (1L << (ST_GEOMFROMTEXT - 910)) | (1L << (ST_GEOMFROMWKB - 910)) | (1L << (ST_INTERIORRINGN - 910)) | (1L << (ST_INTERSECTION - 910)) | (1L << (ST_INTERSECTS - 910)) | (1L << (ST_ISCLOSED - 910)) | (1L << (ST_ISEMPTY - 910)) | (1L << (ST_ISSIMPLE - 910)) | (1L << (ST_LINEFROMTEXT - 910)) | (1L << (ST_LINEFROMWKB - 910)) | (1L << (ST_LINESTRINGFROMTEXT - 910)) | (1L << (ST_LINESTRINGFROMWKB - 910)) | (1L << (ST_NUMGEOMETRIES - 910)) | (1L << (ST_NUMINTERIORRING - 910)) | (1L << (ST_NUMINTERIORRINGS - 910)) | (1L << (ST_NUMPOINTS - 910)) | (1L << (ST_OVERLAPS - 910)) | (1L << (ST_POINTFROMTEXT - 910)) | (1L << (ST_POINTFROMWKB - 910)) | (1L << (ST_POINTN - 910)) | (1L << (ST_POLYFROMTEXT - 910)) | (1L << (ST_POLYFROMWKB - 910)) | (1L << (ST_POLYGONFROMTEXT - 910)) | (1L << (ST_POLYGONFROMWKB - 910)) | (1L << (ST_SRID - 910)) | (1L << (ST_STARTPOINT - 910)) | (1L << (ST_SYMDIFFERENCE - 910)) | (1L << (ST_TOUCHES - 910)) | (1L << (ST_UNION - 910)) | (1L << (ST_WITHIN - 910)) | (1L << (ST_X - 910)) | (1L << (ST_Y - 910)) | (1L << (SUBDATE - 910)) | (1L << (SUBSTRING_INDEX - 910)) | (1L << (SUBTIME - 910)) | (1L << (SYSTEM_USER - 910)) | (1L << (TAN - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)) | (1L << (TO_SECONDS - 974)) | (1L << (UCASE - 974)) | (1L << (UNCOMPRESS - 974)) | (1L << (UNCOMPRESSED_LENGTH - 974)) | (1L << (UNHEX - 974)) | (1L << (UNIX_TIMESTAMP - 974)) | (1L << (UPDATEXML - 974)) | (1L << (UPPER - 974)) | (1L << (UUID - 974)) | (1L << (UUID_SHORT - 974)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 974)) | (1L << (VERSION - 974)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1L << (WEEKDAY - 974)) | (1L << (WEEKOFYEAR - 974)) | (1L << (WEIGHT_STRING - 974)) | (1L << (WITHIN - 974)) | (1L << (YEARWEEK - 974)) | (1L << (Y_FUNCTION - 974)) | (1L << (X_FUNCTION - 974)) | (1L << (MOD - 974)))) != 0) || ((((_la - 1040)) & ~0x3f) == 0 && ((1L << (_la - 1040)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1040)) | (1L << (STRING_LITERAL - 1040)) | (1L << (ID - 1040)) | (1L << (REVERSE_QUOTE_ID - 1040)))) != 0)) {
				{
				setState(1428);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(1427);
					match(AS);
					}
				}

				setState(1430);
				uid();
				}
			}

			setState(1433);
			match(SET);
			setState(1434);
			updatedElement();
			setState(1439);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1435);
				match(COMMA);
				setState(1436);
				updatedElement();
				}
				}
				setState(1441);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1444);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(1442);
				match(WHERE);
				setState(1443);
				expression(0);
				}
			}

			setState(1447);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(1446);
				orderByClause();
				}
			}

			setState(1450);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(1449);
				limitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultipleUpdateStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public MultipleUpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipleUpdateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMultipleUpdateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMultipleUpdateStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMultipleUpdateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultipleUpdateStatementContext multipleUpdateStatement() throws RecognitionException {
		MultipleUpdateStatementContext _localctx = new MultipleUpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_multipleUpdateStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1452);
			match(UPDATE);
			setState(1454);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(1453);
				((MultipleUpdateStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(1457);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(1456);
				match(IGNORE);
				}
			}

			setState(1459);
			tableSources();
			setState(1460);
			match(SET);
			setState(1461);
			updatedElement();
			setState(1466);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1462);
				match(COMMA);
				setState(1463);
				updatedElement();
				}
				}
				setState(1468);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1471);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(1469);
				match(WHERE);
				setState(1470);
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderByClauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(MySqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public List<OrderByExpressionContext> orderByExpression() {
			return getRuleContexts(OrderByExpressionContext.class);
		}
		public OrderByExpressionContext orderByExpression(int i) {
			return getRuleContext(OrderByExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public OrderByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOrderByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOrderByClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitOrderByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderByClauseContext orderByClause() throws RecognitionException {
		OrderByClauseContext _localctx = new OrderByClauseContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_orderByClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1473);
			match(ORDER);
			setState(1474);
			match(BY);
			setState(1475);
			orderByExpression();
			setState(1480);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1476);
				match(COMMA);
				setState(1477);
				orderByExpression();
				}
				}
				setState(1482);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderByExpressionContext extends ParserRuleContext {
		public Token order;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASC() { return getToken(MySqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public OrderByExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOrderByExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOrderByExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitOrderByExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderByExpressionContext orderByExpression() throws RecognitionException {
		OrderByExpressionContext _localctx = new OrderByExpressionContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_orderByExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1483);
			expression(0);
			setState(1485);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(1484);
				((OrderByExpressionContext)_localctx).order = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((OrderByExpressionContext)_localctx).order = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSourcesContext extends ParserRuleContext {
		public List<TableSourceContext> tableSource() {
			return getRuleContexts(TableSourceContext.class);
		}
		public TableSourceContext tableSource(int i) {
			return getRuleContext(TableSourceContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TableSourcesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSources; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableSources(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableSources(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableSources(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSourcesContext tableSources() throws RecognitionException {
		TableSourcesContext _localctx = new TableSourcesContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_tableSources);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1487);
			tableSource();
			setState(1492);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1488);
				match(COMMA);
				setState(1489);
				tableSource();
				}
				}
				setState(1494);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSourceContext extends ParserRuleContext {
		public TableSourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSource; }
	 
		public TableSourceContext() { }
		public void copyFrom(TableSourceContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class TableSourceNestedContext extends TableSourceContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<JoinPartContext> joinPart() {
			return getRuleContexts(JoinPartContext.class);
		}
		public JoinPartContext joinPart(int i) {
			return getRuleContext(JoinPartContext.class,i);
		}
		public TableSourceNestedContext(TableSourceContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableSourceNested(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableSourceNested(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableSourceNested(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableSourceBaseContext extends TableSourceContext {
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public List<JoinPartContext> joinPart() {
			return getRuleContexts(JoinPartContext.class);
		}
		public JoinPartContext joinPart(int i) {
			return getRuleContext(JoinPartContext.class,i);
		}
		public TableSourceBaseContext(TableSourceContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableSourceBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableSourceBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableSourceBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSourceContext tableSource() throws RecognitionException {
		TableSourceContext _localctx = new TableSourceContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_tableSource);
		int _la;
		try {
			int _alt;
			setState(1512);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,238,_ctx) ) {
			case 1:
				_localctx = new TableSourceBaseContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1495);
				tableSourceItem();
				setState(1499);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,236,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1496);
						joinPart();
						}
						} 
					}
					setState(1501);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,236,_ctx);
				}
				}
				break;
			case 2:
				_localctx = new TableSourceNestedContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1502);
				match(LR_BRACKET);
				setState(1503);
				tableSourceItem();
				setState(1507);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (((((_la - 31)) & ~0x3f) == 0 && ((1L << (_la - 31)) & ((1L << (CROSS - 31)) | (1L << (INNER - 31)) | (1L << (JOIN - 31)) | (1L << (LEFT - 31)))) != 0) || ((((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & ((1L << (NATURAL - 101)) | (1L << (RIGHT - 101)) | (1L << (STRAIGHT_JOIN - 101)))) != 0)) {
					{
					{
					setState(1504);
					joinPart();
					}
					}
					setState(1509);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1510);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSourceItemContext extends ParserRuleContext {
		public TableSourceItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSourceItem; }
	 
		public TableSourceItemContext() { }
		public void copyFrom(TableSourceItemContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SubqueryTableItemContext extends TableSourceItemContext {
		public SelectStatementContext parenthesisSubquery;
		public UidContext alias;
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SubqueryTableItemContext(TableSourceItemContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubqueryTableItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubqueryTableItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSubqueryTableItem(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AtomTableItemContext extends TableSourceItemContext {
		public UidContext alias;
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<IndexHintContext> indexHint() {
			return getRuleContexts(IndexHintContext.class);
		}
		public IndexHintContext indexHint(int i) {
			return getRuleContext(IndexHintContext.class,i);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AtomTableItemContext(TableSourceItemContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAtomTableItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAtomTableItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAtomTableItem(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableSourcesItemContext extends TableSourceItemContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TableSourcesItemContext(TableSourceItemContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableSourcesItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableSourcesItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableSourcesItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSourceItemContext tableSourceItem() throws RecognitionException {
		TableSourceItemContext _localctx = new TableSourceItemContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_tableSourceItem);
		int _la;
		try {
			int _alt;
			setState(1554);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,246,_ctx) ) {
			case 1:
				_localctx = new AtomTableItemContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1514);
				tableName();
				setState(1520);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1515);
					match(PARTITION);
					setState(1516);
					match(LR_BRACKET);
					setState(1517);
					uidList();
					setState(1518);
					match(RR_BRACKET);
					}
				}

				setState(1526);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,241,_ctx) ) {
				case 1:
					{
					setState(1523);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(1522);
						match(AS);
						}
					}

					setState(1525);
					((AtomTableItemContext)_localctx).alias = uid();
					}
					break;
				}
				setState(1536);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FORCE || _la==IGNORE || _la==USE) {
					{
					setState(1528);
					indexHint();
					setState(1533);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,242,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(1529);
							match(COMMA);
							setState(1530);
							indexHint();
							}
							} 
						}
						setState(1535);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,242,_ctx);
					}
					}
				}

				}
				break;
			case 2:
				_localctx = new SubqueryTableItemContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1543);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,244,_ctx) ) {
				case 1:
					{
					setState(1538);
					selectStatement();
					}
					break;
				case 2:
					{
					setState(1539);
					match(LR_BRACKET);
					setState(1540);
					((SubqueryTableItemContext)_localctx).parenthesisSubquery = selectStatement();
					setState(1541);
					match(RR_BRACKET);
					}
					break;
				}
				setState(1546);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(1545);
					match(AS);
					}
				}

				setState(1548);
				((SubqueryTableItemContext)_localctx).alias = uid();
				}
				break;
			case 3:
				_localctx = new TableSourcesItemContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1550);
				match(LR_BRACKET);
				setState(1551);
				tableSources();
				setState(1552);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexHintContext extends ParserRuleContext {
		public Token indexHintAction;
		public Token keyFormat;
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode USE() { return getToken(MySqlParser.USE, 0); }
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TerminalNode FORCE() { return getToken(MySqlParser.FORCE, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public IndexHintTypeContext indexHintType() {
			return getRuleContext(IndexHintTypeContext.class,0);
		}
		public IndexHintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexHint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexHint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndexHint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexHintContext indexHint() throws RecognitionException {
		IndexHintContext _localctx = new IndexHintContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_indexHint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1556);
			((IndexHintContext)_localctx).indexHintAction = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==FORCE || _la==IGNORE || _la==USE) ) {
				((IndexHintContext)_localctx).indexHintAction = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1557);
			((IndexHintContext)_localctx).keyFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==INDEX || _la==KEY) ) {
				((IndexHintContext)_localctx).keyFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1560);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(1558);
				match(FOR);
				setState(1559);
				indexHintType();
				}
			}

			setState(1562);
			match(LR_BRACKET);
			setState(1563);
			uidList();
			setState(1564);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexHintTypeContext extends ParserRuleContext {
		public TerminalNode JOIN() { return getToken(MySqlParser.JOIN, 0); }
		public TerminalNode ORDER() { return getToken(MySqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public IndexHintTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHintType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexHintType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexHintType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndexHintType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexHintTypeContext indexHintType() throws RecognitionException {
		IndexHintTypeContext _localctx = new IndexHintTypeContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_indexHintType);
		try {
			setState(1571);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JOIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(1566);
				match(JOIN);
				}
				break;
			case ORDER:
				enterOuterAlt(_localctx, 2);
				{
				setState(1567);
				match(ORDER);
				setState(1568);
				match(BY);
				}
				break;
			case GROUP:
				enterOuterAlt(_localctx, 3);
				{
				setState(1569);
				match(GROUP);
				setState(1570);
				match(BY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinPartContext extends ParserRuleContext {
		public JoinPartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinPart; }
	 
		public JoinPartContext() { }
		public void copyFrom(JoinPartContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class InnerJoinContext extends JoinPartContext {
		public TerminalNode JOIN() { return getToken(MySqlParser.JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode INNER() { return getToken(MySqlParser.INNER, 0); }
		public TerminalNode CROSS() { return getToken(MySqlParser.CROSS, 0); }
		public InnerJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterInnerJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitInnerJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitInnerJoin(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NaturalJoinContext extends JoinPartContext {
		public TerminalNode NATURAL() { return getToken(MySqlParser.NATURAL, 0); }
		public TerminalNode JOIN() { return getToken(MySqlParser.JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode LEFT() { return getToken(MySqlParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(MySqlParser.RIGHT, 0); }
		public TerminalNode OUTER() { return getToken(MySqlParser.OUTER, 0); }
		public NaturalJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNaturalJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNaturalJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNaturalJoin(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class OuterJoinContext extends JoinPartContext {
		public TerminalNode JOIN() { return getToken(MySqlParser.JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode LEFT() { return getToken(MySqlParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(MySqlParser.RIGHT, 0); }
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode OUTER() { return getToken(MySqlParser.OUTER, 0); }
		public OuterJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOuterJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOuterJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitOuterJoin(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StraightJoinContext extends JoinPartContext {
		public TerminalNode STRAIGHT_JOIN() { return getToken(MySqlParser.STRAIGHT_JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public StraightJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStraightJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStraightJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStraightJoin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinPartContext joinPart() throws RecognitionException {
		JoinPartContext _localctx = new JoinPartContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_joinPart);
		int _la;
		try {
			setState(1617);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CROSS:
			case INNER:
			case JOIN:
				_localctx = new InnerJoinContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1574);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CROSS || _la==INNER) {
					{
					setState(1573);
					_la = _input.LA(1);
					if ( !(_la==CROSS || _la==INNER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1576);
				match(JOIN);
				setState(1577);
				tableSourceItem();
				setState(1585);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,250,_ctx) ) {
				case 1:
					{
					setState(1578);
					match(ON);
					setState(1579);
					expression(0);
					}
					break;
				case 2:
					{
					setState(1580);
					match(USING);
					setState(1581);
					match(LR_BRACKET);
					setState(1582);
					uidList();
					setState(1583);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case STRAIGHT_JOIN:
				_localctx = new StraightJoinContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1587);
				match(STRAIGHT_JOIN);
				setState(1588);
				tableSourceItem();
				setState(1591);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,251,_ctx) ) {
				case 1:
					{
					setState(1589);
					match(ON);
					setState(1590);
					expression(0);
					}
					break;
				}
				}
				break;
			case LEFT:
			case RIGHT:
				_localctx = new OuterJoinContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1593);
				_la = _input.LA(1);
				if ( !(_la==LEFT || _la==RIGHT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1595);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(1594);
					match(OUTER);
					}
				}

				setState(1597);
				match(JOIN);
				setState(1598);
				tableSourceItem();
				setState(1606);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ON:
					{
					setState(1599);
					match(ON);
					setState(1600);
					expression(0);
					}
					break;
				case USING:
					{
					setState(1601);
					match(USING);
					setState(1602);
					match(LR_BRACKET);
					setState(1603);
					uidList();
					setState(1604);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NATURAL:
				_localctx = new NaturalJoinContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1608);
				match(NATURAL);
				setState(1613);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT || _la==RIGHT) {
					{
					setState(1609);
					_la = _input.LA(1);
					if ( !(_la==LEFT || _la==RIGHT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1611);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OUTER) {
						{
						setState(1610);
						match(OUTER);
						}
					}

					}
				}

				setState(1615);
				match(JOIN);
				setState(1616);
				tableSourceItem();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryExpressionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public QueryExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterQueryExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitQueryExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitQueryExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryExpressionContext queryExpression() throws RecognitionException {
		QueryExpressionContext _localctx = new QueryExpressionContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_queryExpression);
		try {
			setState(1627);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,257,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1619);
				match(LR_BRACKET);
				setState(1620);
				querySpecification();
				setState(1621);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1623);
				match(LR_BRACKET);
				setState(1624);
				queryExpression();
				setState(1625);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryExpressionNointoContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public QuerySpecificationNointoContext querySpecificationNointo() {
			return getRuleContext(QuerySpecificationNointoContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public QueryExpressionNointoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpressionNointo; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterQueryExpressionNointo(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitQueryExpressionNointo(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitQueryExpressionNointo(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryExpressionNointoContext queryExpressionNointo() throws RecognitionException {
		QueryExpressionNointoContext _localctx = new QueryExpressionNointoContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_queryExpressionNointo);
		try {
			setState(1637);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,258,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1629);
				match(LR_BRACKET);
				setState(1630);
				querySpecificationNointo();
				setState(1631);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1633);
				match(LR_BRACKET);
				setState(1634);
				queryExpressionNointo();
				setState(1635);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuerySpecificationContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(MySqlParser.SELECT, 0); }
		public SelectElementsContext selectElements() {
			return getRuleContext(SelectElementsContext.class,0);
		}
		public List<SelectSpecContext> selectSpec() {
			return getRuleContexts(SelectSpecContext.class);
		}
		public SelectSpecContext selectSpec(int i) {
			return getRuleContext(SelectSpecContext.class,i);
		}
		public SelectIntoExpressionContext selectIntoExpression() {
			return getRuleContext(SelectIntoExpressionContext.class,0);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public GroupByClauseContext groupByClause() {
			return getRuleContext(GroupByClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public QuerySpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_querySpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterQuerySpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitQuerySpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitQuerySpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QuerySpecificationContext querySpecification() throws RecognitionException {
		QuerySpecificationContext _localctx = new QuerySpecificationContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_querySpecification);
		int _la;
		try {
			int _alt;
			setState(1691);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,273,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1639);
				match(SELECT);
				setState(1643);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,259,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1640);
						selectSpec();
						}
						} 
					}
					setState(1645);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,259,_ctx);
				}
				setState(1646);
				selectElements();
				setState(1648);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTO) {
					{
					setState(1647);
					selectIntoExpression();
					}
				}

				setState(1651);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM) {
					{
					setState(1650);
					fromClause();
					}
				}

				setState(1654);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,262,_ctx) ) {
				case 1:
					{
					setState(1653);
					groupByClause();
					}
					break;
				}
				setState(1657);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==HAVING) {
					{
					setState(1656);
					havingClause();
					}
				}

				setState(1660);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,264,_ctx) ) {
				case 1:
					{
					setState(1659);
					orderByClause();
					}
					break;
				}
				setState(1663);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,265,_ctx) ) {
				case 1:
					{
					setState(1662);
					limitClause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1665);
				match(SELECT);
				setState(1669);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,266,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1666);
						selectSpec();
						}
						} 
					}
					setState(1671);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,266,_ctx);
				}
				setState(1672);
				selectElements();
				setState(1674);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM) {
					{
					setState(1673);
					fromClause();
					}
				}

				setState(1677);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,268,_ctx) ) {
				case 1:
					{
					setState(1676);
					groupByClause();
					}
					break;
				}
				setState(1680);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==HAVING) {
					{
					setState(1679);
					havingClause();
					}
				}

				setState(1683);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,270,_ctx) ) {
				case 1:
					{
					setState(1682);
					orderByClause();
					}
					break;
				}
				setState(1686);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,271,_ctx) ) {
				case 1:
					{
					setState(1685);
					limitClause();
					}
					break;
				}
				setState(1689);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTO) {
					{
					setState(1688);
					selectIntoExpression();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuerySpecificationNointoContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(MySqlParser.SELECT, 0); }
		public SelectElementsContext selectElements() {
			return getRuleContext(SelectElementsContext.class,0);
		}
		public List<SelectSpecContext> selectSpec() {
			return getRuleContexts(SelectSpecContext.class);
		}
		public SelectSpecContext selectSpec(int i) {
			return getRuleContext(SelectSpecContext.class,i);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public GroupByClauseContext groupByClause() {
			return getRuleContext(GroupByClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public QuerySpecificationNointoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_querySpecificationNointo; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterQuerySpecificationNointo(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitQuerySpecificationNointo(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitQuerySpecificationNointo(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QuerySpecificationNointoContext querySpecificationNointo() throws RecognitionException {
		QuerySpecificationNointoContext _localctx = new QuerySpecificationNointoContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_querySpecificationNointo);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1693);
			match(SELECT);
			setState(1697);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,274,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1694);
					selectSpec();
					}
					} 
				}
				setState(1699);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,274,_ctx);
			}
			setState(1700);
			selectElements();
			setState(1702);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(1701);
				fromClause();
				}
			}

			setState(1705);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,276,_ctx) ) {
			case 1:
				{
				setState(1704);
				groupByClause();
				}
				break;
			}
			setState(1708);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HAVING) {
				{
				setState(1707);
				havingClause();
				}
			}

			setState(1711);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,278,_ctx) ) {
			case 1:
				{
				setState(1710);
				orderByClause();
				}
				break;
			}
			setState(1714);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,279,_ctx) ) {
			case 1:
				{
				setState(1713);
				limitClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnionParenthesisContext extends ParserRuleContext {
		public Token unionType;
		public TerminalNode UNION() { return getToken(MySqlParser.UNION, 0); }
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public UnionParenthesisContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unionParenthesis; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnionParenthesis(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnionParenthesis(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUnionParenthesis(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnionParenthesisContext unionParenthesis() throws RecognitionException {
		UnionParenthesisContext _localctx = new UnionParenthesisContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_unionParenthesis);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1716);
			match(UNION);
			setState(1718);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(1717);
				((UnionParenthesisContext)_localctx).unionType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
					((UnionParenthesisContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1720);
			queryExpressionNointo();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnionStatementContext extends ParserRuleContext {
		public Token unionType;
		public TerminalNode UNION() { return getToken(MySqlParser.UNION, 0); }
		public QuerySpecificationNointoContext querySpecificationNointo() {
			return getRuleContext(QuerySpecificationNointoContext.class,0);
		}
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public UnionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUnionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnionStatementContext unionStatement() throws RecognitionException {
		UnionStatementContext _localctx = new UnionStatementContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_unionStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1722);
			match(UNION);
			setState(1724);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(1723);
				((UnionStatementContext)_localctx).unionType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
					((UnionStatementContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1728);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				{
				setState(1726);
				querySpecificationNointo();
				}
				break;
			case LR_BRACKET:
				{
				setState(1727);
				queryExpressionNointo();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectSpecContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public TerminalNode DISTINCTROW() { return getToken(MySqlParser.DISTINCTROW, 0); }
		public TerminalNode HIGH_PRIORITY() { return getToken(MySqlParser.HIGH_PRIORITY, 0); }
		public TerminalNode STRAIGHT_JOIN() { return getToken(MySqlParser.STRAIGHT_JOIN, 0); }
		public TerminalNode SQL_SMALL_RESULT() { return getToken(MySqlParser.SQL_SMALL_RESULT, 0); }
		public TerminalNode SQL_BIG_RESULT() { return getToken(MySqlParser.SQL_BIG_RESULT, 0); }
		public TerminalNode SQL_BUFFER_RESULT() { return getToken(MySqlParser.SQL_BUFFER_RESULT, 0); }
		public TerminalNode SQL_CACHE() { return getToken(MySqlParser.SQL_CACHE, 0); }
		public TerminalNode SQL_NO_CACHE() { return getToken(MySqlParser.SQL_NO_CACHE, 0); }
		public TerminalNode SQL_CALC_FOUND_ROWS() { return getToken(MySqlParser.SQL_CALC_FOUND_ROWS, 0); }
		public SelectSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectSpecContext selectSpec() throws RecognitionException {
		SelectSpecContext _localctx = new SelectSpecContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_selectSpec);
		int _la;
		try {
			setState(1738);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
			case DISTINCT:
			case DISTINCTROW:
				enterOuterAlt(_localctx, 1);
				{
				setState(1730);
				_la = _input.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALL) | (1L << DISTINCT) | (1L << DISTINCTROW))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case HIGH_PRIORITY:
				enterOuterAlt(_localctx, 2);
				{
				setState(1731);
				match(HIGH_PRIORITY);
				}
				break;
			case STRAIGHT_JOIN:
				enterOuterAlt(_localctx, 3);
				{
				setState(1732);
				match(STRAIGHT_JOIN);
				}
				break;
			case SQL_SMALL_RESULT:
				enterOuterAlt(_localctx, 4);
				{
				setState(1733);
				match(SQL_SMALL_RESULT);
				}
				break;
			case SQL_BIG_RESULT:
				enterOuterAlt(_localctx, 5);
				{
				setState(1734);
				match(SQL_BIG_RESULT);
				}
				break;
			case SQL_BUFFER_RESULT:
				enterOuterAlt(_localctx, 6);
				{
				setState(1735);
				match(SQL_BUFFER_RESULT);
				}
				break;
			case SQL_CACHE:
			case SQL_NO_CACHE:
				enterOuterAlt(_localctx, 7);
				{
				setState(1736);
				_la = _input.LA(1);
				if ( !(_la==SQL_CACHE || _la==SQL_NO_CACHE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SQL_CALC_FOUND_ROWS:
				enterOuterAlt(_localctx, 8);
				{
				setState(1737);
				match(SQL_CALC_FOUND_ROWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectElementsContext extends ParserRuleContext {
		public Token star;
		public List<SelectElementContext> selectElement() {
			return getRuleContexts(SelectElementContext.class);
		}
		public SelectElementContext selectElement(int i) {
			return getRuleContext(SelectElementContext.class,i);
		}
		public TerminalNode STAR() { return getToken(MySqlParser.STAR, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public SelectElementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectElements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectElements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectElements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectElements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectElementsContext selectElements() throws RecognitionException {
		SelectElementsContext _localctx = new SelectElementsContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_selectElements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1742);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,284,_ctx) ) {
			case 1:
				{
				setState(1740);
				((SelectElementsContext)_localctx).star = match(STAR);
				}
				break;
			case 2:
				{
				setState(1741);
				selectElement();
				}
				break;
			}
			setState(1748);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1744);
				match(COMMA);
				setState(1745);
				selectElement();
				}
				}
				setState(1750);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectElementContext extends ParserRuleContext {
		public SelectElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectElement; }
	 
		public SelectElementContext() { }
		public void copyFrom(SelectElementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SelectExpressionElementContext extends SelectElementContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public TerminalNode VAR_ASSIGN() { return getToken(MySqlParser.VAR_ASSIGN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SelectExpressionElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectExpressionElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectExpressionElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectExpressionElement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectFunctionElementContext extends SelectElementContext {
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SelectFunctionElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectFunctionElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectFunctionElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectFunctionElement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectStarElementContext extends SelectElementContext {
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode DOT() { return getToken(MySqlParser.DOT, 0); }
		public TerminalNode STAR() { return getToken(MySqlParser.STAR, 0); }
		public SelectStarElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectStarElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectStarElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectStarElement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectColumnElementContext extends SelectElementContext {
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SelectColumnElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectColumnElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectColumnElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectColumnElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectElementContext selectElement() throws RecognitionException {
		SelectElementContext _localctx = new SelectElementContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_selectElement);
		int _la;
		try {
			setState(1780);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,293,_ctx) ) {
			case 1:
				_localctx = new SelectStarElementContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1751);
				fullId();
				setState(1752);
				match(DOT);
				setState(1753);
				match(STAR);
				}
				break;
			case 2:
				_localctx = new SelectColumnElementContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1755);
				fullColumnName();
				setState(1760);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,287,_ctx) ) {
				case 1:
					{
					setState(1757);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(1756);
						match(AS);
						}
					}

					setState(1759);
					uid();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new SelectFunctionElementContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1762);
				functionCall();
				setState(1767);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,289,_ctx) ) {
				case 1:
					{
					setState(1764);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(1763);
						match(AS);
						}
					}

					setState(1766);
					uid();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new SelectExpressionElementContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1771);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,290,_ctx) ) {
				case 1:
					{
					setState(1769);
					match(LOCAL_ID);
					setState(1770);
					match(VAR_ASSIGN);
					}
					break;
				}
				setState(1773);
				expression(0);
				setState(1778);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,292,_ctx) ) {
				case 1:
					{
					setState(1775);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(1774);
						match(AS);
						}
					}

					setState(1777);
					uid();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectIntoExpressionContext extends ParserRuleContext {
		public SelectIntoExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectIntoExpression; }
	 
		public SelectIntoExpressionContext() { }
		public void copyFrom(SelectIntoExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SelectIntoVariablesContext extends SelectIntoExpressionContext {
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public List<AssignmentFieldContext> assignmentField() {
			return getRuleContexts(AssignmentFieldContext.class);
		}
		public AssignmentFieldContext assignmentField(int i) {
			return getRuleContext(AssignmentFieldContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public SelectIntoVariablesContext(SelectIntoExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectIntoVariables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectIntoVariables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectIntoVariables(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectIntoTextFileContext extends SelectIntoExpressionContext {
		public Token filename;
		public CharsetNameContext charset;
		public Token fieldsFormat;
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode OUTFILE() { return getToken(MySqlParser.OUTFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode LINES() { return getToken(MySqlParser.LINES, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode FIELDS() { return getToken(MySqlParser.FIELDS, 0); }
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public List<SelectFieldsIntoContext> selectFieldsInto() {
			return getRuleContexts(SelectFieldsIntoContext.class);
		}
		public SelectFieldsIntoContext selectFieldsInto(int i) {
			return getRuleContext(SelectFieldsIntoContext.class,i);
		}
		public List<SelectLinesIntoContext> selectLinesInto() {
			return getRuleContexts(SelectLinesIntoContext.class);
		}
		public SelectLinesIntoContext selectLinesInto(int i) {
			return getRuleContext(SelectLinesIntoContext.class,i);
		}
		public SelectIntoTextFileContext(SelectIntoExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectIntoTextFile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectIntoTextFile(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectIntoTextFile(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectIntoDumpFileContext extends SelectIntoExpressionContext {
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode DUMPFILE() { return getToken(MySqlParser.DUMPFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public SelectIntoDumpFileContext(SelectIntoExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectIntoDumpFile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectIntoDumpFile(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectIntoDumpFile(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectIntoExpressionContext selectIntoExpression() throws RecognitionException {
		SelectIntoExpressionContext _localctx = new SelectIntoExpressionContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_selectIntoExpression);
		int _la;
		try {
			setState(1818);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,300,_ctx) ) {
			case 1:
				_localctx = new SelectIntoVariablesContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1782);
				match(INTO);
				setState(1783);
				assignmentField();
				setState(1788);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1784);
					match(COMMA);
					setState(1785);
					assignmentField();
					}
					}
					setState(1790);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new SelectIntoDumpFileContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1791);
				match(INTO);
				setState(1792);
				match(DUMPFILE);
				setState(1793);
				match(STRING_LITERAL);
				}
				break;
			case 3:
				_localctx = new SelectIntoTextFileContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(1794);
				match(INTO);
				setState(1795);
				match(OUTFILE);
				setState(1796);
				((SelectIntoTextFileContext)_localctx).filename = match(STRING_LITERAL);
				setState(1800);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHARACTER) {
					{
					setState(1797);
					match(CHARACTER);
					setState(1798);
					match(SET);
					setState(1799);
					((SelectIntoTextFileContext)_localctx).charset = charsetName();
					}
				}

				setState(1808);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,297,_ctx) ) {
				case 1:
					{
					setState(1802);
					((SelectIntoTextFileContext)_localctx).fieldsFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==COLUMNS || _la==FIELDS) ) {
						((SelectIntoTextFileContext)_localctx).fieldsFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1804); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(1803);
						selectFieldsInto();
						}
						}
						setState(1806); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==ENCLOSED || _la==ESCAPED || _la==OPTIONALLY || _la==TERMINATED );
					}
					break;
				}
				setState(1816);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINES) {
					{
					setState(1810);
					match(LINES);
					setState(1812); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(1811);
						selectLinesInto();
						}
						}
						setState(1814); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==STARTING || _la==TERMINATED );
					}
				}

				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectFieldsIntoContext extends ParserRuleContext {
		public Token terminationField;
		public Token enclosion;
		public Token escaping;
		public TerminalNode TERMINATED() { return getToken(MySqlParser.TERMINATED, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode ENCLOSED() { return getToken(MySqlParser.ENCLOSED, 0); }
		public TerminalNode OPTIONALLY() { return getToken(MySqlParser.OPTIONALLY, 0); }
		public TerminalNode ESCAPED() { return getToken(MySqlParser.ESCAPED, 0); }
		public SelectFieldsIntoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectFieldsInto; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectFieldsInto(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectFieldsInto(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectFieldsInto(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectFieldsIntoContext selectFieldsInto() throws RecognitionException {
		SelectFieldsIntoContext _localctx = new SelectFieldsIntoContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_selectFieldsInto);
		int _la;
		try {
			setState(1832);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TERMINATED:
				enterOuterAlt(_localctx, 1);
				{
				setState(1820);
				match(TERMINATED);
				setState(1821);
				match(BY);
				setState(1822);
				((SelectFieldsIntoContext)_localctx).terminationField = match(STRING_LITERAL);
				}
				break;
			case ENCLOSED:
			case OPTIONALLY:
				enterOuterAlt(_localctx, 2);
				{
				setState(1824);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONALLY) {
					{
					setState(1823);
					match(OPTIONALLY);
					}
				}

				setState(1826);
				match(ENCLOSED);
				setState(1827);
				match(BY);
				setState(1828);
				((SelectFieldsIntoContext)_localctx).enclosion = match(STRING_LITERAL);
				}
				break;
			case ESCAPED:
				enterOuterAlt(_localctx, 3);
				{
				setState(1829);
				match(ESCAPED);
				setState(1830);
				match(BY);
				setState(1831);
				((SelectFieldsIntoContext)_localctx).escaping = match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectLinesIntoContext extends ParserRuleContext {
		public Token starting;
		public Token terminationLine;
		public TerminalNode STARTING() { return getToken(MySqlParser.STARTING, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode TERMINATED() { return getToken(MySqlParser.TERMINATED, 0); }
		public SelectLinesIntoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectLinesInto; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectLinesInto(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectLinesInto(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectLinesInto(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectLinesIntoContext selectLinesInto() throws RecognitionException {
		SelectLinesIntoContext _localctx = new SelectLinesIntoContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_selectLinesInto);
		try {
			setState(1840);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STARTING:
				enterOuterAlt(_localctx, 1);
				{
				setState(1834);
				match(STARTING);
				setState(1835);
				match(BY);
				setState(1836);
				((SelectLinesIntoContext)_localctx).starting = match(STRING_LITERAL);
				}
				break;
			case TERMINATED:
				enterOuterAlt(_localctx, 2);
				{
				setState(1837);
				match(TERMINATED);
				setState(1838);
				match(BY);
				setState(1839);
				((SelectLinesIntoContext)_localctx).terminationLine = match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromClauseContext extends ParserRuleContext {
		public ExpressionContext whereExpr;
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFromClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFromClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFromClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromClauseContext fromClause() throws RecognitionException {
		FromClauseContext _localctx = new FromClauseContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_fromClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1842);
			match(FROM);
			setState(1843);
			tableSources();
			setState(1846);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(1844);
				match(WHERE);
				setState(1845);
				((FromClauseContext)_localctx).whereExpr = expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByClauseContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public List<GroupByItemContext> groupByItem() {
			return getRuleContexts(GroupByItemContext.class);
		}
		public GroupByItemContext groupByItem(int i) {
			return getRuleContext(GroupByItemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode ROLLUP() { return getToken(MySqlParser.ROLLUP, 0); }
		public GroupByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGroupByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGroupByClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitGroupByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByClauseContext groupByClause() throws RecognitionException {
		GroupByClauseContext _localctx = new GroupByClauseContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_groupByClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1848);
			match(GROUP);
			setState(1849);
			match(BY);
			setState(1850);
			groupByItem();
			setState(1855);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1851);
				match(COMMA);
				setState(1852);
				groupByItem();
				}
				}
				setState(1857);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1860);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1858);
				match(WITH);
				setState(1859);
				match(ROLLUP);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HavingClauseContext extends ParserRuleContext {
		public ExpressionContext havingExpr;
		public TerminalNode HAVING() { return getToken(MySqlParser.HAVING, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_havingClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHavingClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHavingClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHavingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HavingClauseContext havingClause() throws RecognitionException {
		HavingClauseContext _localctx = new HavingClauseContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_havingClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1862);
			match(HAVING);
			setState(1863);
			((HavingClauseContext)_localctx).havingExpr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByItemContext extends ParserRuleContext {
		public Token order;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASC() { return getToken(MySqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public GroupByItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGroupByItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGroupByItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitGroupByItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByItemContext groupByItem() throws RecognitionException {
		GroupByItemContext _localctx = new GroupByItemContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_groupByItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1865);
			expression(0);
			setState(1867);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(1866);
				((GroupByItemContext)_localctx).order = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((GroupByItemContext)_localctx).order = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LimitClauseContext extends ParserRuleContext {
		public LimitClauseAtomContext offset;
		public LimitClauseAtomContext limit;
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public TerminalNode OFFSET() { return getToken(MySqlParser.OFFSET, 0); }
		public List<LimitClauseAtomContext> limitClauseAtom() {
			return getRuleContexts(LimitClauseAtomContext.class);
		}
		public LimitClauseAtomContext limitClauseAtom(int i) {
			return getRuleContext(LimitClauseAtomContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public LimitClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLimitClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLimitClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLimitClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LimitClauseContext limitClause() throws RecognitionException {
		LimitClauseContext _localctx = new LimitClauseContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_limitClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1869);
			match(LIMIT);
			setState(1880);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,309,_ctx) ) {
			case 1:
				{
				setState(1873);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,308,_ctx) ) {
				case 1:
					{
					setState(1870);
					((LimitClauseContext)_localctx).offset = limitClauseAtom();
					setState(1871);
					match(COMMA);
					}
					break;
				}
				setState(1875);
				((LimitClauseContext)_localctx).limit = limitClauseAtom();
				}
				break;
			case 2:
				{
				setState(1876);
				((LimitClauseContext)_localctx).limit = limitClauseAtom();
				setState(1877);
				match(OFFSET);
				setState(1878);
				((LimitClauseContext)_localctx).offset = limitClauseAtom();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LimitClauseAtomContext extends ParserRuleContext {
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public MysqlVariableContext mysqlVariable() {
			return getRuleContext(MysqlVariableContext.class,0);
		}
		public SimpleIdContext simpleId() {
			return getRuleContext(SimpleIdContext.class,0);
		}
		public LimitClauseAtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitClauseAtom; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLimitClauseAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLimitClauseAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLimitClauseAtom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LimitClauseAtomContext limitClauseAtom() throws RecognitionException {
		LimitClauseAtomContext _localctx = new LimitClauseAtomContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_limitClauseAtom);
		try {
			setState(1885);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1882);
				decimalLiteral();
				}
				break;
			case LOCAL_ID:
			case GLOBAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(1883);
				mysqlVariable();
				}
				break;
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case GROUP:
			case LEFT:
			case NUMBER:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_VALID:
			case JSON_SCHEMA_VALID:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(1884);
				simpleId();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DescribeObjectClauseContext extends ParserRuleContext {
		public DescribeObjectClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describeObjectClause; }
	 
		public DescribeObjectClauseContext() { }
		public void copyFrom(DescribeObjectClauseContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class DescribeStatementsContext extends DescribeObjectClauseContext {
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public DeleteStatementContext deleteStatement() {
			return getRuleContext(DeleteStatementContext.class,0);
		}
		public InsertStatementContext insertStatement() {
			return getRuleContext(InsertStatementContext.class,0);
		}
		public UpdateStatementContext updateStatement() {
			return getRuleContext(UpdateStatementContext.class,0);
		}
		public DescribeStatementsContext(DescribeObjectClauseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDescribeStatements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDescribeStatements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDescribeStatements(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DescribeConnectionContext extends DescribeObjectClauseContext {
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode CONNECTION() { return getToken(MySqlParser.CONNECTION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DescribeConnectionContext(DescribeObjectClauseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDescribeConnection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDescribeConnection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDescribeConnection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DescribeObjectClauseContext describeObjectClause() throws RecognitionException {
		DescribeObjectClauseContext _localctx = new DescribeObjectClauseContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_describeObjectClause);
		try {
			setState(1896);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DELETE:
			case INSERT:
			case SELECT:
			case UPDATE:
			case LR_BRACKET:
				_localctx = new DescribeStatementsContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1891);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SELECT:
				case LR_BRACKET:
					{
					setState(1887);
					selectStatement();
					}
					break;
				case DELETE:
					{
					setState(1888);
					deleteStatement();
					}
					break;
				case INSERT:
					{
					setState(1889);
					insertStatement();
					}
					break;
				case UPDATE:
					{
					setState(1890);
					updateStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case FOR:
				_localctx = new DescribeConnectionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1893);
				match(FOR);
				setState(1894);
				match(CONNECTION);
				setState(1895);
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullIdContext extends ParserRuleContext {
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode DOT_ID() { return getToken(MySqlParser.DOT_ID, 0); }
		public TerminalNode DOT() { return getToken(MySqlParser.DOT, 0); }
		public FullIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFullId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFullId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFullId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FullIdContext fullId() throws RecognitionException {
		FullIdContext _localctx = new FullIdContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_fullId);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1898);
			uid();
			setState(1902);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,313,_ctx) ) {
			case 1:
				{
				setState(1899);
				match(DOT_ID);
				}
				break;
			case 2:
				{
				setState(1900);
				match(DOT);
				setState(1901);
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableNameContext extends ParserRuleContext {
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableNameContext tableName() throws RecognitionException {
		TableNameContext _localctx = new TableNameContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_tableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1904);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullColumnNameContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<DottedIdContext> dottedId() {
			return getRuleContexts(DottedIdContext.class);
		}
		public DottedIdContext dottedId(int i) {
			return getRuleContext(DottedIdContext.class,i);
		}
		public FullColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFullColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFullColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFullColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FullColumnNameContext fullColumnName() throws RecognitionException {
		FullColumnNameContext _localctx = new FullColumnNameContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_fullColumnName);
		try {
			setState(1918);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,317,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1906);
				uid();
				setState(1911);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,315,_ctx) ) {
				case 1:
					{
					setState(1907);
					dottedId();
					setState(1909);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,314,_ctx) ) {
					case 1:
						{
						setState(1908);
						dottedId();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1913);
				matchWildcard();
				setState(1914);
				dottedId();
				setState(1916);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,316,_ctx) ) {
				case 1:
					{
					setState(1915);
					dottedId();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexColumnNameContext extends ParserRuleContext {
		public Token sortType;
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode ASC() { return getToken(MySqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public IndexColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndexColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexColumnNameContext indexColumnName() throws RecognitionException {
		IndexColumnNameContext _localctx = new IndexColumnNameContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_indexColumnName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1922);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,318,_ctx) ) {
			case 1:
				{
				setState(1920);
				uid();
				}
				break;
			case 2:
				{
				setState(1921);
				match(STRING_LITERAL);
				}
				break;
			}
			setState(1928);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(1924);
				match(LR_BRACKET);
				setState(1925);
				decimalLiteral();
				setState(1926);
				match(RR_BRACKET);
				}
			}

			setState(1931);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(1930);
				((IndexColumnNameContext)_localctx).sortType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((IndexColumnNameContext)_localctx).sortType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MysqlVariableContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public TerminalNode GLOBAL_ID() { return getToken(MySqlParser.GLOBAL_ID, 0); }
		public MysqlVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mysqlVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMysqlVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMysqlVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMysqlVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MysqlVariableContext mysqlVariable() throws RecognitionException {
		MysqlVariableContext _localctx = new MysqlVariableContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_mysqlVariable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1933);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==GLOBAL_ID) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharsetNameContext extends ParserRuleContext {
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public CharsetNameBaseContext charsetNameBase() {
			return getRuleContext(CharsetNameBaseContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode CHARSET_REVERSE_QOUTE_STRING() { return getToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
		public CharsetNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charsetName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCharsetName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCharsetName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCharsetName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharsetNameContext charsetName() throws RecognitionException {
		CharsetNameContext _localctx = new CharsetNameContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_charsetName);
		try {
			setState(1939);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINARY:
				enterOuterAlt(_localctx, 1);
				{
				setState(1935);
				match(BINARY);
				}
				break;
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
				enterOuterAlt(_localctx, 2);
				{
				setState(1936);
				charsetNameBase();
				}
				break;
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(1937);
				match(STRING_LITERAL);
				}
				break;
			case CHARSET_REVERSE_QOUTE_STRING:
				enterOuterAlt(_localctx, 4);
				{
				setState(1938);
				match(CHARSET_REVERSE_QOUTE_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollationNameContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public CollationNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collationName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCollationName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCollationName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCollationName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollationNameContext collationName() throws RecognitionException {
		CollationNameContext _localctx = new CollationNameContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_collationName);
		try {
			setState(1943);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,322,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1941);
				uid();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1942);
				match(STRING_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EngineNameContext extends ParserRuleContext {
		public TerminalNode ARCHIVE() { return getToken(MySqlParser.ARCHIVE, 0); }
		public TerminalNode BLACKHOLE() { return getToken(MySqlParser.BLACKHOLE, 0); }
		public TerminalNode CSV() { return getToken(MySqlParser.CSV, 0); }
		public TerminalNode FEDERATED() { return getToken(MySqlParser.FEDERATED, 0); }
		public TerminalNode INNODB() { return getToken(MySqlParser.INNODB, 0); }
		public TerminalNode MEMORY() { return getToken(MySqlParser.MEMORY, 0); }
		public TerminalNode MRG_MYISAM() { return getToken(MySqlParser.MRG_MYISAM, 0); }
		public TerminalNode MYISAM() { return getToken(MySqlParser.MYISAM, 0); }
		public TerminalNode NDB() { return getToken(MySqlParser.NDB, 0); }
		public TerminalNode NDBCLUSTER() { return getToken(MySqlParser.NDBCLUSTER, 0); }
		public TerminalNode PERFORMANCE_SCHEMA() { return getToken(MySqlParser.PERFORMANCE_SCHEMA, 0); }
		public TerminalNode TOKUDB() { return getToken(MySqlParser.TOKUDB, 0); }
		public TerminalNode ID() { return getToken(MySqlParser.ID, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode REVERSE_QUOTE_ID() { return getToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
		public EngineNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_engineName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterEngineName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitEngineName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitEngineName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EngineNameContext engineName() throws RecognitionException {
		EngineNameContext _localctx = new EngineNameContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_engineName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1945);
			_la = _input.LA(1);
			if ( !(((((_la - 685)) & ~0x3f) == 0 && ((1L << (_la - 685)) & ((1L << (ARCHIVE - 685)) | (1L << (BLACKHOLE - 685)) | (1L << (CSV - 685)) | (1L << (FEDERATED - 685)) | (1L << (INNODB - 685)) | (1L << (MEMORY - 685)) | (1L << (MRG_MYISAM - 685)) | (1L << (MYISAM - 685)) | (1L << (NDB - 685)) | (1L << (NDBCLUSTER - 685)) | (1L << (PERFORMANCE_SCHEMA - 685)) | (1L << (TOKUDB - 685)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (STRING_LITERAL - 1043)) | (1L << (ID - 1043)) | (1L << (REVERSE_QUOTE_ID - 1043)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UuidSetContext extends ParserRuleContext {
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public List<TerminalNode> MINUS() { return getTokens(MySqlParser.MINUS); }
		public TerminalNode MINUS(int i) {
			return getToken(MySqlParser.MINUS, i);
		}
		public List<TerminalNode> COLON_SYMB() { return getTokens(MySqlParser.COLON_SYMB); }
		public TerminalNode COLON_SYMB(int i) {
			return getToken(MySqlParser.COLON_SYMB, i);
		}
		public UuidSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uuidSet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUuidSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUuidSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUuidSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UuidSetContext uuidSet() throws RecognitionException {
		UuidSetContext _localctx = new UuidSetContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_uuidSet);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1947);
			decimalLiteral();
			setState(1948);
			match(MINUS);
			setState(1949);
			decimalLiteral();
			setState(1950);
			match(MINUS);
			setState(1951);
			decimalLiteral();
			setState(1952);
			match(MINUS);
			setState(1953);
			decimalLiteral();
			setState(1954);
			match(MINUS);
			setState(1955);
			decimalLiteral();
			setState(1961); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1956);
				match(COLON_SYMB);
				setState(1957);
				decimalLiteral();
				setState(1958);
				match(MINUS);
				setState(1959);
				decimalLiteral();
				}
				}
				setState(1963); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==COLON_SYMB );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XidContext extends ParserRuleContext {
		public XuidStringIdContext globalTableUid;
		public XuidStringIdContext qualifier;
		public DecimalLiteralContext idFormat;
		public List<XuidStringIdContext> xuidStringId() {
			return getRuleContexts(XuidStringIdContext.class);
		}
		public XuidStringIdContext xuidStringId(int i) {
			return getRuleContext(XuidStringIdContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public XidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xid; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterXid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitXid(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitXid(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XidContext xid() throws RecognitionException {
		XidContext _localctx = new XidContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_xid);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1965);
			((XidContext)_localctx).globalTableUid = xuidStringId();
			setState(1972);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(1966);
				match(COMMA);
				setState(1967);
				((XidContext)_localctx).qualifier = xuidStringId();
				setState(1970);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1968);
					match(COMMA);
					setState(1969);
					((XidContext)_localctx).idFormat = decimalLiteral();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XuidStringIdContext extends ParserRuleContext {
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode BIT_STRING() { return getToken(MySqlParser.BIT_STRING, 0); }
		public List<TerminalNode> HEXADECIMAL_LITERAL() { return getTokens(MySqlParser.HEXADECIMAL_LITERAL); }
		public TerminalNode HEXADECIMAL_LITERAL(int i) {
			return getToken(MySqlParser.HEXADECIMAL_LITERAL, i);
		}
		public XuidStringIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xuidStringId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterXuidStringId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitXuidStringId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitXuidStringId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XuidStringIdContext xuidStringId() throws RecognitionException {
		XuidStringIdContext _localctx = new XuidStringIdContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_xuidStringId);
		int _la;
		try {
			setState(1981);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1974);
				match(STRING_LITERAL);
				}
				break;
			case BIT_STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(1975);
				match(BIT_STRING);
				}
				break;
			case HEXADECIMAL_LITERAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(1977); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1976);
					match(HEXADECIMAL_LITERAL);
					}
					}
					setState(1979); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==HEXADECIMAL_LITERAL );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AuthPluginContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public AuthPluginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_authPlugin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAuthPlugin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAuthPlugin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAuthPlugin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AuthPluginContext authPlugin() throws RecognitionException {
		AuthPluginContext _localctx = new AuthPluginContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_authPlugin);
		try {
			setState(1985);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,328,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1983);
				uid();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1984);
				match(STRING_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UidContext extends ParserRuleContext {
		public SimpleIdContext simpleId() {
			return getRuleContext(SimpleIdContext.class,0);
		}
		public TerminalNode REVERSE_QUOTE_ID() { return getToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
		public TerminalNode CHARSET_REVERSE_QOUTE_STRING() { return getToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
		public UidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uid; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUid(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUid(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UidContext uid() throws RecognitionException {
		UidContext _localctx = new UidContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_uid);
		try {
			setState(1990);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,329,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1987);
				simpleId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1988);
				match(REVERSE_QUOTE_ID);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1989);
				match(CHARSET_REVERSE_QOUTE_STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleIdContext extends ParserRuleContext {
		public TerminalNode ID() { return getToken(MySqlParser.ID, 0); }
		public CharsetNameBaseContext charsetNameBase() {
			return getRuleContext(CharsetNameBaseContext.class,0);
		}
		public TransactionLevelBaseContext transactionLevelBase() {
			return getRuleContext(TransactionLevelBaseContext.class,0);
		}
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public PrivilegesBaseContext privilegesBase() {
			return getRuleContext(PrivilegesBaseContext.class,0);
		}
		public IntervalTypeBaseContext intervalTypeBase() {
			return getRuleContext(IntervalTypeBaseContext.class,0);
		}
		public DataTypeBaseContext dataTypeBase() {
			return getRuleContext(DataTypeBaseContext.class,0);
		}
		public KeywordsCanBeIdContext keywordsCanBeId() {
			return getRuleContext(KeywordsCanBeIdContext.class,0);
		}
		public FunctionNameBaseContext functionNameBase() {
			return getRuleContext(FunctionNameBaseContext.class,0);
		}
		public SimpleIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimpleId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleIdContext simpleId() throws RecognitionException {
		SimpleIdContext _localctx = new SimpleIdContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_simpleId);
		try {
			setState(2001);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,330,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1992);
				match(ID);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1993);
				charsetNameBase();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1994);
				transactionLevelBase();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1995);
				engineName();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1996);
				privilegesBase();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1997);
				intervalTypeBase();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1998);
				dataTypeBase();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1999);
				keywordsCanBeId();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2000);
				functionNameBase();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DottedIdContext extends ParserRuleContext {
		public TerminalNode DOT_ID() { return getToken(MySqlParser.DOT_ID, 0); }
		public TerminalNode DOT() { return getToken(MySqlParser.DOT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DottedIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dottedId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDottedId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDottedId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDottedId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DottedIdContext dottedId() throws RecognitionException {
		DottedIdContext _localctx = new DottedIdContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_dottedId);
		try {
			setState(2006);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOT_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(2003);
				match(DOT_ID);
				}
				break;
			case DOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(2004);
				match(DOT);
				setState(2005);
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DecimalLiteralContext extends ParserRuleContext {
		public TerminalNode DECIMAL_LITERAL() { return getToken(MySqlParser.DECIMAL_LITERAL, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode TWO_DECIMAL() { return getToken(MySqlParser.TWO_DECIMAL, 0); }
		public DecimalLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decimalLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDecimalLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDecimalLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDecimalLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DecimalLiteralContext decimalLiteral() throws RecognitionException {
		DecimalLiteralContext _localctx = new DecimalLiteralContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_decimalLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2008);
			_la = _input.LA(1);
			if ( !(((((_la - 1033)) & ~0x3f) == 0 && ((1L << (_la - 1033)) & ((1L << (ZERO_DECIMAL - 1033)) | (1L << (ONE_DECIMAL - 1033)) | (1L << (TWO_DECIMAL - 1033)) | (1L << (DECIMAL_LITERAL - 1033)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FileSizeLiteralContext extends ParserRuleContext {
		public TerminalNode FILESIZE_LITERAL() { return getToken(MySqlParser.FILESIZE_LITERAL, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public FileSizeLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fileSizeLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFileSizeLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFileSizeLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFileSizeLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FileSizeLiteralContext fileSizeLiteral() throws RecognitionException {
		FileSizeLiteralContext _localctx = new FileSizeLiteralContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_fileSizeLiteral);
		try {
			setState(2012);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILESIZE_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2010);
				match(FILESIZE_LITERAL);
				}
				break;
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2011);
				decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StringLiteralContext extends ParserRuleContext {
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public TerminalNode START_NATIONAL_STRING_LITERAL() { return getToken(MySqlParser.START_NATIONAL_STRING_LITERAL, 0); }
		public TerminalNode STRING_CHARSET_NAME() { return getToken(MySqlParser.STRING_CHARSET_NAME, 0); }
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public StringLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStringLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStringLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStringLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StringLiteralContext stringLiteral() throws RecognitionException {
		StringLiteralContext _localctx = new StringLiteralContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_stringLiteral);
		int _la;
		try {
			int _alt;
			setState(2037);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,339,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2019);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING_LITERAL:
				case STRING_CHARSET_NAME:
					{
					setState(2015);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==STRING_CHARSET_NAME) {
						{
						setState(2014);
						match(STRING_CHARSET_NAME);
						}
					}

					setState(2017);
					match(STRING_LITERAL);
					}
					break;
				case START_NATIONAL_STRING_LITERAL:
					{
					setState(2018);
					match(START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2022); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2021);
						match(STRING_LITERAL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2024); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,335,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2031);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING_LITERAL:
				case STRING_CHARSET_NAME:
					{
					setState(2027);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==STRING_CHARSET_NAME) {
						{
						setState(2026);
						match(STRING_CHARSET_NAME);
						}
					}

					setState(2029);
					match(STRING_LITERAL);
					}
					break;
				case START_NATIONAL_STRING_LITERAL:
					{
					setState(2030);
					match(START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2035);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,338,_ctx) ) {
				case 1:
					{
					setState(2033);
					match(COLLATE);
					setState(2034);
					collationName();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BooleanLiteralContext extends ParserRuleContext {
		public TerminalNode TRUE() { return getToken(MySqlParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(MySqlParser.FALSE, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBooleanLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBooleanLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBooleanLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BooleanLiteralContext booleanLiteral() throws RecognitionException {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_booleanLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2039);
			_la = _input.LA(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HexadecimalLiteralContext extends ParserRuleContext {
		public TerminalNode HEXADECIMAL_LITERAL() { return getToken(MySqlParser.HEXADECIMAL_LITERAL, 0); }
		public TerminalNode STRING_CHARSET_NAME() { return getToken(MySqlParser.STRING_CHARSET_NAME, 0); }
		public HexadecimalLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hexadecimalLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHexadecimalLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHexadecimalLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHexadecimalLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HexadecimalLiteralContext hexadecimalLiteral() throws RecognitionException {
		HexadecimalLiteralContext _localctx = new HexadecimalLiteralContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_hexadecimalLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2042);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STRING_CHARSET_NAME) {
				{
				setState(2041);
				match(STRING_CHARSET_NAME);
				}
			}

			setState(2044);
			match(HEXADECIMAL_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NullNotnullContext extends ParserRuleContext {
		public TerminalNode NULL_LITERAL() { return getToken(MySqlParser.NULL_LITERAL, 0); }
		public TerminalNode NULL_SPEC_LITERAL() { return getToken(MySqlParser.NULL_SPEC_LITERAL, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public NullNotnullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullNotnull; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNullNotnull(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNullNotnull(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNullNotnull(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NullNotnullContext nullNotnull() throws RecognitionException {
		NullNotnullContext _localctx = new NullNotnullContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_nullNotnull);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2047);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2046);
				match(NOT);
				}
			}

			setState(2049);
			_la = _input.LA(1);
			if ( !(_la==NULL_LITERAL || _la==NULL_SPEC_LITERAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantContext extends ParserRuleContext {
		public Token nullLiteral;
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode MINUS() { return getToken(MySqlParser.MINUS, 0); }
		public HexadecimalLiteralContext hexadecimalLiteral() {
			return getRuleContext(HexadecimalLiteralContext.class,0);
		}
		public BooleanLiteralContext booleanLiteral() {
			return getRuleContext(BooleanLiteralContext.class,0);
		}
		public TerminalNode REAL_LITERAL() { return getToken(MySqlParser.REAL_LITERAL, 0); }
		public TerminalNode BIT_STRING() { return getToken(MySqlParser.BIT_STRING, 0); }
		public TerminalNode NULL_LITERAL() { return getToken(MySqlParser.NULL_LITERAL, 0); }
		public TerminalNode NULL_SPEC_LITERAL() { return getToken(MySqlParser.NULL_SPEC_LITERAL, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterConstant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitConstant(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitConstant(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_constant);
		int _la;
		try {
			setState(2063);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,343,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2051);
				stringLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2052);
				decimalLiteral();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2053);
				match(MINUS);
				setState(2054);
				decimalLiteral();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2055);
				hexadecimalLiteral();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2056);
				booleanLiteral();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2057);
				match(REAL_LITERAL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2058);
				match(BIT_STRING);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2060);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2059);
					match(NOT);
					}
				}

				setState(2062);
				((ConstantContext)_localctx).nullLiteral = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NULL_LITERAL || _la==NULL_SPEC_LITERAL) ) {
					((ConstantContext)_localctx).nullLiteral = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeContext extends ParserRuleContext {
		public DataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataType; }
	 
		public DataTypeContext() { }
		public void copyFrom(DataTypeContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SpatialDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode GEOMETRYCOLLECTION() { return getToken(MySqlParser.GEOMETRYCOLLECTION, 0); }
		public TerminalNode GEOMCOLLECTION() { return getToken(MySqlParser.GEOMCOLLECTION, 0); }
		public TerminalNode LINESTRING() { return getToken(MySqlParser.LINESTRING, 0); }
		public TerminalNode MULTILINESTRING() { return getToken(MySqlParser.MULTILINESTRING, 0); }
		public TerminalNode MULTIPOINT() { return getToken(MySqlParser.MULTIPOINT, 0); }
		public TerminalNode MULTIPOLYGON() { return getToken(MySqlParser.MULTIPOLYGON, 0); }
		public TerminalNode POINT() { return getToken(MySqlParser.POINT, 0); }
		public TerminalNode POLYGON() { return getToken(MySqlParser.POLYGON, 0); }
		public TerminalNode JSON() { return getToken(MySqlParser.JSON, 0); }
		public TerminalNode GEOMETRY() { return getToken(MySqlParser.GEOMETRY, 0); }
		public SpatialDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSpatialDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSpatialDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSpatialDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LongVarbinaryDataTypeContext extends DataTypeContext {
		public TerminalNode LONG() { return getToken(MySqlParser.LONG, 0); }
		public TerminalNode VARBINARY() { return getToken(MySqlParser.VARBINARY, 0); }
		public LongVarbinaryDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLongVarbinaryDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLongVarbinaryDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLongVarbinaryDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CollectionDataTypeContext extends DataTypeContext {
		public Token typeName;
		public CollectionOptionsContext collectionOptions() {
			return getRuleContext(CollectionOptionsContext.class,0);
		}
		public TerminalNode ENUM() { return getToken(MySqlParser.ENUM, 0); }
		public List<TerminalNode> SET() { return getTokens(MySqlParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(MySqlParser.SET, i);
		}
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode CHARSET() { return getToken(MySqlParser.CHARSET, 0); }
		public CollectionDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCollectionDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCollectionDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCollectionDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NationalVaryingStringDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode NATIONAL() { return getToken(MySqlParser.NATIONAL, 0); }
		public TerminalNode VARYING() { return getToken(MySqlParser.VARYING, 0); }
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public NationalVaryingStringDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNationalVaryingStringDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNationalVaryingStringDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNationalVaryingStringDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DimensionDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode TINYINT() { return getToken(MySqlParser.TINYINT, 0); }
		public TerminalNode SMALLINT() { return getToken(MySqlParser.SMALLINT, 0); }
		public TerminalNode MEDIUMINT() { return getToken(MySqlParser.MEDIUMINT, 0); }
		public TerminalNode INT() { return getToken(MySqlParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(MySqlParser.INTEGER, 0); }
		public TerminalNode BIGINT() { return getToken(MySqlParser.BIGINT, 0); }
		public TerminalNode MIDDLEINT() { return getToken(MySqlParser.MIDDLEINT, 0); }
		public TerminalNode INT1() { return getToken(MySqlParser.INT1, 0); }
		public TerminalNode INT2() { return getToken(MySqlParser.INT2, 0); }
		public TerminalNode INT3() { return getToken(MySqlParser.INT3, 0); }
		public TerminalNode INT4() { return getToken(MySqlParser.INT4, 0); }
		public TerminalNode INT8() { return getToken(MySqlParser.INT8, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public TerminalNode ZEROFILL() { return getToken(MySqlParser.ZEROFILL, 0); }
		public TerminalNode SIGNED() { return getToken(MySqlParser.SIGNED, 0); }
		public TerminalNode UNSIGNED() { return getToken(MySqlParser.UNSIGNED, 0); }
		public TerminalNode REAL() { return getToken(MySqlParser.REAL, 0); }
		public LengthTwoDimensionContext lengthTwoDimension() {
			return getRuleContext(LengthTwoDimensionContext.class,0);
		}
		public TerminalNode DOUBLE() { return getToken(MySqlParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(MySqlParser.PRECISION, 0); }
		public TerminalNode DECIMAL() { return getToken(MySqlParser.DECIMAL, 0); }
		public TerminalNode DEC() { return getToken(MySqlParser.DEC, 0); }
		public TerminalNode FIXED() { return getToken(MySqlParser.FIXED, 0); }
		public TerminalNode NUMERIC() { return getToken(MySqlParser.NUMERIC, 0); }
		public TerminalNode FLOAT() { return getToken(MySqlParser.FLOAT, 0); }
		public TerminalNode FLOAT4() { return getToken(MySqlParser.FLOAT4, 0); }
		public TerminalNode FLOAT8() { return getToken(MySqlParser.FLOAT8, 0); }
		public LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() {
			return getRuleContext(LengthTwoOptionalDimensionContext.class,0);
		}
		public TerminalNode BIT() { return getToken(MySqlParser.BIT, 0); }
		public TerminalNode TIME() { return getToken(MySqlParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(MySqlParser.TIMESTAMP, 0); }
		public TerminalNode DATETIME() { return getToken(MySqlParser.DATETIME, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode VARBINARY() { return getToken(MySqlParser.VARBINARY, 0); }
		public TerminalNode BLOB() { return getToken(MySqlParser.BLOB, 0); }
		public TerminalNode YEAR() { return getToken(MySqlParser.YEAR, 0); }
		public DimensionDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDimensionDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDimensionDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDimensionDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StringDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public List<TerminalNode> CHARACTER() { return getTokens(MySqlParser.CHARACTER); }
		public TerminalNode CHARACTER(int i) {
			return getToken(MySqlParser.CHARACTER, i);
		}
		public TerminalNode VARCHAR() { return getToken(MySqlParser.VARCHAR, 0); }
		public TerminalNode TINYTEXT() { return getToken(MySqlParser.TINYTEXT, 0); }
		public TerminalNode TEXT() { return getToken(MySqlParser.TEXT, 0); }
		public TerminalNode MEDIUMTEXT() { return getToken(MySqlParser.MEDIUMTEXT, 0); }
		public TerminalNode LONGTEXT() { return getToken(MySqlParser.LONGTEXT, 0); }
		public TerminalNode NCHAR() { return getToken(MySqlParser.NCHAR, 0); }
		public TerminalNode NVARCHAR() { return getToken(MySqlParser.NVARCHAR, 0); }
		public TerminalNode LONG() { return getToken(MySqlParser.LONG, 0); }
		public TerminalNode VARYING() { return getToken(MySqlParser.VARYING, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public List<TerminalNode> BINARY() { return getTokens(MySqlParser.BINARY); }
		public TerminalNode BINARY(int i) {
			return getToken(MySqlParser.BINARY, i);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode CHARSET() { return getToken(MySqlParser.CHARSET, 0); }
		public StringDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStringDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStringDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStringDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LongVarcharDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode LONG() { return getToken(MySqlParser.LONG, 0); }
		public TerminalNode VARCHAR() { return getToken(MySqlParser.VARCHAR, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode CHARSET() { return getToken(MySqlParser.CHARSET, 0); }
		public LongVarcharDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLongVarcharDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLongVarcharDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLongVarcharDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NationalStringDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode NATIONAL() { return getToken(MySqlParser.NATIONAL, 0); }
		public TerminalNode VARCHAR() { return getToken(MySqlParser.VARCHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode NCHAR() { return getToken(MySqlParser.NCHAR, 0); }
		public NationalStringDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNationalStringDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNationalStringDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNationalStringDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode DATE() { return getToken(MySqlParser.DATE, 0); }
		public TerminalNode TINYBLOB() { return getToken(MySqlParser.TINYBLOB, 0); }
		public TerminalNode MEDIUMBLOB() { return getToken(MySqlParser.MEDIUMBLOB, 0); }
		public TerminalNode LONGBLOB() { return getToken(MySqlParser.LONGBLOB, 0); }
		public TerminalNode BOOL() { return getToken(MySqlParser.BOOL, 0); }
		public TerminalNode BOOLEAN() { return getToken(MySqlParser.BOOLEAN, 0); }
		public TerminalNode SERIAL() { return getToken(MySqlParser.SERIAL, 0); }
		public SimpleDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimpleDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeContext dataType() throws RecognitionException {
		DataTypeContext _localctx = new DataTypeContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_dataType);
		int _la;
		try {
			setState(2196);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,378,_ctx) ) {
			case 1:
				_localctx = new StringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2065);
				((StringDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CHARACTER || ((((_la - 204)) & ~0x3f) == 0 && ((1L << (_la - 204)) & ((1L << (CHAR - 204)) | (1L << (VARCHAR - 204)) | (1L << (NVARCHAR - 204)) | (1L << (LONG - 204)) | (1L << (TINYTEXT - 204)) | (1L << (TEXT - 204)) | (1L << (MEDIUMTEXT - 204)) | (1L << (LONGTEXT - 204)))) != 0) || _la==NCHAR) ) {
					((StringDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2067);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VARYING) {
					{
					setState(2066);
					match(VARYING);
					}
				}

				setState(2070);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2069);
					lengthOneDimension();
					}
				}

				setState(2073);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,346,_ctx) ) {
				case 1:
					{
					setState(2072);
					match(BINARY);
					}
					break;
				}
				setState(2081);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHARACTER || _la==CHARSET) {
					{
					setState(2078);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CHARACTER:
						{
						setState(2075);
						match(CHARACTER);
						setState(2076);
						match(SET);
						}
						break;
					case CHARSET:
						{
						setState(2077);
						match(CHARSET);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2080);
					charsetName();
					}
				}

				setState(2086);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,349,_ctx) ) {
				case 1:
					{
					setState(2083);
					match(COLLATE);
					setState(2084);
					collationName();
					}
					break;
				case 2:
					{
					setState(2085);
					match(BINARY);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new NationalStringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2088);
				match(NATIONAL);
				setState(2089);
				((NationalStringDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CHARACTER || _la==VARCHAR) ) {
					((NationalStringDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2091);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2090);
					lengthOneDimension();
					}
				}

				setState(2094);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY) {
					{
					setState(2093);
					match(BINARY);
					}
				}

				}
				break;
			case 3:
				_localctx = new NationalStringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2096);
				match(NCHAR);
				setState(2097);
				((NationalStringDataTypeContext)_localctx).typeName = match(VARCHAR);
				setState(2099);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2098);
					lengthOneDimension();
					}
				}

				setState(2102);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY) {
					{
					setState(2101);
					match(BINARY);
					}
				}

				}
				break;
			case 4:
				_localctx = new NationalVaryingStringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2104);
				match(NATIONAL);
				setState(2105);
				((NationalVaryingStringDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CHARACTER || _la==CHAR) ) {
					((NationalVaryingStringDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2106);
				match(VARYING);
				setState(2108);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2107);
					lengthOneDimension();
					}
				}

				setState(2111);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY) {
					{
					setState(2110);
					match(BINARY);
					}
				}

				}
				break;
			case 5:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2113);
				((DimensionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 178)) & ~0x3f) == 0 && ((1L << (_la - 178)) & ((1L << (TINYINT - 178)) | (1L << (SMALLINT - 178)) | (1L << (MEDIUMINT - 178)) | (1L << (MIDDLEINT - 178)) | (1L << (INT - 178)) | (1L << (INT1 - 178)) | (1L << (INT2 - 178)) | (1L << (INT3 - 178)) | (1L << (INT4 - 178)) | (1L << (INT8 - 178)) | (1L << (INTEGER - 178)) | (1L << (BIGINT - 178)))) != 0)) ) {
					((DimensionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2115);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2114);
					lengthOneDimension();
					}
				}

				setState(2118);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNSIGNED || _la==SIGNED) {
					{
					setState(2117);
					_la = _input.LA(1);
					if ( !(_la==UNSIGNED || _la==SIGNED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2121);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(2120);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 6:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(2123);
				((DimensionDataTypeContext)_localctx).typeName = match(REAL);
				setState(2125);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2124);
					lengthTwoDimension();
					}
				}

				setState(2128);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNSIGNED || _la==SIGNED) {
					{
					setState(2127);
					_la = _input.LA(1);
					if ( !(_la==UNSIGNED || _la==SIGNED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2131);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(2130);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 7:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(2133);
				((DimensionDataTypeContext)_localctx).typeName = match(DOUBLE);
				setState(2135);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRECISION) {
					{
					setState(2134);
					match(PRECISION);
					}
				}

				setState(2138);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2137);
					lengthTwoDimension();
					}
				}

				setState(2141);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNSIGNED || _la==SIGNED) {
					{
					setState(2140);
					_la = _input.LA(1);
					if ( !(_la==UNSIGNED || _la==SIGNED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2144);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(2143);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 8:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(2146);
				((DimensionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FLOAT - 193)) | (1L << (FLOAT4 - 193)) | (1L << (FLOAT8 - 193)) | (1L << (DECIMAL - 193)) | (1L << (DEC - 193)) | (1L << (NUMERIC - 193)))) != 0) || _la==FIXED) ) {
					((DimensionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2148);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2147);
					lengthTwoOptionalDimension();
					}
				}

				setState(2151);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNSIGNED || _la==SIGNED) {
					{
					setState(2150);
					_la = _input.LA(1);
					if ( !(_la==UNSIGNED || _la==SIGNED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2154);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(2153);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 9:
				_localctx = new SimpleDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(2156);
				((SimpleDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (DATE - 199)) | (1L << (TINYBLOB - 199)) | (1L << (MEDIUMBLOB - 199)) | (1L << (LONGBLOB - 199)) | (1L << (SERIAL - 199)))) != 0) || _la==BOOL || _la==BOOLEAN) ) {
					((SimpleDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 10:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(2157);
				((DimensionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (TIME - 200)) | (1L << (TIMESTAMP - 200)) | (1L << (DATETIME - 200)) | (1L << (YEAR - 200)) | (1L << (BINARY - 200)) | (1L << (VARBINARY - 200)) | (1L << (BLOB - 200)))) != 0) || _la==BIT) ) {
					((DimensionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2159);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2158);
					lengthOneDimension();
					}
				}

				}
				break;
			case 11:
				_localctx = new CollectionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(2161);
				((CollectionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==SET || _la==ENUM) ) {
					((CollectionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2162);
				collectionOptions();
				setState(2164);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY) {
					{
					setState(2163);
					match(BINARY);
					}
				}

				setState(2172);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHARACTER || _la==CHARSET) {
					{
					setState(2169);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CHARACTER:
						{
						setState(2166);
						match(CHARACTER);
						setState(2167);
						match(SET);
						}
						break;
					case CHARSET:
						{
						setState(2168);
						match(CHARSET);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2171);
					charsetName();
					}
				}

				}
				break;
			case 12:
				_localctx = new SpatialDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(2174);
				((SpatialDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==JSON || ((((_la - 701)) & ~0x3f) == 0 && ((1L << (_la - 701)) & ((1L << (GEOMETRYCOLLECTION - 701)) | (1L << (GEOMCOLLECTION - 701)) | (1L << (GEOMETRY - 701)) | (1L << (LINESTRING - 701)) | (1L << (MULTILINESTRING - 701)) | (1L << (MULTIPOINT - 701)) | (1L << (MULTIPOLYGON - 701)) | (1L << (POINT - 701)) | (1L << (POLYGON - 701)))) != 0)) ) {
					((SpatialDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 13:
				_localctx = new LongVarcharDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(2175);
				((LongVarcharDataTypeContext)_localctx).typeName = match(LONG);
				setState(2177);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VARCHAR) {
					{
					setState(2176);
					match(VARCHAR);
					}
				}

				setState(2180);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY) {
					{
					setState(2179);
					match(BINARY);
					}
				}

				setState(2188);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHARACTER || _la==CHARSET) {
					{
					setState(2185);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CHARACTER:
						{
						setState(2182);
						match(CHARACTER);
						setState(2183);
						match(SET);
						}
						break;
					case CHARSET:
						{
						setState(2184);
						match(CHARSET);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2187);
					charsetName();
					}
				}

				setState(2192);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,377,_ctx) ) {
				case 1:
					{
					setState(2190);
					match(COLLATE);
					setState(2191);
					collationName();
					}
					break;
				}
				}
				break;
			case 14:
				_localctx = new LongVarbinaryDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(2194);
				match(LONG);
				setState(2195);
				match(VARBINARY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollectionOptionsContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public CollectionOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collectionOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCollectionOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCollectionOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCollectionOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollectionOptionsContext collectionOptions() throws RecognitionException {
		CollectionOptionsContext _localctx = new CollectionOptionsContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_collectionOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2198);
			match(LR_BRACKET);
			setState(2199);
			match(STRING_LITERAL);
			setState(2204);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2200);
				match(COMMA);
				setState(2201);
				match(STRING_LITERAL);
				}
				}
				setState(2206);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2207);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConvertedDataTypeContext extends ParserRuleContext {
		public Token typeName;
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode NCHAR() { return getToken(MySqlParser.NCHAR, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode CHARSET() { return getToken(MySqlParser.CHARSET, 0); }
		public TerminalNode DATE() { return getToken(MySqlParser.DATE, 0); }
		public TerminalNode DATETIME() { return getToken(MySqlParser.DATETIME, 0); }
		public TerminalNode TIME() { return getToken(MySqlParser.TIME, 0); }
		public TerminalNode JSON() { return getToken(MySqlParser.JSON, 0); }
		public TerminalNode DECIMAL() { return getToken(MySqlParser.DECIMAL, 0); }
		public LengthTwoDimensionContext lengthTwoDimension() {
			return getRuleContext(LengthTwoDimensionContext.class,0);
		}
		public TerminalNode SIGNED() { return getToken(MySqlParser.SIGNED, 0); }
		public TerminalNode UNSIGNED() { return getToken(MySqlParser.UNSIGNED, 0); }
		public TerminalNode INTEGER() { return getToken(MySqlParser.INTEGER, 0); }
		public ConvertedDataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_convertedDataType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterConvertedDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitConvertedDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitConvertedDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConvertedDataTypeContext convertedDataType() throws RecognitionException {
		ConvertedDataTypeContext _localctx = new ConvertedDataTypeContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_convertedDataType);
		int _la;
		try {
			setState(2234);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINARY:
			case NCHAR:
				enterOuterAlt(_localctx, 1);
				{
				setState(2209);
				((ConvertedDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BINARY || _la==NCHAR) ) {
					((ConvertedDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2211);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2210);
					lengthOneDimension();
					}
				}

				}
				break;
			case CHAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(2213);
				((ConvertedDataTypeContext)_localctx).typeName = match(CHAR);
				setState(2215);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2214);
					lengthOneDimension();
					}
				}

				setState(2223);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHARACTER || _la==CHARSET) {
					{
					setState(2220);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CHARACTER:
						{
						setState(2217);
						match(CHARACTER);
						setState(2218);
						match(SET);
						}
						break;
					case CHARSET:
						{
						setState(2219);
						match(CHARSET);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2222);
					charsetName();
					}
				}

				}
				break;
			case DATE:
			case TIME:
			case DATETIME:
			case JSON:
				enterOuterAlt(_localctx, 3);
				{
				setState(2225);
				((ConvertedDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (DATE - 199)) | (1L << (TIME - 199)) | (1L << (DATETIME - 199)))) != 0) || _la==JSON) ) {
					((ConvertedDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 4);
				{
				setState(2226);
				((ConvertedDataTypeContext)_localctx).typeName = match(DECIMAL);
				setState(2228);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2227);
					lengthTwoDimension();
					}
				}

				}
				break;
			case UNSIGNED:
			case SIGNED:
				enterOuterAlt(_localctx, 5);
				{
				setState(2230);
				_la = _input.LA(1);
				if ( !(_la==UNSIGNED || _la==SIGNED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2232);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTEGER) {
					{
					setState(2231);
					match(INTEGER);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthOneDimensionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public LengthOneDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthOneDimension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLengthOneDimension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLengthOneDimension(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLengthOneDimension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthOneDimensionContext lengthOneDimension() throws RecognitionException {
		LengthOneDimensionContext _localctx = new LengthOneDimensionContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_lengthOneDimension);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2236);
			match(LR_BRACKET);
			setState(2237);
			decimalLiteral();
			setState(2238);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthTwoDimensionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public LengthTwoDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthTwoDimension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLengthTwoDimension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLengthTwoDimension(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLengthTwoDimension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthTwoDimensionContext lengthTwoDimension() throws RecognitionException {
		LengthTwoDimensionContext _localctx = new LengthTwoDimensionContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_lengthTwoDimension);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2240);
			match(LR_BRACKET);
			setState(2241);
			decimalLiteral();
			setState(2242);
			match(COMMA);
			setState(2243);
			decimalLiteral();
			setState(2244);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthTwoOptionalDimensionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public LengthTwoOptionalDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthTwoOptionalDimension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLengthTwoOptionalDimension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLengthTwoOptionalDimension(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLengthTwoOptionalDimension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() throws RecognitionException {
		LengthTwoOptionalDimensionContext _localctx = new LengthTwoOptionalDimensionContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_lengthTwoOptionalDimension);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2246);
			match(LR_BRACKET);
			setState(2247);
			decimalLiteral();
			setState(2250);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(2248);
				match(COMMA);
				setState(2249);
				decimalLiteral();
				}
			}

			setState(2252);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UidListContext extends ParserRuleContext {
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public UidListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uidList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUidList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUidList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUidList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UidListContext uidList() throws RecognitionException {
		UidListContext _localctx = new UidListContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_uidList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2254);
			uid();
			setState(2259);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2255);
				match(COMMA);
				setState(2256);
				uid();
				}
				}
				setState(2261);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablesContext extends ParserRuleContext {
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablesContext tables() throws RecognitionException {
		TablesContext _localctx = new TablesContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_tables);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2262);
			tableName();
			setState(2267);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2263);
				match(COMMA);
				setState(2264);
				tableName();
				}
				}
				setState(2269);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexColumnNamesContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<IndexColumnNameContext> indexColumnName() {
			return getRuleContexts(IndexColumnNameContext.class);
		}
		public IndexColumnNameContext indexColumnName(int i) {
			return getRuleContext(IndexColumnNameContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public IndexColumnNamesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexColumnNames; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexColumnNames(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexColumnNames(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndexColumnNames(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexColumnNamesContext indexColumnNames() throws RecognitionException {
		IndexColumnNamesContext _localctx = new IndexColumnNamesContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_indexColumnNames);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2270);
			match(LR_BRACKET);
			setState(2271);
			indexColumnName();
			setState(2276);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2272);
				match(COMMA);
				setState(2273);
				indexColumnName();
				}
				}
				setState(2278);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2279);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionsContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExpressions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExpressions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitExpressions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionsContext expressions() throws RecognitionException {
		ExpressionsContext _localctx = new ExpressionsContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_expressions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2281);
			expression(0);
			setState(2286);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2282);
				match(COMMA);
				setState(2283);
				expression(0);
				}
				}
				setState(2288);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionsWithDefaultsContext extends ParserRuleContext {
		public List<ExpressionOrDefaultContext> expressionOrDefault() {
			return getRuleContexts(ExpressionOrDefaultContext.class);
		}
		public ExpressionOrDefaultContext expressionOrDefault(int i) {
			return getRuleContext(ExpressionOrDefaultContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public ExpressionsWithDefaultsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionsWithDefaults; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExpressionsWithDefaults(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExpressionsWithDefaults(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitExpressionsWithDefaults(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionsWithDefaultsContext expressionsWithDefaults() throws RecognitionException {
		ExpressionsWithDefaultsContext _localctx = new ExpressionsWithDefaultsContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_expressionsWithDefaults);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2289);
			expressionOrDefault();
			setState(2294);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2290);
				match(COMMA);
				setState(2291);
				expressionOrDefault();
				}
				}
				setState(2296);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionOrDefaultContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public ExpressionOrDefaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionOrDefault; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExpressionOrDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExpressionOrDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitExpressionOrDefault(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionOrDefaultContext expressionOrDefault() throws RecognitionException {
		ExpressionOrDefaultContext _localctx = new ExpressionOrDefaultContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_expressionOrDefault);
		try {
			setState(2299);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,393,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2297);
				expression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2298);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionCallContext extends ParserRuleContext {
		public FunctionCallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionCall; }
	 
		public FunctionCallContext() { }
		public void copyFrom(FunctionCallContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SpecificFunctionCallContext extends FunctionCallContext {
		public SpecificFunctionContext specificFunction() {
			return getRuleContext(SpecificFunctionContext.class,0);
		}
		public SpecificFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSpecificFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSpecificFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSpecificFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PasswordFunctionCallContext extends FunctionCallContext {
		public PasswordFunctionClauseContext passwordFunctionClause() {
			return getRuleContext(PasswordFunctionClauseContext.class,0);
		}
		public PasswordFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPasswordFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPasswordFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPasswordFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UdfFunctionCallContext extends FunctionCallContext {
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public UdfFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUdfFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUdfFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUdfFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AggregateFunctionCallContext extends FunctionCallContext {
		public AggregateWindowedFunctionContext aggregateWindowedFunction() {
			return getRuleContext(AggregateWindowedFunctionContext.class,0);
		}
		public AggregateFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAggregateFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAggregateFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAggregateFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ScalarFunctionCallContext extends FunctionCallContext {
		public ScalarFunctionNameContext scalarFunctionName() {
			return getRuleContext(ScalarFunctionNameContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public ScalarFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterScalarFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitScalarFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitScalarFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionCallContext functionCall() throws RecognitionException {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_functionCall);
		try {
			setState(2318);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,396,_ctx) ) {
			case 1:
				_localctx = new SpecificFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2301);
				specificFunction();
				}
				break;
			case 2:
				_localctx = new AggregateFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2302);
				aggregateWindowedFunction();
				}
				break;
			case 3:
				_localctx = new ScalarFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2303);
				scalarFunctionName();
				setState(2304);
				match(LR_BRACKET);
				setState(2306);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,394,_ctx) ) {
				case 1:
					{
					setState(2305);
					functionArgs();
					}
					break;
				}
				setState(2308);
				match(RR_BRACKET);
				}
				break;
			case 4:
				_localctx = new UdfFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2310);
				fullId();
				setState(2311);
				match(LR_BRACKET);
				setState(2313);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,395,_ctx) ) {
				case 1:
					{
					setState(2312);
					functionArgs();
					}
					break;
				}
				setState(2315);
				match(RR_BRACKET);
				}
				break;
			case 5:
				_localctx = new PasswordFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2317);
				passwordFunctionClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpecificFunctionContext extends ParserRuleContext {
		public SpecificFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_specificFunction; }
	 
		public SpecificFunctionContext() { }
		public void copyFrom(SpecificFunctionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PositionFunctionCallContext extends SpecificFunctionContext {
		public StringLiteralContext positionString;
		public ExpressionContext positionExpression;
		public StringLiteralContext inString;
		public ExpressionContext inExpression;
		public TerminalNode POSITION() { return getToken(MySqlParser.POSITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<StringLiteralContext> stringLiteral() {
			return getRuleContexts(StringLiteralContext.class);
		}
		public StringLiteralContext stringLiteral(int i) {
			return getRuleContext(StringLiteralContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public PositionFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPositionFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPositionFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPositionFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TrimFunctionCallContext extends SpecificFunctionContext {
		public Token positioinForm;
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public StringLiteralContext fromString;
		public ExpressionContext fromExpression;
		public TerminalNode TRIM() { return getToken(MySqlParser.TRIM, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode BOTH() { return getToken(MySqlParser.BOTH, 0); }
		public TerminalNode LEADING() { return getToken(MySqlParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(MySqlParser.TRAILING, 0); }
		public List<StringLiteralContext> stringLiteral() {
			return getRuleContexts(StringLiteralContext.class);
		}
		public StringLiteralContext stringLiteral(int i) {
			return getRuleContext(StringLiteralContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TrimFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTrimFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTrimFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTrimFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode CURRENT_DATE() { return getToken(MySqlParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(MySqlParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_USER() { return getToken(MySqlParser.CURRENT_USER, 0); }
		public TerminalNode LOCALTIME() { return getToken(MySqlParser.LOCALTIME, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public SimpleFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimpleFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CharFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public CharFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCharFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCharFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCharFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class WeightFunctionCallContext extends SpecificFunctionContext {
		public Token stringFormat;
		public TerminalNode WEIGHT_STRING() { return getToken(MySqlParser.WEIGHT_STRING, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public LevelsInWeightStringContext levelsInWeightString() {
			return getRuleContext(LevelsInWeightStringContext.class,0);
		}
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public WeightFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterWeightFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitWeightFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitWeightFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GetFormatFunctionCallContext extends SpecificFunctionContext {
		public Token datetimeFormat;
		public TerminalNode GET_FORMAT() { return getToken(MySqlParser.GET_FORMAT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode DATE() { return getToken(MySqlParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(MySqlParser.TIME, 0); }
		public TerminalNode DATETIME() { return getToken(MySqlParser.DATETIME, 0); }
		public GetFormatFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGetFormatFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGetFormatFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitGetFormatFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CaseFunctionCallContext extends SpecificFunctionContext {
		public FunctionArgContext elseArg;
		public TerminalNode CASE() { return getToken(MySqlParser.CASE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public List<CaseFuncAlternativeContext> caseFuncAlternative() {
			return getRuleContexts(CaseFuncAlternativeContext.class);
		}
		public CaseFuncAlternativeContext caseFuncAlternative(int i) {
			return getRuleContext(CaseFuncAlternativeContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(MySqlParser.ELSE, 0); }
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public CaseFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCaseFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCaseFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCaseFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExtractFunctionCallContext extends SpecificFunctionContext {
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public TerminalNode EXTRACT() { return getToken(MySqlParser.EXTRACT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ExtractFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExtractFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExtractFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitExtractFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DataTypeFunctionCallContext extends SpecificFunctionContext {
		public Token separator;
		public TerminalNode CONVERT() { return getToken(MySqlParser.CONVERT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ConvertedDataTypeContext convertedDataType() {
			return getRuleContext(ConvertedDataTypeContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode CAST() { return getToken(MySqlParser.CAST, 0); }
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public DataTypeFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDataTypeFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDataTypeFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDataTypeFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ValuesFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode VALUES() { return getToken(MySqlParser.VALUES, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public ValuesFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterValuesFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitValuesFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitValuesFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubstrFunctionCallContext extends SpecificFunctionContext {
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public DecimalLiteralContext fromDecimal;
		public ExpressionContext fromExpression;
		public DecimalLiteralContext forDecimal;
		public ExpressionContext forExpression;
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode SUBSTR() { return getToken(MySqlParser.SUBSTR, 0); }
		public TerminalNode SUBSTRING() { return getToken(MySqlParser.SUBSTRING, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public SubstrFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubstrFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubstrFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSubstrFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SpecificFunctionContext specificFunction() throws RecognitionException {
		SpecificFunctionContext _localctx = new SpecificFunctionContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_specificFunction);
		int _la;
		try {
			setState(2481);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,417,_ctx) ) {
			case 1:
				_localctx = new SimpleFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2320);
				_la = _input.LA(1);
				if ( !(_la==CURRENT_USER || ((((_la - 251)) & ~0x3f) == 0 && ((1L << (_la - 251)) & ((1L << (CURRENT_DATE - 251)) | (1L << (CURRENT_TIME - 251)) | (1L << (CURRENT_TIMESTAMP - 251)) | (1L << (LOCALTIME - 251)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2323);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,397,_ctx) ) {
				case 1:
					{
					setState(2321);
					match(LR_BRACKET);
					setState(2322);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2325);
				match(CONVERT);
				setState(2326);
				match(LR_BRACKET);
				setState(2327);
				expression(0);
				setState(2328);
				((DataTypeFunctionCallContext)_localctx).separator = match(COMMA);
				setState(2329);
				convertedDataType();
				setState(2330);
				match(RR_BRACKET);
				}
				break;
			case 3:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2332);
				match(CONVERT);
				setState(2333);
				match(LR_BRACKET);
				setState(2334);
				expression(0);
				setState(2335);
				match(USING);
				setState(2336);
				charsetName();
				setState(2337);
				match(RR_BRACKET);
				}
				break;
			case 4:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2339);
				match(CAST);
				setState(2340);
				match(LR_BRACKET);
				setState(2341);
				expression(0);
				setState(2342);
				match(AS);
				setState(2343);
				convertedDataType();
				setState(2344);
				match(RR_BRACKET);
				}
				break;
			case 5:
				_localctx = new ValuesFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2346);
				match(VALUES);
				setState(2347);
				match(LR_BRACKET);
				setState(2348);
				fullColumnName();
				setState(2349);
				match(RR_BRACKET);
				}
				break;
			case 6:
				_localctx = new CaseFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(2351);
				match(CASE);
				setState(2352);
				expression(0);
				setState(2354); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2353);
					caseFuncAlternative();
					}
					}
					setState(2356); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(2360);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(2358);
					match(ELSE);
					setState(2359);
					((CaseFunctionCallContext)_localctx).elseArg = functionArg();
					}
				}

				setState(2362);
				match(END);
				}
				break;
			case 7:
				_localctx = new CaseFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(2364);
				match(CASE);
				setState(2366); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2365);
					caseFuncAlternative();
					}
					}
					setState(2368); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(2372);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(2370);
					match(ELSE);
					setState(2371);
					((CaseFunctionCallContext)_localctx).elseArg = functionArg();
					}
				}

				setState(2374);
				match(END);
				}
				break;
			case 8:
				_localctx = new CharFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(2376);
				match(CHAR);
				setState(2377);
				match(LR_BRACKET);
				setState(2378);
				functionArgs();
				setState(2381);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2379);
					match(USING);
					setState(2380);
					charsetName();
					}
				}

				setState(2383);
				match(RR_BRACKET);
				}
				break;
			case 9:
				_localctx = new PositionFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(2385);
				match(POSITION);
				setState(2386);
				match(LR_BRACKET);
				setState(2389);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,403,_ctx) ) {
				case 1:
					{
					setState(2387);
					((PositionFunctionCallContext)_localctx).positionString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(2388);
					((PositionFunctionCallContext)_localctx).positionExpression = expression(0);
					}
					break;
				}
				setState(2391);
				match(IN);
				setState(2394);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,404,_ctx) ) {
				case 1:
					{
					setState(2392);
					((PositionFunctionCallContext)_localctx).inString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(2393);
					((PositionFunctionCallContext)_localctx).inExpression = expression(0);
					}
					break;
				}
				setState(2396);
				match(RR_BRACKET);
				}
				break;
			case 10:
				_localctx = new SubstrFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(2398);
				_la = _input.LA(1);
				if ( !(_la==SUBSTR || _la==SUBSTRING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2399);
				match(LR_BRACKET);
				setState(2402);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,405,_ctx) ) {
				case 1:
					{
					setState(2400);
					((SubstrFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(2401);
					((SubstrFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(2404);
				match(FROM);
				setState(2407);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,406,_ctx) ) {
				case 1:
					{
					setState(2405);
					((SubstrFunctionCallContext)_localctx).fromDecimal = decimalLiteral();
					}
					break;
				case 2:
					{
					setState(2406);
					((SubstrFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				setState(2414);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(2409);
					match(FOR);
					setState(2412);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,407,_ctx) ) {
					case 1:
						{
						setState(2410);
						((SubstrFunctionCallContext)_localctx).forDecimal = decimalLiteral();
						}
						break;
					case 2:
						{
						setState(2411);
						((SubstrFunctionCallContext)_localctx).forExpression = expression(0);
						}
						break;
					}
					}
				}

				setState(2416);
				match(RR_BRACKET);
				}
				break;
			case 11:
				_localctx = new TrimFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(2418);
				match(TRIM);
				setState(2419);
				match(LR_BRACKET);
				setState(2420);
				((TrimFunctionCallContext)_localctx).positioinForm = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
					((TrimFunctionCallContext)_localctx).positioinForm = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2423);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,409,_ctx) ) {
				case 1:
					{
					setState(2421);
					((TrimFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(2422);
					((TrimFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(2425);
				match(FROM);
				setState(2428);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,410,_ctx) ) {
				case 1:
					{
					setState(2426);
					((TrimFunctionCallContext)_localctx).fromString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(2427);
					((TrimFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				setState(2430);
				match(RR_BRACKET);
				}
				break;
			case 12:
				_localctx = new TrimFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(2432);
				match(TRIM);
				setState(2433);
				match(LR_BRACKET);
				setState(2436);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,411,_ctx) ) {
				case 1:
					{
					setState(2434);
					((TrimFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(2435);
					((TrimFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(2438);
				match(FROM);
				setState(2441);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,412,_ctx) ) {
				case 1:
					{
					setState(2439);
					((TrimFunctionCallContext)_localctx).fromString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(2440);
					((TrimFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				setState(2443);
				match(RR_BRACKET);
				}
				break;
			case 13:
				_localctx = new WeightFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(2445);
				match(WEIGHT_STRING);
				setState(2446);
				match(LR_BRACKET);
				setState(2449);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,413,_ctx) ) {
				case 1:
					{
					setState(2447);
					stringLiteral();
					}
					break;
				case 2:
					{
					setState(2448);
					expression(0);
					}
					break;
				}
				setState(2457);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(2451);
					match(AS);
					setState(2452);
					((WeightFunctionCallContext)_localctx).stringFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==CHAR || _la==BINARY) ) {
						((WeightFunctionCallContext)_localctx).stringFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(2453);
					match(LR_BRACKET);
					setState(2454);
					decimalLiteral();
					setState(2455);
					match(RR_BRACKET);
					}
				}

				setState(2460);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEVEL) {
					{
					setState(2459);
					levelsInWeightString();
					}
				}

				setState(2462);
				match(RR_BRACKET);
				}
				break;
			case 14:
				_localctx = new ExtractFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(2464);
				match(EXTRACT);
				setState(2465);
				match(LR_BRACKET);
				setState(2466);
				intervalType();
				setState(2467);
				match(FROM);
				setState(2470);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,416,_ctx) ) {
				case 1:
					{
					setState(2468);
					((ExtractFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(2469);
					((ExtractFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(2472);
				match(RR_BRACKET);
				}
				break;
			case 15:
				_localctx = new GetFormatFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(2474);
				match(GET_FORMAT);
				setState(2475);
				match(LR_BRACKET);
				setState(2476);
				((GetFormatFunctionCallContext)_localctx).datetimeFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (DATE - 199)) | (1L << (TIME - 199)) | (1L << (DATETIME - 199)))) != 0)) ) {
					((GetFormatFunctionCallContext)_localctx).datetimeFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2477);
				match(COMMA);
				setState(2478);
				stringLiteral();
				setState(2479);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseFuncAlternativeContext extends ParserRuleContext {
		public FunctionArgContext condition;
		public FunctionArgContext consequent;
		public TerminalNode WHEN() { return getToken(MySqlParser.WHEN, 0); }
		public TerminalNode THEN() { return getToken(MySqlParser.THEN, 0); }
		public List<FunctionArgContext> functionArg() {
			return getRuleContexts(FunctionArgContext.class);
		}
		public FunctionArgContext functionArg(int i) {
			return getRuleContext(FunctionArgContext.class,i);
		}
		public CaseFuncAlternativeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseFuncAlternative; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCaseFuncAlternative(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCaseFuncAlternative(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCaseFuncAlternative(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseFuncAlternativeContext caseFuncAlternative() throws RecognitionException {
		CaseFuncAlternativeContext _localctx = new CaseFuncAlternativeContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_caseFuncAlternative);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2483);
			match(WHEN);
			setState(2484);
			((CaseFuncAlternativeContext)_localctx).condition = functionArg();
			setState(2485);
			match(THEN);
			setState(2486);
			((CaseFuncAlternativeContext)_localctx).consequent = functionArg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LevelsInWeightStringContext extends ParserRuleContext {
		public LevelsInWeightStringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_levelsInWeightString; }
	 
		public LevelsInWeightStringContext() { }
		public void copyFrom(LevelsInWeightStringContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class LevelWeightRangeContext extends LevelsInWeightStringContext {
		public DecimalLiteralContext firstLevel;
		public DecimalLiteralContext lastLevel;
		public TerminalNode LEVEL() { return getToken(MySqlParser.LEVEL, 0); }
		public TerminalNode MINUS() { return getToken(MySqlParser.MINUS, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public LevelWeightRangeContext(LevelsInWeightStringContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLevelWeightRange(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLevelWeightRange(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLevelWeightRange(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LevelWeightListContext extends LevelsInWeightStringContext {
		public TerminalNode LEVEL() { return getToken(MySqlParser.LEVEL, 0); }
		public List<LevelInWeightListElementContext> levelInWeightListElement() {
			return getRuleContexts(LevelInWeightListElementContext.class);
		}
		public LevelInWeightListElementContext levelInWeightListElement(int i) {
			return getRuleContext(LevelInWeightListElementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public LevelWeightListContext(LevelsInWeightStringContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLevelWeightList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLevelWeightList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLevelWeightList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LevelsInWeightStringContext levelsInWeightString() throws RecognitionException {
		LevelsInWeightStringContext _localctx = new LevelsInWeightStringContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_levelsInWeightString);
		int _la;
		try {
			setState(2502);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,419,_ctx) ) {
			case 1:
				_localctx = new LevelWeightListContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2488);
				match(LEVEL);
				setState(2489);
				levelInWeightListElement();
				setState(2494);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2490);
					match(COMMA);
					setState(2491);
					levelInWeightListElement();
					}
					}
					setState(2496);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new LevelWeightRangeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2497);
				match(LEVEL);
				setState(2498);
				((LevelWeightRangeContext)_localctx).firstLevel = decimalLiteral();
				setState(2499);
				match(MINUS);
				setState(2500);
				((LevelWeightRangeContext)_localctx).lastLevel = decimalLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LevelInWeightListElementContext extends ParserRuleContext {
		public Token orderType;
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode ASC() { return getToken(MySqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public TerminalNode REVERSE() { return getToken(MySqlParser.REVERSE, 0); }
		public LevelInWeightListElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_levelInWeightListElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLevelInWeightListElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLevelInWeightListElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLevelInWeightListElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LevelInWeightListElementContext levelInWeightListElement() throws RecognitionException {
		LevelInWeightListElementContext _localctx = new LevelInWeightListElementContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_levelInWeightListElement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2504);
			decimalLiteral();
			setState(2506);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC || _la==REVERSE) {
				{
				setState(2505);
				((LevelInWeightListElementContext)_localctx).orderType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC || _la==REVERSE) ) {
					((LevelInWeightListElementContext)_localctx).orderType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregateWindowedFunctionContext extends ParserRuleContext {
		public Token aggregator;
		public Token starArg;
		public Token separator;
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode AVG() { return getToken(MySqlParser.AVG, 0); }
		public TerminalNode MAX() { return getToken(MySqlParser.MAX, 0); }
		public TerminalNode MIN() { return getToken(MySqlParser.MIN, 0); }
		public TerminalNode SUM() { return getToken(MySqlParser.SUM, 0); }
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public TerminalNode COUNT() { return getToken(MySqlParser.COUNT, 0); }
		public TerminalNode STAR() { return getToken(MySqlParser.STAR, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public TerminalNode BIT_AND() { return getToken(MySqlParser.BIT_AND, 0); }
		public TerminalNode BIT_OR() { return getToken(MySqlParser.BIT_OR, 0); }
		public TerminalNode BIT_XOR() { return getToken(MySqlParser.BIT_XOR, 0); }
		public TerminalNode STD() { return getToken(MySqlParser.STD, 0); }
		public TerminalNode STDDEV() { return getToken(MySqlParser.STDDEV, 0); }
		public TerminalNode STDDEV_POP() { return getToken(MySqlParser.STDDEV_POP, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(MySqlParser.STDDEV_SAMP, 0); }
		public TerminalNode VAR_POP() { return getToken(MySqlParser.VAR_POP, 0); }
		public TerminalNode VAR_SAMP() { return getToken(MySqlParser.VAR_SAMP, 0); }
		public TerminalNode VARIANCE() { return getToken(MySqlParser.VARIANCE, 0); }
		public TerminalNode GROUP_CONCAT() { return getToken(MySqlParser.GROUP_CONCAT, 0); }
		public TerminalNode ORDER() { return getToken(MySqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public List<OrderByExpressionContext> orderByExpression() {
			return getRuleContexts(OrderByExpressionContext.class);
		}
		public OrderByExpressionContext orderByExpression(int i) {
			return getRuleContext(OrderByExpressionContext.class,i);
		}
		public TerminalNode SEPARATOR() { return getToken(MySqlParser.SEPARATOR, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AggregateWindowedFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregateWindowedFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAggregateWindowedFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAggregateWindowedFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAggregateWindowedFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregateWindowedFunctionContext aggregateWindowedFunction() throws RecognitionException {
		AggregateWindowedFunctionContext _localctx = new AggregateWindowedFunctionContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_aggregateWindowedFunction);
		int _la;
		try {
			setState(2564);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,429,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2508);
				_la = _input.LA(1);
				if ( !(((((_la - 235)) & ~0x3f) == 0 && ((1L << (_la - 235)) & ((1L << (AVG - 235)) | (1L << (MAX - 235)) | (1L << (MIN - 235)) | (1L << (SUM - 235)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2509);
				match(LR_BRACKET);
				setState(2511);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,421,_ctx) ) {
				case 1:
					{
					setState(2510);
					((AggregateWindowedFunctionContext)_localctx).aggregator = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
						((AggregateWindowedFunctionContext)_localctx).aggregator = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(2513);
				functionArg();
				setState(2514);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2516);
				match(COUNT);
				setState(2517);
				match(LR_BRACKET);
				setState(2523);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,423,_ctx) ) {
				case 1:
					{
					setState(2518);
					((AggregateWindowedFunctionContext)_localctx).starArg = match(STAR);
					}
					break;
				case 2:
					{
					setState(2520);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,422,_ctx) ) {
					case 1:
						{
						setState(2519);
						((AggregateWindowedFunctionContext)_localctx).aggregator = match(ALL);
						}
						break;
					}
					setState(2522);
					functionArg();
					}
					break;
				}
				setState(2525);
				match(RR_BRACKET);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2526);
				match(COUNT);
				setState(2527);
				match(LR_BRACKET);
				setState(2528);
				((AggregateWindowedFunctionContext)_localctx).aggregator = match(DISTINCT);
				setState(2529);
				functionArgs();
				setState(2530);
				match(RR_BRACKET);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2532);
				_la = _input.LA(1);
				if ( !(((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & ((1L << (BIT_AND - 236)) | (1L << (BIT_OR - 236)) | (1L << (BIT_XOR - 236)) | (1L << (STD - 236)) | (1L << (STDDEV - 236)) | (1L << (STDDEV_POP - 236)) | (1L << (STDDEV_SAMP - 236)) | (1L << (VAR_POP - 236)) | (1L << (VAR_SAMP - 236)) | (1L << (VARIANCE - 236)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2533);
				match(LR_BRACKET);
				setState(2535);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,424,_ctx) ) {
				case 1:
					{
					setState(2534);
					((AggregateWindowedFunctionContext)_localctx).aggregator = match(ALL);
					}
					break;
				}
				setState(2537);
				functionArg();
				setState(2538);
				match(RR_BRACKET);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2540);
				match(GROUP_CONCAT);
				setState(2541);
				match(LR_BRACKET);
				setState(2543);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,425,_ctx) ) {
				case 1:
					{
					setState(2542);
					((AggregateWindowedFunctionContext)_localctx).aggregator = match(DISTINCT);
					}
					break;
				}
				setState(2545);
				functionArgs();
				setState(2556);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(2546);
					match(ORDER);
					setState(2547);
					match(BY);
					setState(2548);
					orderByExpression();
					setState(2553);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2549);
						match(COMMA);
						setState(2550);
						orderByExpression();
						}
						}
						setState(2555);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(2560);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SEPARATOR) {
					{
					setState(2558);
					match(SEPARATOR);
					setState(2559);
					((AggregateWindowedFunctionContext)_localctx).separator = match(STRING_LITERAL);
					}
				}

				setState(2562);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScalarFunctionNameContext extends ParserRuleContext {
		public FunctionNameBaseContext functionNameBase() {
			return getRuleContext(FunctionNameBaseContext.class,0);
		}
		public TerminalNode ASCII() { return getToken(MySqlParser.ASCII, 0); }
		public TerminalNode CURDATE() { return getToken(MySqlParser.CURDATE, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(MySqlParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(MySqlParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURTIME() { return getToken(MySqlParser.CURTIME, 0); }
		public TerminalNode DATE_ADD() { return getToken(MySqlParser.DATE_ADD, 0); }
		public TerminalNode DATE_SUB() { return getToken(MySqlParser.DATE_SUB, 0); }
		public TerminalNode IF() { return getToken(MySqlParser.IF, 0); }
		public TerminalNode INSERT() { return getToken(MySqlParser.INSERT, 0); }
		public TerminalNode LOCALTIME() { return getToken(MySqlParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(MySqlParser.LOCALTIMESTAMP, 0); }
		public TerminalNode MID() { return getToken(MySqlParser.MID, 0); }
		public TerminalNode NOW() { return getToken(MySqlParser.NOW, 0); }
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public TerminalNode SUBSTR() { return getToken(MySqlParser.SUBSTR, 0); }
		public TerminalNode SUBSTRING() { return getToken(MySqlParser.SUBSTRING, 0); }
		public TerminalNode SYSDATE() { return getToken(MySqlParser.SYSDATE, 0); }
		public TerminalNode TRIM() { return getToken(MySqlParser.TRIM, 0); }
		public TerminalNode UTC_DATE() { return getToken(MySqlParser.UTC_DATE, 0); }
		public TerminalNode UTC_TIME() { return getToken(MySqlParser.UTC_TIME, 0); }
		public TerminalNode UTC_TIMESTAMP() { return getToken(MySqlParser.UTC_TIMESTAMP, 0); }
		public ScalarFunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scalarFunctionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterScalarFunctionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitScalarFunctionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitScalarFunctionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ScalarFunctionNameContext scalarFunctionName() throws RecognitionException {
		ScalarFunctionNameContext _localctx = new ScalarFunctionNameContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_scalarFunctionName);
		try {
			setState(2589);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATABASE:
			case LEFT:
			case RIGHT:
			case SCHEMA:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case JSON_VALID:
			case JSON_SCHEMA_VALID:
			case COUNT:
			case POSITION:
			case INVISIBLE:
			case VISIBLE:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case SESSION_VARIABLES_ADMIN:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
				enterOuterAlt(_localctx, 1);
				{
				setState(2566);
				functionNameBase();
				}
				break;
			case ASCII:
				enterOuterAlt(_localctx, 2);
				{
				setState(2567);
				match(ASCII);
				}
				break;
			case CURDATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(2568);
				match(CURDATE);
				}
				break;
			case CURRENT_DATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(2569);
				match(CURRENT_DATE);
				}
				break;
			case CURRENT_TIME:
				enterOuterAlt(_localctx, 5);
				{
				setState(2570);
				match(CURRENT_TIME);
				}
				break;
			case CURRENT_TIMESTAMP:
				enterOuterAlt(_localctx, 6);
				{
				setState(2571);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case CURTIME:
				enterOuterAlt(_localctx, 7);
				{
				setState(2572);
				match(CURTIME);
				}
				break;
			case DATE_ADD:
				enterOuterAlt(_localctx, 8);
				{
				setState(2573);
				match(DATE_ADD);
				}
				break;
			case DATE_SUB:
				enterOuterAlt(_localctx, 9);
				{
				setState(2574);
				match(DATE_SUB);
				}
				break;
			case IF:
				enterOuterAlt(_localctx, 10);
				{
				setState(2575);
				match(IF);
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 11);
				{
				setState(2576);
				match(INSERT);
				}
				break;
			case LOCALTIME:
				enterOuterAlt(_localctx, 12);
				{
				setState(2577);
				match(LOCALTIME);
				}
				break;
			case LOCALTIMESTAMP:
				enterOuterAlt(_localctx, 13);
				{
				setState(2578);
				match(LOCALTIMESTAMP);
				}
				break;
			case MID:
				enterOuterAlt(_localctx, 14);
				{
				setState(2579);
				match(MID);
				}
				break;
			case NOW:
				enterOuterAlt(_localctx, 15);
				{
				setState(2580);
				match(NOW);
				}
				break;
			case REPLACE:
				enterOuterAlt(_localctx, 16);
				{
				setState(2581);
				match(REPLACE);
				}
				break;
			case SUBSTR:
				enterOuterAlt(_localctx, 17);
				{
				setState(2582);
				match(SUBSTR);
				}
				break;
			case SUBSTRING:
				enterOuterAlt(_localctx, 18);
				{
				setState(2583);
				match(SUBSTRING);
				}
				break;
			case SYSDATE:
				enterOuterAlt(_localctx, 19);
				{
				setState(2584);
				match(SYSDATE);
				}
				break;
			case TRIM:
				enterOuterAlt(_localctx, 20);
				{
				setState(2585);
				match(TRIM);
				}
				break;
			case UTC_DATE:
				enterOuterAlt(_localctx, 21);
				{
				setState(2586);
				match(UTC_DATE);
				}
				break;
			case UTC_TIME:
				enterOuterAlt(_localctx, 22);
				{
				setState(2587);
				match(UTC_TIME);
				}
				break;
			case UTC_TIMESTAMP:
				enterOuterAlt(_localctx, 23);
				{
				setState(2588);
				match(UTC_TIMESTAMP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PasswordFunctionClauseContext extends ParserRuleContext {
		public Token functionName;
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(MySqlParser.OLD_PASSWORD, 0); }
		public PasswordFunctionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_passwordFunctionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPasswordFunctionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPasswordFunctionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPasswordFunctionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PasswordFunctionClauseContext passwordFunctionClause() throws RecognitionException {
		PasswordFunctionClauseContext _localctx = new PasswordFunctionClauseContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_passwordFunctionClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2591);
			((PasswordFunctionClauseContext)_localctx).functionName = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==OLD_PASSWORD || _la==PASSWORD) ) {
				((PasswordFunctionClauseContext)_localctx).functionName = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2592);
			match(LR_BRACKET);
			setState(2593);
			functionArg();
			setState(2594);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionArgsContext extends ParserRuleContext {
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public List<FullColumnNameContext> fullColumnName() {
			return getRuleContexts(FullColumnNameContext.class);
		}
		public FullColumnNameContext fullColumnName(int i) {
			return getRuleContext(FullColumnNameContext.class,i);
		}
		public List<FunctionCallContext> functionCall() {
			return getRuleContexts(FunctionCallContext.class);
		}
		public FunctionCallContext functionCall(int i) {
			return getRuleContext(FunctionCallContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public FunctionArgsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionArgs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFunctionArgs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFunctionArgs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFunctionArgs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionArgsContext functionArgs() throws RecognitionException {
		FunctionArgsContext _localctx = new FunctionArgsContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_functionArgs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2600);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,431,_ctx) ) {
			case 1:
				{
				setState(2596);
				constant();
				}
				break;
			case 2:
				{
				setState(2597);
				fullColumnName();
				}
				break;
			case 3:
				{
				setState(2598);
				functionCall();
				}
				break;
			case 4:
				{
				setState(2599);
				expression(0);
				}
				break;
			}
			setState(2611);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2602);
				match(COMMA);
				setState(2607);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,432,_ctx) ) {
				case 1:
					{
					setState(2603);
					constant();
					}
					break;
				case 2:
					{
					setState(2604);
					fullColumnName();
					}
					break;
				case 3:
					{
					setState(2605);
					functionCall();
					}
					break;
				case 4:
					{
					setState(2606);
					expression(0);
					}
					break;
				}
				}
				}
				setState(2613);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionArgContext extends ParserRuleContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public FunctionArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFunctionArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFunctionArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFunctionArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionArgContext functionArg() throws RecognitionException {
		FunctionArgContext _localctx = new FunctionArgContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_functionArg);
		try {
			setState(2618);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,434,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2614);
				constant();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2615);
				fullColumnName();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2616);
				functionCall();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2617);
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionContext extends ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
	 
		public ExpressionContext() { }
		public void copyFrom(ExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class IsExpressionContext extends ExpressionContext {
		public Token testValue;
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode IS() { return getToken(MySqlParser.IS, 0); }
		public TerminalNode TRUE() { return getToken(MySqlParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(MySqlParser.FALSE, 0); }
		public TerminalNode UNKNOWN() { return getToken(MySqlParser.UNKNOWN, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public IsExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIsExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIsExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIsExpression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NotExpressionContext extends ExpressionContext {
		public Token notOperator;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public TerminalNode EXCLAMATION_SYMBOL() { return getToken(MySqlParser.EXCLAMATION_SYMBOL, 0); }
		public NotExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNotExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNotExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNotExpression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LogicalExpressionContext extends ExpressionContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public LogicalOperatorContext logicalOperator() {
			return getRuleContext(LogicalOperatorContext.class,0);
		}
		public LogicalExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLogicalExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLogicalExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLogicalExpression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PredicateExpressionContext extends ExpressionContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public PredicateExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPredicateExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPredicateExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPredicateExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		return expression(0);
	}

	private ExpressionContext expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 232;
		enterRecursionRule(_localctx, 232, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2631);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,436,_ctx) ) {
			case 1:
				{
				_localctx = new NotExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(2621);
				((NotExpressionContext)_localctx).notOperator = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NOT || _la==EXCLAMATION_SYMBOL) ) {
					((NotExpressionContext)_localctx).notOperator = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2622);
				expression(4);
				}
				break;
			case 2:
				{
				_localctx = new IsExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(2623);
				predicate(0);
				setState(2624);
				match(IS);
				setState(2626);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2625);
					match(NOT);
					}
				}

				setState(2628);
				((IsExpressionContext)_localctx).testValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FALSE || _la==TRUE || _la==UNKNOWN) ) {
					((IsExpressionContext)_localctx).testValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 3:
				{
				_localctx = new PredicateExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(2630);
				predicate(0);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(2639);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,437,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalExpressionContext(new ExpressionContext(_parentctx, _parentState));
					pushNewRecursionContext(_localctx, _startState, RULE_expression);
					setState(2633);
					if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
					setState(2634);
					logicalOperator();
					setState(2635);
					expression(4);
					}
					} 
				}
				setState(2641);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,437,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class PredicateContext extends ParserRuleContext {
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
	 
		public PredicateContext() { }
		public void copyFrom(PredicateContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SoundsLikePredicateContext extends PredicateContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode SOUNDS() { return getToken(MySqlParser.SOUNDS, 0); }
		public TerminalNode LIKE() { return getToken(MySqlParser.LIKE, 0); }
		public SoundsLikePredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSoundsLikePredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSoundsLikePredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSoundsLikePredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExpressionAtomPredicateContext extends PredicateContext {
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public TerminalNode VAR_ASSIGN() { return getToken(MySqlParser.VAR_ASSIGN, 0); }
		public ExpressionAtomPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExpressionAtomPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExpressionAtomPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitExpressionAtomPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class JsonMemberOfPredicateContext extends PredicateContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode MEMBER() { return getToken(MySqlParser.MEMBER, 0); }
		public TerminalNode OF() { return getToken(MySqlParser.OF, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public JsonMemberOfPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterJsonMemberOfPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitJsonMemberOfPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitJsonMemberOfPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class InPredicateContext extends PredicateContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public InPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterInPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitInPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitInPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubqueryComparasionPredicateContext extends PredicateContext {
		public Token quantifier;
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode ANY() { return getToken(MySqlParser.ANY, 0); }
		public TerminalNode SOME() { return getToken(MySqlParser.SOME, 0); }
		public SubqueryComparasionPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubqueryComparasionPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubqueryComparasionPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSubqueryComparasionPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BetweenPredicateContext extends PredicateContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode BETWEEN() { return getToken(MySqlParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(MySqlParser.AND, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public BetweenPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBetweenPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBetweenPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBetweenPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BinaryComparasionPredicateContext extends PredicateContext {
		public PredicateContext left;
		public PredicateContext right;
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public BinaryComparasionPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBinaryComparasionPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBinaryComparasionPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBinaryComparasionPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IsNullPredicateContext extends PredicateContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode IS() { return getToken(MySqlParser.IS, 0); }
		public NullNotnullContext nullNotnull() {
			return getRuleContext(NullNotnullContext.class,0);
		}
		public IsNullPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIsNullPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIsNullPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIsNullPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LikePredicateContext extends PredicateContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode LIKE() { return getToken(MySqlParser.LIKE, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public TerminalNode ESCAPE() { return getToken(MySqlParser.ESCAPE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public LikePredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLikePredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLikePredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLikePredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RegexpPredicateContext extends PredicateContext {
		public Token regex;
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode REGEXP() { return getToken(MySqlParser.REGEXP, 0); }
		public TerminalNode RLIKE() { return getToken(MySqlParser.RLIKE, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public RegexpPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRegexpPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRegexpPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRegexpPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PredicateContext predicate() throws RecognitionException {
		return predicate(0);
	}

	private PredicateContext predicate(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		PredicateContext _localctx = new PredicateContext(_ctx, _parentState);
		PredicateContext _prevctx = _localctx;
		int _startState = 234;
		enterRecursionRule(_localctx, 234, RULE_predicate, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ExpressionAtomPredicateContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			setState(2645);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,438,_ctx) ) {
			case 1:
				{
				setState(2643);
				match(LOCAL_ID);
				setState(2644);
				match(VAR_ASSIGN);
				}
				break;
			}
			setState(2647);
			expressionAtom(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(2713);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,446,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(2711);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,445,_ctx) ) {
					case 1:
						{
						_localctx = new BinaryComparasionPredicateContext(new PredicateContext(_parentctx, _parentState));
						((BinaryComparasionPredicateContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(2649);
						if (!(precpred(_ctx, 8))) throw new FailedPredicateException(this, "precpred(_ctx, 8)");
						setState(2650);
						comparisonOperator();
						setState(2651);
						((BinaryComparasionPredicateContext)_localctx).right = predicate(9);
						}
						break;
					case 2:
						{
						_localctx = new BetweenPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(2653);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(2655);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(2654);
							match(NOT);
							}
						}

						setState(2657);
						match(BETWEEN);
						setState(2658);
						predicate(0);
						setState(2659);
						match(AND);
						setState(2660);
						predicate(7);
						}
						break;
					case 3:
						{
						_localctx = new SoundsLikePredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(2662);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(2663);
						match(SOUNDS);
						setState(2664);
						match(LIKE);
						setState(2665);
						predicate(6);
						}
						break;
					case 4:
						{
						_localctx = new RegexpPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(2666);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(2668);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(2667);
							match(NOT);
							}
						}

						setState(2670);
						((RegexpPredicateContext)_localctx).regex = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==REGEXP || _la==RLIKE) ) {
							((RegexpPredicateContext)_localctx).regex = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(2671);
						predicate(4);
						}
						break;
					case 5:
						{
						_localctx = new InPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(2672);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(2674);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(2673);
							match(NOT);
							}
						}

						setState(2676);
						match(IN);
						setState(2677);
						match(LR_BRACKET);
						setState(2680);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,442,_ctx) ) {
						case 1:
							{
							setState(2678);
							selectStatement();
							}
							break;
						case 2:
							{
							setState(2679);
							expressions();
							}
							break;
						}
						setState(2682);
						match(RR_BRACKET);
						}
						break;
					case 6:
						{
						_localctx = new IsNullPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(2684);
						if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
						setState(2685);
						match(IS);
						setState(2686);
						nullNotnull();
						}
						break;
					case 7:
						{
						_localctx = new SubqueryComparasionPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(2687);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(2688);
						comparisonOperator();
						setState(2689);
						((SubqueryComparasionPredicateContext)_localctx).quantifier = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
							((SubqueryComparasionPredicateContext)_localctx).quantifier = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(2690);
						match(LR_BRACKET);
						setState(2691);
						selectStatement();
						setState(2692);
						match(RR_BRACKET);
						}
						break;
					case 8:
						{
						_localctx = new LikePredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(2694);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(2696);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(2695);
							match(NOT);
							}
						}

						setState(2698);
						match(LIKE);
						setState(2699);
						predicate(0);
						setState(2702);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,444,_ctx) ) {
						case 1:
							{
							setState(2700);
							match(ESCAPE);
							setState(2701);
							match(STRING_LITERAL);
							}
							break;
						}
						}
						break;
					case 9:
						{
						_localctx = new JsonMemberOfPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(2704);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(2705);
						match(MEMBER);
						setState(2706);
						match(OF);
						setState(2707);
						match(LR_BRACKET);
						setState(2708);
						predicate(0);
						setState(2709);
						match(RR_BRACKET);
						}
						break;
					}
					} 
				}
				setState(2715);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,446,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ExpressionAtomContext extends ParserRuleContext {
		public ExpressionAtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionAtom; }
	 
		public ExpressionAtomContext() { }
		public void copyFrom(ExpressionAtomContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class UnaryExpressionAtomContext extends ExpressionAtomContext {
		public UnaryOperatorContext unaryOperator() {
			return getRuleContext(UnaryOperatorContext.class,0);
		}
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public UnaryExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnaryExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnaryExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUnaryExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CollateExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public CollateExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCollateExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCollateExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCollateExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MysqlVariableExpressionAtomContext extends ExpressionAtomContext {
		public MysqlVariableContext mysqlVariable() {
			return getRuleContext(MysqlVariableContext.class,0);
		}
		public MysqlVariableExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMysqlVariableExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMysqlVariableExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMysqlVariableExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NestedExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public NestedExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNestedExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNestedExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNestedExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NestedRowExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode ROW() { return getToken(MySqlParser.ROW, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public NestedRowExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNestedRowExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNestedRowExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNestedRowExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MathExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		public MathOperatorContext mathOperator() {
			return getRuleContext(MathOperatorContext.class,0);
		}
		public List<ExpressionAtomContext> expressionAtom() {
			return getRuleContexts(ExpressionAtomContext.class);
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return getRuleContext(ExpressionAtomContext.class,i);
		}
		public MathExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMathExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMathExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMathExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExistsExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode EXISTS() { return getToken(MySqlParser.EXISTS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public ExistsExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExistsExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExistsExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitExistsExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IntervalExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode INTERVAL() { return getToken(MySqlParser.INTERVAL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public IntervalExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIntervalExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIntervalExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIntervalExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class JsonExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		public JsonOperatorContext jsonOperator() {
			return getRuleContext(JsonOperatorContext.class,0);
		}
		public List<ExpressionAtomContext> expressionAtom() {
			return getRuleContexts(ExpressionAtomContext.class);
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return getRuleContext(ExpressionAtomContext.class,i);
		}
		public JsonExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterJsonExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitJsonExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitJsonExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubqueryExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public SubqueryExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubqueryExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubqueryExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSubqueryExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ConstantExpressionAtomContext extends ExpressionAtomContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public ConstantExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterConstantExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitConstantExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitConstantExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FunctionCallExpressionAtomContext extends ExpressionAtomContext {
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public FunctionCallExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFunctionCallExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFunctionCallExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFunctionCallExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BinaryExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public BinaryExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBinaryExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBinaryExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBinaryExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FullColumnNameExpressionAtomContext extends ExpressionAtomContext {
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public FullColumnNameExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFullColumnNameExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFullColumnNameExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFullColumnNameExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BitExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		public BitOperatorContext bitOperator() {
			return getRuleContext(BitOperatorContext.class,0);
		}
		public List<ExpressionAtomContext> expressionAtom() {
			return getRuleContexts(ExpressionAtomContext.class);
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return getRuleContext(ExpressionAtomContext.class,i);
		}
		public BitExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBitExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBitExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBitExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionAtomContext expressionAtom() throws RecognitionException {
		return expressionAtom(0);
	}

	private ExpressionAtomContext expressionAtom(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExpressionAtomContext _localctx = new ExpressionAtomContext(_ctx, _parentState);
		ExpressionAtomContext _prevctx = _localctx;
		int _startState = 236;
		enterRecursionRule(_localctx, 236, RULE_expressionAtom, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2761);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,449,_ctx) ) {
			case 1:
				{
				_localctx = new ConstantExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(2717);
				constant();
				}
				break;
			case 2:
				{
				_localctx = new FullColumnNameExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(2718);
				fullColumnName();
				}
				break;
			case 3:
				{
				_localctx = new FunctionCallExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(2719);
				functionCall();
				}
				break;
			case 4:
				{
				_localctx = new MysqlVariableExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(2720);
				mysqlVariable();
				}
				break;
			case 5:
				{
				_localctx = new UnaryExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(2721);
				unaryOperator();
				setState(2722);
				expressionAtom(10);
				}
				break;
			case 6:
				{
				_localctx = new BinaryExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(2724);
				match(BINARY);
				setState(2725);
				expressionAtom(9);
				}
				break;
			case 7:
				{
				_localctx = new NestedExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(2726);
				match(LR_BRACKET);
				setState(2727);
				expression(0);
				setState(2732);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2728);
					match(COMMA);
					setState(2729);
					expression(0);
					}
					}
					setState(2734);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2735);
				match(RR_BRACKET);
				}
				break;
			case 8:
				{
				_localctx = new NestedRowExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(2737);
				match(ROW);
				setState(2738);
				match(LR_BRACKET);
				setState(2739);
				expression(0);
				setState(2742); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2740);
					match(COMMA);
					setState(2741);
					expression(0);
					}
					}
					setState(2744); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				setState(2746);
				match(RR_BRACKET);
				}
				break;
			case 9:
				{
				_localctx = new ExistsExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(2748);
				match(EXISTS);
				setState(2749);
				match(LR_BRACKET);
				setState(2750);
				selectStatement();
				setState(2751);
				match(RR_BRACKET);
				}
				break;
			case 10:
				{
				_localctx = new SubqueryExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(2753);
				match(LR_BRACKET);
				setState(2754);
				selectStatement();
				setState(2755);
				match(RR_BRACKET);
				}
				break;
			case 11:
				{
				_localctx = new IntervalExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(2757);
				match(INTERVAL);
				setState(2758);
				expression(0);
				setState(2759);
				intervalType();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(2780);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,451,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(2778);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,450,_ctx) ) {
					case 1:
						{
						_localctx = new BitExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((BitExpressionAtomContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(2763);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(2764);
						bitOperator();
						setState(2765);
						((BitExpressionAtomContext)_localctx).right = expressionAtom(4);
						}
						break;
					case 2:
						{
						_localctx = new MathExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((MathExpressionAtomContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(2767);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(2768);
						mathOperator();
						setState(2769);
						((MathExpressionAtomContext)_localctx).right = expressionAtom(3);
						}
						break;
					case 3:
						{
						_localctx = new JsonExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((JsonExpressionAtomContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(2771);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(2772);
						jsonOperator();
						setState(2773);
						((JsonExpressionAtomContext)_localctx).right = expressionAtom(2);
						}
						break;
					case 4:
						{
						_localctx = new CollateExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(2775);
						if (!(precpred(_ctx, 12))) throw new FailedPredicateException(this, "precpred(_ctx, 12)");
						setState(2776);
						match(COLLATE);
						setState(2777);
						collationName();
						}
						break;
					}
					} 
				}
				setState(2782);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,451,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class UnaryOperatorContext extends ParserRuleContext {
		public TerminalNode EXCLAMATION_SYMBOL() { return getToken(MySqlParser.EXCLAMATION_SYMBOL, 0); }
		public TerminalNode BIT_NOT_OP() { return getToken(MySqlParser.BIT_NOT_OP, 0); }
		public TerminalNode PLUS() { return getToken(MySqlParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(MySqlParser.MINUS, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unaryOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnaryOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnaryOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUnaryOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnaryOperatorContext unaryOperator() throws RecognitionException {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_unaryOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2783);
			_la = _input.LA(1);
			if ( !(_la==NOT || ((((_la - 1014)) & ~0x3f) == 0 && ((1L << (_la - 1014)) & ((1L << (PLUS - 1014)) | (1L << (MINUS - 1014)) | (1L << (EXCLAMATION_SYMBOL - 1014)) | (1L << (BIT_NOT_OP - 1014)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ComparisonOperatorContext extends ParserRuleContext {
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode GREATER_SYMBOL() { return getToken(MySqlParser.GREATER_SYMBOL, 0); }
		public TerminalNode LESS_SYMBOL() { return getToken(MySqlParser.LESS_SYMBOL, 0); }
		public TerminalNode EXCLAMATION_SYMBOL() { return getToken(MySqlParser.EXCLAMATION_SYMBOL, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparisonOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterComparisonOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitComparisonOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitComparisonOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComparisonOperatorContext comparisonOperator() throws RecognitionException {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_comparisonOperator);
		try {
			setState(2799);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,452,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2785);
				match(EQUAL_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2786);
				match(GREATER_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2787);
				match(LESS_SYMBOL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2788);
				match(LESS_SYMBOL);
				setState(2789);
				match(EQUAL_SYMBOL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2790);
				match(GREATER_SYMBOL);
				setState(2791);
				match(EQUAL_SYMBOL);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2792);
				match(LESS_SYMBOL);
				setState(2793);
				match(GREATER_SYMBOL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2794);
				match(EXCLAMATION_SYMBOL);
				setState(2795);
				match(EQUAL_SYMBOL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2796);
				match(LESS_SYMBOL);
				setState(2797);
				match(EQUAL_SYMBOL);
				setState(2798);
				match(GREATER_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LogicalOperatorContext extends ParserRuleContext {
		public TerminalNode AND() { return getToken(MySqlParser.AND, 0); }
		public List<TerminalNode> BIT_AND_OP() { return getTokens(MySqlParser.BIT_AND_OP); }
		public TerminalNode BIT_AND_OP(int i) {
			return getToken(MySqlParser.BIT_AND_OP, i);
		}
		public TerminalNode XOR() { return getToken(MySqlParser.XOR, 0); }
		public TerminalNode OR() { return getToken(MySqlParser.OR, 0); }
		public List<TerminalNode> BIT_OR_OP() { return getTokens(MySqlParser.BIT_OR_OP); }
		public TerminalNode BIT_OR_OP(int i) {
			return getToken(MySqlParser.BIT_OR_OP, i);
		}
		public LogicalOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logicalOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLogicalOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLogicalOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLogicalOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LogicalOperatorContext logicalOperator() throws RecognitionException {
		LogicalOperatorContext _localctx = new LogicalOperatorContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_logicalOperator);
		try {
			setState(2808);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
				enterOuterAlt(_localctx, 1);
				{
				setState(2801);
				match(AND);
				}
				break;
			case BIT_AND_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(2802);
				match(BIT_AND_OP);
				setState(2803);
				match(BIT_AND_OP);
				}
				break;
			case XOR:
				enterOuterAlt(_localctx, 3);
				{
				setState(2804);
				match(XOR);
				}
				break;
			case OR:
				enterOuterAlt(_localctx, 4);
				{
				setState(2805);
				match(OR);
				}
				break;
			case BIT_OR_OP:
				enterOuterAlt(_localctx, 5);
				{
				setState(2806);
				match(BIT_OR_OP);
				setState(2807);
				match(BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitOperatorContext extends ParserRuleContext {
		public List<TerminalNode> LESS_SYMBOL() { return getTokens(MySqlParser.LESS_SYMBOL); }
		public TerminalNode LESS_SYMBOL(int i) {
			return getToken(MySqlParser.LESS_SYMBOL, i);
		}
		public List<TerminalNode> GREATER_SYMBOL() { return getTokens(MySqlParser.GREATER_SYMBOL); }
		public TerminalNode GREATER_SYMBOL(int i) {
			return getToken(MySqlParser.GREATER_SYMBOL, i);
		}
		public TerminalNode BIT_AND_OP() { return getToken(MySqlParser.BIT_AND_OP, 0); }
		public TerminalNode BIT_XOR_OP() { return getToken(MySqlParser.BIT_XOR_OP, 0); }
		public TerminalNode BIT_OR_OP() { return getToken(MySqlParser.BIT_OR_OP, 0); }
		public BitOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBitOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBitOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBitOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitOperatorContext bitOperator() throws RecognitionException {
		BitOperatorContext _localctx = new BitOperatorContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_bitOperator);
		try {
			setState(2817);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LESS_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2810);
				match(LESS_SYMBOL);
				setState(2811);
				match(LESS_SYMBOL);
				}
				break;
			case GREATER_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2812);
				match(GREATER_SYMBOL);
				setState(2813);
				match(GREATER_SYMBOL);
				}
				break;
			case BIT_AND_OP:
				enterOuterAlt(_localctx, 3);
				{
				setState(2814);
				match(BIT_AND_OP);
				}
				break;
			case BIT_XOR_OP:
				enterOuterAlt(_localctx, 4);
				{
				setState(2815);
				match(BIT_XOR_OP);
				}
				break;
			case BIT_OR_OP:
				enterOuterAlt(_localctx, 5);
				{
				setState(2816);
				match(BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MathOperatorContext extends ParserRuleContext {
		public TerminalNode STAR() { return getToken(MySqlParser.STAR, 0); }
		public TerminalNode DIVIDE() { return getToken(MySqlParser.DIVIDE, 0); }
		public TerminalNode MODULE() { return getToken(MySqlParser.MODULE, 0); }
		public TerminalNode DIV() { return getToken(MySqlParser.DIV, 0); }
		public TerminalNode MOD() { return getToken(MySqlParser.MOD, 0); }
		public TerminalNode PLUS() { return getToken(MySqlParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(MySqlParser.MINUS, 0); }
		public TerminalNode MINUSMINUS() { return getToken(MySqlParser.MINUSMINUS, 0); }
		public MathOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mathOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMathOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMathOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMathOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MathOperatorContext mathOperator() throws RecognitionException {
		MathOperatorContext _localctx = new MathOperatorContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_mathOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2819);
			_la = _input.LA(1);
			if ( !(((((_la - 1011)) & ~0x3f) == 0 && ((1L << (_la - 1011)) & ((1L << (STAR - 1011)) | (1L << (DIVIDE - 1011)) | (1L << (MODULE - 1011)) | (1L << (PLUS - 1011)) | (1L << (MINUSMINUS - 1011)) | (1L << (MINUS - 1011)) | (1L << (DIV - 1011)) | (1L << (MOD - 1011)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JsonOperatorContext extends ParserRuleContext {
		public TerminalNode MINUS() { return getToken(MySqlParser.MINUS, 0); }
		public List<TerminalNode> GREATER_SYMBOL() { return getTokens(MySqlParser.GREATER_SYMBOL); }
		public TerminalNode GREATER_SYMBOL(int i) {
			return getToken(MySqlParser.GREATER_SYMBOL, i);
		}
		public JsonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterJsonOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitJsonOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitJsonOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonOperatorContext jsonOperator() throws RecognitionException {
		JsonOperatorContext _localctx = new JsonOperatorContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_jsonOperator);
		try {
			setState(2826);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,455,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2821);
				match(MINUS);
				setState(2822);
				match(GREATER_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2823);
				match(MINUS);
				setState(2824);
				match(GREATER_SYMBOL);
				setState(2825);
				match(GREATER_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharsetNameBaseContext extends ParserRuleContext {
		public TerminalNode ARMSCII8() { return getToken(MySqlParser.ARMSCII8, 0); }
		public TerminalNode ASCII() { return getToken(MySqlParser.ASCII, 0); }
		public TerminalNode BIG5() { return getToken(MySqlParser.BIG5, 0); }
		public TerminalNode CP1250() { return getToken(MySqlParser.CP1250, 0); }
		public TerminalNode CP1251() { return getToken(MySqlParser.CP1251, 0); }
		public TerminalNode CP1256() { return getToken(MySqlParser.CP1256, 0); }
		public TerminalNode CP1257() { return getToken(MySqlParser.CP1257, 0); }
		public TerminalNode CP850() { return getToken(MySqlParser.CP850, 0); }
		public TerminalNode CP852() { return getToken(MySqlParser.CP852, 0); }
		public TerminalNode CP866() { return getToken(MySqlParser.CP866, 0); }
		public TerminalNode CP932() { return getToken(MySqlParser.CP932, 0); }
		public TerminalNode DEC8() { return getToken(MySqlParser.DEC8, 0); }
		public TerminalNode EUCJPMS() { return getToken(MySqlParser.EUCJPMS, 0); }
		public TerminalNode EUCKR() { return getToken(MySqlParser.EUCKR, 0); }
		public TerminalNode GB2312() { return getToken(MySqlParser.GB2312, 0); }
		public TerminalNode GBK() { return getToken(MySqlParser.GBK, 0); }
		public TerminalNode GEOSTD8() { return getToken(MySqlParser.GEOSTD8, 0); }
		public TerminalNode GREEK() { return getToken(MySqlParser.GREEK, 0); }
		public TerminalNode HEBREW() { return getToken(MySqlParser.HEBREW, 0); }
		public TerminalNode HP8() { return getToken(MySqlParser.HP8, 0); }
		public TerminalNode KEYBCS2() { return getToken(MySqlParser.KEYBCS2, 0); }
		public TerminalNode KOI8R() { return getToken(MySqlParser.KOI8R, 0); }
		public TerminalNode KOI8U() { return getToken(MySqlParser.KOI8U, 0); }
		public TerminalNode LATIN1() { return getToken(MySqlParser.LATIN1, 0); }
		public TerminalNode LATIN2() { return getToken(MySqlParser.LATIN2, 0); }
		public TerminalNode LATIN5() { return getToken(MySqlParser.LATIN5, 0); }
		public TerminalNode LATIN7() { return getToken(MySqlParser.LATIN7, 0); }
		public TerminalNode MACCE() { return getToken(MySqlParser.MACCE, 0); }
		public TerminalNode MACROMAN() { return getToken(MySqlParser.MACROMAN, 0); }
		public TerminalNode SJIS() { return getToken(MySqlParser.SJIS, 0); }
		public TerminalNode SWE7() { return getToken(MySqlParser.SWE7, 0); }
		public TerminalNode TIS620() { return getToken(MySqlParser.TIS620, 0); }
		public TerminalNode UCS2() { return getToken(MySqlParser.UCS2, 0); }
		public TerminalNode UJIS() { return getToken(MySqlParser.UJIS, 0); }
		public TerminalNode UTF16() { return getToken(MySqlParser.UTF16, 0); }
		public TerminalNode UTF16LE() { return getToken(MySqlParser.UTF16LE, 0); }
		public TerminalNode UTF32() { return getToken(MySqlParser.UTF32, 0); }
		public TerminalNode UTF8() { return getToken(MySqlParser.UTF8, 0); }
		public TerminalNode UTF8MB3() { return getToken(MySqlParser.UTF8MB3, 0); }
		public TerminalNode UTF8MB4() { return getToken(MySqlParser.UTF8MB4, 0); }
		public CharsetNameBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charsetNameBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCharsetNameBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCharsetNameBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCharsetNameBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharsetNameBaseContext charsetNameBase() throws RecognitionException {
		CharsetNameBaseContext _localctx = new CharsetNameBaseContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_charsetNameBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2828);
			_la = _input.LA(1);
			if ( !(((((_la - 645)) & ~0x3f) == 0 && ((1L << (_la - 645)) & ((1L << (ARMSCII8 - 645)) | (1L << (ASCII - 645)) | (1L << (BIG5 - 645)) | (1L << (CP1250 - 645)) | (1L << (CP1251 - 645)) | (1L << (CP1256 - 645)) | (1L << (CP1257 - 645)) | (1L << (CP850 - 645)) | (1L << (CP852 - 645)) | (1L << (CP866 - 645)) | (1L << (CP932 - 645)) | (1L << (DEC8 - 645)) | (1L << (EUCJPMS - 645)) | (1L << (EUCKR - 645)) | (1L << (GB2312 - 645)) | (1L << (GBK - 645)) | (1L << (GEOSTD8 - 645)) | (1L << (GREEK - 645)) | (1L << (HEBREW - 645)) | (1L << (HP8 - 645)) | (1L << (KEYBCS2 - 645)) | (1L << (KOI8R - 645)) | (1L << (KOI8U - 645)) | (1L << (LATIN1 - 645)) | (1L << (LATIN2 - 645)) | (1L << (LATIN5 - 645)) | (1L << (LATIN7 - 645)) | (1L << (MACCE - 645)) | (1L << (MACROMAN - 645)) | (1L << (SJIS - 645)) | (1L << (SWE7 - 645)) | (1L << (TIS620 - 645)) | (1L << (UCS2 - 645)) | (1L << (UJIS - 645)) | (1L << (UTF16 - 645)) | (1L << (UTF16LE - 645)) | (1L << (UTF32 - 645)) | (1L << (UTF8 - 645)) | (1L << (UTF8MB3 - 645)) | (1L << (UTF8MB4 - 645)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionLevelBaseContext extends ParserRuleContext {
		public TerminalNode REPEATABLE() { return getToken(MySqlParser.REPEATABLE, 0); }
		public TerminalNode COMMITTED() { return getToken(MySqlParser.COMMITTED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(MySqlParser.UNCOMMITTED, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(MySqlParser.SERIALIZABLE, 0); }
		public TransactionLevelBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionLevelBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTransactionLevelBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTransactionLevelBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTransactionLevelBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionLevelBaseContext transactionLevelBase() throws RecognitionException {
		TransactionLevelBaseContext _localctx = new TransactionLevelBaseContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_transactionLevelBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2830);
			_la = _input.LA(1);
			if ( !(((((_la - 697)) & ~0x3f) == 0 && ((1L << (_la - 697)) & ((1L << (REPEATABLE - 697)) | (1L << (COMMITTED - 697)) | (1L << (UNCOMMITTED - 697)) | (1L << (SERIALIZABLE - 697)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegesBaseContext extends ParserRuleContext {
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public TerminalNode ROUTINE() { return getToken(MySqlParser.ROUTINE, 0); }
		public TerminalNode EXECUTE() { return getToken(MySqlParser.EXECUTE, 0); }
		public TerminalNode FILE() { return getToken(MySqlParser.FILE, 0); }
		public TerminalNode PROCESS() { return getToken(MySqlParser.PROCESS, 0); }
		public TerminalNode RELOAD() { return getToken(MySqlParser.RELOAD, 0); }
		public TerminalNode SHUTDOWN() { return getToken(MySqlParser.SHUTDOWN, 0); }
		public TerminalNode SUPER() { return getToken(MySqlParser.SUPER, 0); }
		public TerminalNode PRIVILEGES() { return getToken(MySqlParser.PRIVILEGES, 0); }
		public PrivilegesBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegesBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPrivilegesBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPrivilegesBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPrivilegesBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegesBaseContext privilegesBase() throws RecognitionException {
		PrivilegesBaseContext _localctx = new PrivilegesBaseContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_privilegesBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2832);
			_la = _input.LA(1);
			if ( !(((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & ((1L << (TABLES - 604)) | (1L << (ROUTINE - 604)) | (1L << (EXECUTE - 604)) | (1L << (FILE - 604)) | (1L << (PROCESS - 604)) | (1L << (RELOAD - 604)) | (1L << (SHUTDOWN - 604)) | (1L << (SUPER - 604)) | (1L << (PRIVILEGES - 604)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalTypeBaseContext extends ParserRuleContext {
		public TerminalNode QUARTER() { return getToken(MySqlParser.QUARTER, 0); }
		public TerminalNode MONTH() { return getToken(MySqlParser.MONTH, 0); }
		public TerminalNode DAY() { return getToken(MySqlParser.DAY, 0); }
		public TerminalNode HOUR() { return getToken(MySqlParser.HOUR, 0); }
		public TerminalNode MINUTE() { return getToken(MySqlParser.MINUTE, 0); }
		public TerminalNode WEEK() { return getToken(MySqlParser.WEEK, 0); }
		public TerminalNode SECOND() { return getToken(MySqlParser.SECOND, 0); }
		public TerminalNode MICROSECOND() { return getToken(MySqlParser.MICROSECOND, 0); }
		public IntervalTypeBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalTypeBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIntervalTypeBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIntervalTypeBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIntervalTypeBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalTypeBaseContext intervalTypeBase() throws RecognitionException {
		IntervalTypeBaseContext _localctx = new IntervalTypeBaseContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_intervalTypeBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2834);
			_la = _input.LA(1);
			if ( !(((((_la - 596)) & ~0x3f) == 0 && ((1L << (_la - 596)) & ((1L << (QUARTER - 596)) | (1L << (MONTH - 596)) | (1L << (DAY - 596)) | (1L << (HOUR - 596)) | (1L << (MINUTE - 596)) | (1L << (WEEK - 596)) | (1L << (SECOND - 596)) | (1L << (MICROSECOND - 596)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeBaseContext extends ParserRuleContext {
		public TerminalNode DATE() { return getToken(MySqlParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(MySqlParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(MySqlParser.TIMESTAMP, 0); }
		public TerminalNode DATETIME() { return getToken(MySqlParser.DATETIME, 0); }
		public TerminalNode YEAR() { return getToken(MySqlParser.YEAR, 0); }
		public TerminalNode ENUM() { return getToken(MySqlParser.ENUM, 0); }
		public TerminalNode TEXT() { return getToken(MySqlParser.TEXT, 0); }
		public DataTypeBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataTypeBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDataTypeBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDataTypeBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDataTypeBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeBaseContext dataTypeBase() throws RecognitionException {
		DataTypeBaseContext _localctx = new DataTypeBaseContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_dataTypeBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2836);
			_la = _input.LA(1);
			if ( !(((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (DATE - 199)) | (1L << (TIME - 199)) | (1L << (TIMESTAMP - 199)) | (1L << (DATETIME - 199)) | (1L << (YEAR - 199)) | (1L << (TEXT - 199)) | (1L << (ENUM - 199)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeywordsCanBeIdContext extends ParserRuleContext {
		public TerminalNode ACCOUNT() { return getToken(MySqlParser.ACCOUNT, 0); }
		public TerminalNode ACTION() { return getToken(MySqlParser.ACTION, 0); }
		public TerminalNode AFTER() { return getToken(MySqlParser.AFTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(MySqlParser.AGGREGATE, 0); }
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public TerminalNode ANY() { return getToken(MySqlParser.ANY, 0); }
		public TerminalNode AT() { return getToken(MySqlParser.AT, 0); }
		public TerminalNode AUDIT_ADMIN() { return getToken(MySqlParser.AUDIT_ADMIN, 0); }
		public TerminalNode AUTHORS() { return getToken(MySqlParser.AUTHORS, 0); }
		public TerminalNode AUTOCOMMIT() { return getToken(MySqlParser.AUTOCOMMIT, 0); }
		public TerminalNode AUTOEXTEND_SIZE() { return getToken(MySqlParser.AUTOEXTEND_SIZE, 0); }
		public TerminalNode AUTO_INCREMENT() { return getToken(MySqlParser.AUTO_INCREMENT, 0); }
		public TerminalNode AVG() { return getToken(MySqlParser.AVG, 0); }
		public TerminalNode AVG_ROW_LENGTH() { return getToken(MySqlParser.AVG_ROW_LENGTH, 0); }
		public TerminalNode BACKUP_ADMIN() { return getToken(MySqlParser.BACKUP_ADMIN, 0); }
		public TerminalNode BEGIN() { return getToken(MySqlParser.BEGIN, 0); }
		public TerminalNode BINLOG() { return getToken(MySqlParser.BINLOG, 0); }
		public TerminalNode BINLOG_ADMIN() { return getToken(MySqlParser.BINLOG_ADMIN, 0); }
		public TerminalNode BINLOG_ENCRYPTION_ADMIN() { return getToken(MySqlParser.BINLOG_ENCRYPTION_ADMIN, 0); }
		public TerminalNode BIT() { return getToken(MySqlParser.BIT, 0); }
		public TerminalNode BIT_AND() { return getToken(MySqlParser.BIT_AND, 0); }
		public TerminalNode BIT_OR() { return getToken(MySqlParser.BIT_OR, 0); }
		public TerminalNode BIT_XOR() { return getToken(MySqlParser.BIT_XOR, 0); }
		public TerminalNode BLOCK() { return getToken(MySqlParser.BLOCK, 0); }
		public TerminalNode BOOL() { return getToken(MySqlParser.BOOL, 0); }
		public TerminalNode BOOLEAN() { return getToken(MySqlParser.BOOLEAN, 0); }
		public TerminalNode BTREE() { return getToken(MySqlParser.BTREE, 0); }
		public TerminalNode CACHE() { return getToken(MySqlParser.CACHE, 0); }
		public TerminalNode CASCADED() { return getToken(MySqlParser.CASCADED, 0); }
		public TerminalNode CHAIN() { return getToken(MySqlParser.CHAIN, 0); }
		public TerminalNode CHANGED() { return getToken(MySqlParser.CHANGED, 0); }
		public TerminalNode CHANNEL() { return getToken(MySqlParser.CHANNEL, 0); }
		public TerminalNode CHECKSUM() { return getToken(MySqlParser.CHECKSUM, 0); }
		public TerminalNode PAGE_CHECKSUM() { return getToken(MySqlParser.PAGE_CHECKSUM, 0); }
		public TerminalNode CATALOG_NAME() { return getToken(MySqlParser.CATALOG_NAME, 0); }
		public TerminalNode CIPHER() { return getToken(MySqlParser.CIPHER, 0); }
		public TerminalNode CLASS_ORIGIN() { return getToken(MySqlParser.CLASS_ORIGIN, 0); }
		public TerminalNode CLIENT() { return getToken(MySqlParser.CLIENT, 0); }
		public TerminalNode CLONE_ADMIN() { return getToken(MySqlParser.CLONE_ADMIN, 0); }
		public TerminalNode CLOSE() { return getToken(MySqlParser.CLOSE, 0); }
		public TerminalNode COALESCE() { return getToken(MySqlParser.COALESCE, 0); }
		public TerminalNode CODE() { return getToken(MySqlParser.CODE, 0); }
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public TerminalNode COLUMN_FORMAT() { return getToken(MySqlParser.COLUMN_FORMAT, 0); }
		public TerminalNode COLUMN_NAME() { return getToken(MySqlParser.COLUMN_NAME, 0); }
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode COMMIT() { return getToken(MySqlParser.COMMIT, 0); }
		public TerminalNode COMPACT() { return getToken(MySqlParser.COMPACT, 0); }
		public TerminalNode COMPLETION() { return getToken(MySqlParser.COMPLETION, 0); }
		public TerminalNode COMPRESSED() { return getToken(MySqlParser.COMPRESSED, 0); }
		public TerminalNode COMPRESSION() { return getToken(MySqlParser.COMPRESSION, 0); }
		public TerminalNode CONCURRENT() { return getToken(MySqlParser.CONCURRENT, 0); }
		public TerminalNode CONNECTION() { return getToken(MySqlParser.CONNECTION, 0); }
		public TerminalNode CONNECTION_ADMIN() { return getToken(MySqlParser.CONNECTION_ADMIN, 0); }
		public TerminalNode CONSISTENT() { return getToken(MySqlParser.CONSISTENT, 0); }
		public TerminalNode CONSTRAINT_CATALOG() { return getToken(MySqlParser.CONSTRAINT_CATALOG, 0); }
		public TerminalNode CONSTRAINT_NAME() { return getToken(MySqlParser.CONSTRAINT_NAME, 0); }
		public TerminalNode CONSTRAINT_SCHEMA() { return getToken(MySqlParser.CONSTRAINT_SCHEMA, 0); }
		public TerminalNode CONTAINS() { return getToken(MySqlParser.CONTAINS, 0); }
		public TerminalNode CONTEXT() { return getToken(MySqlParser.CONTEXT, 0); }
		public TerminalNode CONTRIBUTORS() { return getToken(MySqlParser.CONTRIBUTORS, 0); }
		public TerminalNode COPY() { return getToken(MySqlParser.COPY, 0); }
		public TerminalNode COUNT() { return getToken(MySqlParser.COUNT, 0); }
		public TerminalNode CPU() { return getToken(MySqlParser.CPU, 0); }
		public TerminalNode CURRENT() { return getToken(MySqlParser.CURRENT, 0); }
		public TerminalNode CURSOR_NAME() { return getToken(MySqlParser.CURSOR_NAME, 0); }
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode DATAFILE() { return getToken(MySqlParser.DATAFILE, 0); }
		public TerminalNode DEALLOCATE() { return getToken(MySqlParser.DEALLOCATE, 0); }
		public TerminalNode DEFAULT_AUTH() { return getToken(MySqlParser.DEFAULT_AUTH, 0); }
		public TerminalNode DEFINER() { return getToken(MySqlParser.DEFINER, 0); }
		public TerminalNode DELAY_KEY_WRITE() { return getToken(MySqlParser.DELAY_KEY_WRITE, 0); }
		public TerminalNode DES_KEY_FILE() { return getToken(MySqlParser.DES_KEY_FILE, 0); }
		public TerminalNode DIAGNOSTICS() { return getToken(MySqlParser.DIAGNOSTICS, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySqlParser.DIRECTORY, 0); }
		public TerminalNode DISABLE() { return getToken(MySqlParser.DISABLE, 0); }
		public TerminalNode DISCARD() { return getToken(MySqlParser.DISCARD, 0); }
		public TerminalNode DISK() { return getToken(MySqlParser.DISK, 0); }
		public TerminalNode DO() { return getToken(MySqlParser.DO, 0); }
		public TerminalNode DUMPFILE() { return getToken(MySqlParser.DUMPFILE, 0); }
		public TerminalNode DUPLICATE() { return getToken(MySqlParser.DUPLICATE, 0); }
		public TerminalNode DYNAMIC() { return getToken(MySqlParser.DYNAMIC, 0); }
		public TerminalNode ENABLE() { return getToken(MySqlParser.ENABLE, 0); }
		public TerminalNode ENCRYPTION() { return getToken(MySqlParser.ENCRYPTION, 0); }
		public TerminalNode ENCRYPTION_KEY_ADMIN() { return getToken(MySqlParser.ENCRYPTION_KEY_ADMIN, 0); }
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public TerminalNode ENDS() { return getToken(MySqlParser.ENDS, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public TerminalNode ENGINES() { return getToken(MySqlParser.ENGINES, 0); }
		public TerminalNode ERROR() { return getToken(MySqlParser.ERROR, 0); }
		public TerminalNode ERRORS() { return getToken(MySqlParser.ERRORS, 0); }
		public TerminalNode ESCAPE() { return getToken(MySqlParser.ESCAPE, 0); }
		public TerminalNode EVEN() { return getToken(MySqlParser.EVEN, 0); }
		public TerminalNode EVENT() { return getToken(MySqlParser.EVENT, 0); }
		public TerminalNode EVENTS() { return getToken(MySqlParser.EVENTS, 0); }
		public TerminalNode EVERY() { return getToken(MySqlParser.EVERY, 0); }
		public TerminalNode EXCHANGE() { return getToken(MySqlParser.EXCHANGE, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(MySqlParser.EXCLUSIVE, 0); }
		public TerminalNode EXPIRE() { return getToken(MySqlParser.EXPIRE, 0); }
		public TerminalNode EXPORT() { return getToken(MySqlParser.EXPORT, 0); }
		public TerminalNode EXTENDED() { return getToken(MySqlParser.EXTENDED, 0); }
		public TerminalNode EXTENT_SIZE() { return getToken(MySqlParser.EXTENT_SIZE, 0); }
		public TerminalNode FAST() { return getToken(MySqlParser.FAST, 0); }
		public TerminalNode FAULTS() { return getToken(MySqlParser.FAULTS, 0); }
		public TerminalNode FIELDS() { return getToken(MySqlParser.FIELDS, 0); }
		public TerminalNode FILE_BLOCK_SIZE() { return getToken(MySqlParser.FILE_BLOCK_SIZE, 0); }
		public TerminalNode FILTER() { return getToken(MySqlParser.FILTER, 0); }
		public TerminalNode FIREWALL_ADMIN() { return getToken(MySqlParser.FIREWALL_ADMIN, 0); }
		public TerminalNode FIREWALL_USER() { return getToken(MySqlParser.FIREWALL_USER, 0); }
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode FIXED() { return getToken(MySqlParser.FIXED, 0); }
		public TerminalNode FLUSH() { return getToken(MySqlParser.FLUSH, 0); }
		public TerminalNode FOLLOWS() { return getToken(MySqlParser.FOLLOWS, 0); }
		public TerminalNode FOUND() { return getToken(MySqlParser.FOUND, 0); }
		public TerminalNode FULL() { return getToken(MySqlParser.FULL, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public TerminalNode GENERAL() { return getToken(MySqlParser.GENERAL, 0); }
		public TerminalNode GLOBAL() { return getToken(MySqlParser.GLOBAL, 0); }
		public TerminalNode GRANTS() { return getToken(MySqlParser.GRANTS, 0); }
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public TerminalNode GROUP_CONCAT() { return getToken(MySqlParser.GROUP_CONCAT, 0); }
		public TerminalNode GROUP_REPLICATION() { return getToken(MySqlParser.GROUP_REPLICATION, 0); }
		public TerminalNode GROUP_REPLICATION_ADMIN() { return getToken(MySqlParser.GROUP_REPLICATION_ADMIN, 0); }
		public TerminalNode HANDLER() { return getToken(MySqlParser.HANDLER, 0); }
		public TerminalNode HASH() { return getToken(MySqlParser.HASH, 0); }
		public TerminalNode HELP() { return getToken(MySqlParser.HELP, 0); }
		public TerminalNode HOST() { return getToken(MySqlParser.HOST, 0); }
		public TerminalNode HOSTS() { return getToken(MySqlParser.HOSTS, 0); }
		public TerminalNode IDENTIFIED() { return getToken(MySqlParser.IDENTIFIED, 0); }
		public TerminalNode IGNORE_SERVER_IDS() { return getToken(MySqlParser.IGNORE_SERVER_IDS, 0); }
		public TerminalNode IMPORT() { return getToken(MySqlParser.IMPORT, 0); }
		public TerminalNode INDEXES() { return getToken(MySqlParser.INDEXES, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(MySqlParser.INITIAL_SIZE, 0); }
		public TerminalNode INNODB_REDO_LOG_ARCHIVE() { return getToken(MySqlParser.INNODB_REDO_LOG_ARCHIVE, 0); }
		public TerminalNode INPLACE() { return getToken(MySqlParser.INPLACE, 0); }
		public TerminalNode INSERT_METHOD() { return getToken(MySqlParser.INSERT_METHOD, 0); }
		public TerminalNode INSTALL() { return getToken(MySqlParser.INSTALL, 0); }
		public TerminalNode INSTANCE() { return getToken(MySqlParser.INSTANCE, 0); }
		public TerminalNode INTERNAL() { return getToken(MySqlParser.INTERNAL, 0); }
		public TerminalNode INVOKER() { return getToken(MySqlParser.INVOKER, 0); }
		public TerminalNode IO() { return getToken(MySqlParser.IO, 0); }
		public TerminalNode IO_THREAD() { return getToken(MySqlParser.IO_THREAD, 0); }
		public TerminalNode IPC() { return getToken(MySqlParser.IPC, 0); }
		public TerminalNode ISOLATION() { return getToken(MySqlParser.ISOLATION, 0); }
		public TerminalNode ISSUER() { return getToken(MySqlParser.ISSUER, 0); }
		public TerminalNode JSON() { return getToken(MySqlParser.JSON, 0); }
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
		public TerminalNode LANGUAGE() { return getToken(MySqlParser.LANGUAGE, 0); }
		public TerminalNode LAST() { return getToken(MySqlParser.LAST, 0); }
		public TerminalNode LEAVES() { return getToken(MySqlParser.LEAVES, 0); }
		public TerminalNode LESS() { return getToken(MySqlParser.LESS, 0); }
		public TerminalNode LEVEL() { return getToken(MySqlParser.LEVEL, 0); }
		public TerminalNode LIST() { return getToken(MySqlParser.LIST, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public TerminalNode LOGFILE() { return getToken(MySqlParser.LOGFILE, 0); }
		public TerminalNode LOGS() { return getToken(MySqlParser.LOGS, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public TerminalNode MASTER_AUTO_POSITION() { return getToken(MySqlParser.MASTER_AUTO_POSITION, 0); }
		public TerminalNode MASTER_CONNECT_RETRY() { return getToken(MySqlParser.MASTER_CONNECT_RETRY, 0); }
		public TerminalNode MASTER_DELAY() { return getToken(MySqlParser.MASTER_DELAY, 0); }
		public TerminalNode MASTER_HEARTBEAT_PERIOD() { return getToken(MySqlParser.MASTER_HEARTBEAT_PERIOD, 0); }
		public TerminalNode MASTER_HOST() { return getToken(MySqlParser.MASTER_HOST, 0); }
		public TerminalNode MASTER_LOG_FILE() { return getToken(MySqlParser.MASTER_LOG_FILE, 0); }
		public TerminalNode MASTER_LOG_POS() { return getToken(MySqlParser.MASTER_LOG_POS, 0); }
		public TerminalNode MASTER_PASSWORD() { return getToken(MySqlParser.MASTER_PASSWORD, 0); }
		public TerminalNode MASTER_PORT() { return getToken(MySqlParser.MASTER_PORT, 0); }
		public TerminalNode MASTER_RETRY_COUNT() { return getToken(MySqlParser.MASTER_RETRY_COUNT, 0); }
		public TerminalNode MASTER_SSL() { return getToken(MySqlParser.MASTER_SSL, 0); }
		public TerminalNode MASTER_SSL_CA() { return getToken(MySqlParser.MASTER_SSL_CA, 0); }
		public TerminalNode MASTER_SSL_CAPATH() { return getToken(MySqlParser.MASTER_SSL_CAPATH, 0); }
		public TerminalNode MASTER_SSL_CERT() { return getToken(MySqlParser.MASTER_SSL_CERT, 0); }
		public TerminalNode MASTER_SSL_CIPHER() { return getToken(MySqlParser.MASTER_SSL_CIPHER, 0); }
		public TerminalNode MASTER_SSL_CRL() { return getToken(MySqlParser.MASTER_SSL_CRL, 0); }
		public TerminalNode MASTER_SSL_CRLPATH() { return getToken(MySqlParser.MASTER_SSL_CRLPATH, 0); }
		public TerminalNode MASTER_SSL_KEY() { return getToken(MySqlParser.MASTER_SSL_KEY, 0); }
		public TerminalNode MASTER_TLS_VERSION() { return getToken(MySqlParser.MASTER_TLS_VERSION, 0); }
		public TerminalNode MASTER_USER() { return getToken(MySqlParser.MASTER_USER, 0); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR() { return getToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR, 0); }
		public TerminalNode MAX_QUERIES_PER_HOUR() { return getToken(MySqlParser.MAX_QUERIES_PER_HOUR, 0); }
		public TerminalNode MAX() { return getToken(MySqlParser.MAX, 0); }
		public TerminalNode MAX_ROWS() { return getToken(MySqlParser.MAX_ROWS, 0); }
		public TerminalNode MAX_SIZE() { return getToken(MySqlParser.MAX_SIZE, 0); }
		public TerminalNode MAX_UPDATES_PER_HOUR() { return getToken(MySqlParser.MAX_UPDATES_PER_HOUR, 0); }
		public TerminalNode MAX_USER_CONNECTIONS() { return getToken(MySqlParser.MAX_USER_CONNECTIONS, 0); }
		public TerminalNode MEDIUM() { return getToken(MySqlParser.MEDIUM, 0); }
		public TerminalNode MEMBER() { return getToken(MySqlParser.MEMBER, 0); }
		public TerminalNode MEMORY() { return getToken(MySqlParser.MEMORY, 0); }
		public TerminalNode MERGE() { return getToken(MySqlParser.MERGE, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(MySqlParser.MESSAGE_TEXT, 0); }
		public TerminalNode MID() { return getToken(MySqlParser.MID, 0); }
		public TerminalNode MIGRATE() { return getToken(MySqlParser.MIGRATE, 0); }
		public TerminalNode MIN() { return getToken(MySqlParser.MIN, 0); }
		public TerminalNode MIN_ROWS() { return getToken(MySqlParser.MIN_ROWS, 0); }
		public TerminalNode MODE() { return getToken(MySqlParser.MODE, 0); }
		public TerminalNode MODIFY() { return getToken(MySqlParser.MODIFY, 0); }
		public TerminalNode MUTEX() { return getToken(MySqlParser.MUTEX, 0); }
		public TerminalNode MYSQL() { return getToken(MySqlParser.MYSQL, 0); }
		public TerminalNode MYSQL_ERRNO() { return getToken(MySqlParser.MYSQL_ERRNO, 0); }
		public TerminalNode NAME() { return getToken(MySqlParser.NAME, 0); }
		public TerminalNode NAMES() { return getToken(MySqlParser.NAMES, 0); }
		public TerminalNode NCHAR() { return getToken(MySqlParser.NCHAR, 0); }
		public TerminalNode NDB_STORED_USER() { return getToken(MySqlParser.NDB_STORED_USER, 0); }
		public TerminalNode NEVER() { return getToken(MySqlParser.NEVER, 0); }
		public TerminalNode NEXT() { return getToken(MySqlParser.NEXT, 0); }
		public TerminalNode NO() { return getToken(MySqlParser.NO, 0); }
		public TerminalNode NODEGROUP() { return getToken(MySqlParser.NODEGROUP, 0); }
		public TerminalNode NONE() { return getToken(MySqlParser.NONE, 0); }
		public TerminalNode NUMBER() { return getToken(MySqlParser.NUMBER, 0); }
		public TerminalNode OFFLINE() { return getToken(MySqlParser.OFFLINE, 0); }
		public TerminalNode OFFSET() { return getToken(MySqlParser.OFFSET, 0); }
		public TerminalNode OF() { return getToken(MySqlParser.OF, 0); }
		public TerminalNode OJ() { return getToken(MySqlParser.OJ, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(MySqlParser.OLD_PASSWORD, 0); }
		public TerminalNode ONE() { return getToken(MySqlParser.ONE, 0); }
		public TerminalNode ONLINE() { return getToken(MySqlParser.ONLINE, 0); }
		public TerminalNode ONLY() { return getToken(MySqlParser.ONLY, 0); }
		public TerminalNode OPEN() { return getToken(MySqlParser.OPEN, 0); }
		public TerminalNode OPTIMIZER_COSTS() { return getToken(MySqlParser.OPTIMIZER_COSTS, 0); }
		public TerminalNode OPTIONS() { return getToken(MySqlParser.OPTIONS, 0); }
		public TerminalNode ORDER() { return getToken(MySqlParser.ORDER, 0); }
		public TerminalNode OWNER() { return getToken(MySqlParser.OWNER, 0); }
		public TerminalNode PACK_KEYS() { return getToken(MySqlParser.PACK_KEYS, 0); }
		public TerminalNode PAGE() { return getToken(MySqlParser.PAGE, 0); }
		public TerminalNode PARSER() { return getToken(MySqlParser.PARSER, 0); }
		public TerminalNode PARTIAL() { return getToken(MySqlParser.PARTIAL, 0); }
		public TerminalNode PARTITIONING() { return getToken(MySqlParser.PARTITIONING, 0); }
		public TerminalNode PARTITIONS() { return getToken(MySqlParser.PARTITIONS, 0); }
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode PERSIST_RO_VARIABLES_ADMIN() { return getToken(MySqlParser.PERSIST_RO_VARIABLES_ADMIN, 0); }
		public TerminalNode PHASE() { return getToken(MySqlParser.PHASE, 0); }
		public TerminalNode PLUGINS() { return getToken(MySqlParser.PLUGINS, 0); }
		public TerminalNode PLUGIN_DIR() { return getToken(MySqlParser.PLUGIN_DIR, 0); }
		public TerminalNode PLUGIN() { return getToken(MySqlParser.PLUGIN, 0); }
		public TerminalNode PORT() { return getToken(MySqlParser.PORT, 0); }
		public TerminalNode PRECEDES() { return getToken(MySqlParser.PRECEDES, 0); }
		public TerminalNode PREPARE() { return getToken(MySqlParser.PREPARE, 0); }
		public TerminalNode PRESERVE() { return getToken(MySqlParser.PRESERVE, 0); }
		public TerminalNode PREV() { return getToken(MySqlParser.PREV, 0); }
		public TerminalNode PROCESSLIST() { return getToken(MySqlParser.PROCESSLIST, 0); }
		public TerminalNode PROFILE() { return getToken(MySqlParser.PROFILE, 0); }
		public TerminalNode PROFILES() { return getToken(MySqlParser.PROFILES, 0); }
		public TerminalNode PROXY() { return getToken(MySqlParser.PROXY, 0); }
		public TerminalNode QUERY() { return getToken(MySqlParser.QUERY, 0); }
		public TerminalNode QUICK() { return getToken(MySqlParser.QUICK, 0); }
		public TerminalNode REBUILD() { return getToken(MySqlParser.REBUILD, 0); }
		public TerminalNode RECOVER() { return getToken(MySqlParser.RECOVER, 0); }
		public TerminalNode REDO_BUFFER_SIZE() { return getToken(MySqlParser.REDO_BUFFER_SIZE, 0); }
		public TerminalNode REDUNDANT() { return getToken(MySqlParser.REDUNDANT, 0); }
		public TerminalNode RELAY() { return getToken(MySqlParser.RELAY, 0); }
		public TerminalNode RELAYLOG() { return getToken(MySqlParser.RELAYLOG, 0); }
		public TerminalNode RELAY_LOG_FILE() { return getToken(MySqlParser.RELAY_LOG_FILE, 0); }
		public TerminalNode RELAY_LOG_POS() { return getToken(MySqlParser.RELAY_LOG_POS, 0); }
		public TerminalNode REMOVE() { return getToken(MySqlParser.REMOVE, 0); }
		public TerminalNode REORGANIZE() { return getToken(MySqlParser.REORGANIZE, 0); }
		public TerminalNode REPAIR() { return getToken(MySqlParser.REPAIR, 0); }
		public TerminalNode REPLICATE_DO_DB() { return getToken(MySqlParser.REPLICATE_DO_DB, 0); }
		public TerminalNode REPLICATE_DO_TABLE() { return getToken(MySqlParser.REPLICATE_DO_TABLE, 0); }
		public TerminalNode REPLICATE_IGNORE_DB() { return getToken(MySqlParser.REPLICATE_IGNORE_DB, 0); }
		public TerminalNode REPLICATE_IGNORE_TABLE() { return getToken(MySqlParser.REPLICATE_IGNORE_TABLE, 0); }
		public TerminalNode REPLICATE_REWRITE_DB() { return getToken(MySqlParser.REPLICATE_REWRITE_DB, 0); }
		public TerminalNode REPLICATE_WILD_DO_TABLE() { return getToken(MySqlParser.REPLICATE_WILD_DO_TABLE, 0); }
		public TerminalNode REPLICATE_WILD_IGNORE_TABLE() { return getToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE, 0); }
		public TerminalNode REPLICATION() { return getToken(MySqlParser.REPLICATION, 0); }
		public TerminalNode REPLICATION_APPLIER() { return getToken(MySqlParser.REPLICATION_APPLIER, 0); }
		public TerminalNode REPLICATION_SLAVE_ADMIN() { return getToken(MySqlParser.REPLICATION_SLAVE_ADMIN, 0); }
		public TerminalNode RESET() { return getToken(MySqlParser.RESET, 0); }
		public TerminalNode RESOURCE_GROUP_ADMIN() { return getToken(MySqlParser.RESOURCE_GROUP_ADMIN, 0); }
		public TerminalNode RESOURCE_GROUP_USER() { return getToken(MySqlParser.RESOURCE_GROUP_USER, 0); }
		public TerminalNode RESUME() { return getToken(MySqlParser.RESUME, 0); }
		public TerminalNode RETURNED_SQLSTATE() { return getToken(MySqlParser.RETURNED_SQLSTATE, 0); }
		public TerminalNode RETURNS() { return getToken(MySqlParser.RETURNS, 0); }
		public TerminalNode ROLE() { return getToken(MySqlParser.ROLE, 0); }
		public TerminalNode ROLE_ADMIN() { return getToken(MySqlParser.ROLE_ADMIN, 0); }
		public TerminalNode ROLLBACK() { return getToken(MySqlParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(MySqlParser.ROLLUP, 0); }
		public TerminalNode ROTATE() { return getToken(MySqlParser.ROTATE, 0); }
		public TerminalNode ROW() { return getToken(MySqlParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(MySqlParser.ROWS, 0); }
		public TerminalNode ROW_FORMAT() { return getToken(MySqlParser.ROW_FORMAT, 0); }
		public TerminalNode SAVEPOINT() { return getToken(MySqlParser.SAVEPOINT, 0); }
		public TerminalNode SCHEDULE() { return getToken(MySqlParser.SCHEDULE, 0); }
		public TerminalNode SCHEMA_NAME() { return getToken(MySqlParser.SCHEMA_NAME, 0); }
		public TerminalNode SECURITY() { return getToken(MySqlParser.SECURITY, 0); }
		public TerminalNode SERIAL() { return getToken(MySqlParser.SERIAL, 0); }
		public TerminalNode SERVER() { return getToken(MySqlParser.SERVER, 0); }
		public TerminalNode SESSION() { return getToken(MySqlParser.SESSION, 0); }
		public TerminalNode SESSION_VARIABLES_ADMIN() { return getToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0); }
		public TerminalNode SET_USER_ID() { return getToken(MySqlParser.SET_USER_ID, 0); }
		public TerminalNode SHARE() { return getToken(MySqlParser.SHARE, 0); }
		public TerminalNode SHARED() { return getToken(MySqlParser.SHARED, 0); }
		public TerminalNode SHOW_ROUTINE() { return getToken(MySqlParser.SHOW_ROUTINE, 0); }
		public TerminalNode SIGNED() { return getToken(MySqlParser.SIGNED, 0); }
		public TerminalNode SIMPLE() { return getToken(MySqlParser.SIMPLE, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public TerminalNode SLOW() { return getToken(MySqlParser.SLOW, 0); }
		public TerminalNode SNAPSHOT() { return getToken(MySqlParser.SNAPSHOT, 0); }
		public TerminalNode SOCKET() { return getToken(MySqlParser.SOCKET, 0); }
		public TerminalNode SOME() { return getToken(MySqlParser.SOME, 0); }
		public TerminalNode SONAME() { return getToken(MySqlParser.SONAME, 0); }
		public TerminalNode SOUNDS() { return getToken(MySqlParser.SOUNDS, 0); }
		public TerminalNode SOURCE() { return getToken(MySqlParser.SOURCE, 0); }
		public TerminalNode SQL_AFTER_GTIDS() { return getToken(MySqlParser.SQL_AFTER_GTIDS, 0); }
		public TerminalNode SQL_AFTER_MTS_GAPS() { return getToken(MySqlParser.SQL_AFTER_MTS_GAPS, 0); }
		public TerminalNode SQL_BEFORE_GTIDS() { return getToken(MySqlParser.SQL_BEFORE_GTIDS, 0); }
		public TerminalNode SQL_BUFFER_RESULT() { return getToken(MySqlParser.SQL_BUFFER_RESULT, 0); }
		public TerminalNode SQL_CACHE() { return getToken(MySqlParser.SQL_CACHE, 0); }
		public TerminalNode SQL_NO_CACHE() { return getToken(MySqlParser.SQL_NO_CACHE, 0); }
		public TerminalNode SQL_THREAD() { return getToken(MySqlParser.SQL_THREAD, 0); }
		public TerminalNode STACKED() { return getToken(MySqlParser.STACKED, 0); }
		public TerminalNode START() { return getToken(MySqlParser.START, 0); }
		public TerminalNode STARTS() { return getToken(MySqlParser.STARTS, 0); }
		public TerminalNode STATS_AUTO_RECALC() { return getToken(MySqlParser.STATS_AUTO_RECALC, 0); }
		public TerminalNode STATS_PERSISTENT() { return getToken(MySqlParser.STATS_PERSISTENT, 0); }
		public TerminalNode STATS_SAMPLE_PAGES() { return getToken(MySqlParser.STATS_SAMPLE_PAGES, 0); }
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode STD() { return getToken(MySqlParser.STD, 0); }
		public TerminalNode STDDEV() { return getToken(MySqlParser.STDDEV, 0); }
		public TerminalNode STDDEV_POP() { return getToken(MySqlParser.STDDEV_POP, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(MySqlParser.STDDEV_SAMP, 0); }
		public TerminalNode STOP() { return getToken(MySqlParser.STOP, 0); }
		public TerminalNode STORAGE() { return getToken(MySqlParser.STORAGE, 0); }
		public TerminalNode STRING() { return getToken(MySqlParser.STRING, 0); }
		public TerminalNode SUBCLASS_ORIGIN() { return getToken(MySqlParser.SUBCLASS_ORIGIN, 0); }
		public TerminalNode SUBJECT() { return getToken(MySqlParser.SUBJECT, 0); }
		public TerminalNode SUBPARTITION() { return getToken(MySqlParser.SUBPARTITION, 0); }
		public TerminalNode SUBPARTITIONS() { return getToken(MySqlParser.SUBPARTITIONS, 0); }
		public TerminalNode SUM() { return getToken(MySqlParser.SUM, 0); }
		public TerminalNode SUSPEND() { return getToken(MySqlParser.SUSPEND, 0); }
		public TerminalNode SWAPS() { return getToken(MySqlParser.SWAPS, 0); }
		public TerminalNode SWITCHES() { return getToken(MySqlParser.SWITCHES, 0); }
		public TerminalNode SYSTEM_VARIABLES_ADMIN() { return getToken(MySqlParser.SYSTEM_VARIABLES_ADMIN, 0); }
		public TerminalNode TABLE_NAME() { return getToken(MySqlParser.TABLE_NAME, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public TerminalNode TABLE_ENCRYPTION_ADMIN() { return getToken(MySqlParser.TABLE_ENCRYPTION_ADMIN, 0); }
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public TerminalNode TEMPTABLE() { return getToken(MySqlParser.TEMPTABLE, 0); }
		public TerminalNode THAN() { return getToken(MySqlParser.THAN, 0); }
		public TerminalNode TRADITIONAL() { return getToken(MySqlParser.TRADITIONAL, 0); }
		public TerminalNode TRANSACTION() { return getToken(MySqlParser.TRANSACTION, 0); }
		public TerminalNode TRANSACTIONAL() { return getToken(MySqlParser.TRANSACTIONAL, 0); }
		public TerminalNode TRIGGERS() { return getToken(MySqlParser.TRIGGERS, 0); }
		public TerminalNode TRUNCATE() { return getToken(MySqlParser.TRUNCATE, 0); }
		public TerminalNode UNDEFINED() { return getToken(MySqlParser.UNDEFINED, 0); }
		public TerminalNode UNDOFILE() { return getToken(MySqlParser.UNDOFILE, 0); }
		public TerminalNode UNDO_BUFFER_SIZE() { return getToken(MySqlParser.UNDO_BUFFER_SIZE, 0); }
		public TerminalNode UNINSTALL() { return getToken(MySqlParser.UNINSTALL, 0); }
		public TerminalNode UNKNOWN() { return getToken(MySqlParser.UNKNOWN, 0); }
		public TerminalNode UNTIL() { return getToken(MySqlParser.UNTIL, 0); }
		public TerminalNode UPGRADE() { return getToken(MySqlParser.UPGRADE, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public TerminalNode USE_FRM() { return getToken(MySqlParser.USE_FRM, 0); }
		public TerminalNode USER_RESOURCES() { return getToken(MySqlParser.USER_RESOURCES, 0); }
		public TerminalNode VALIDATION() { return getToken(MySqlParser.VALIDATION, 0); }
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public TerminalNode VAR_POP() { return getToken(MySqlParser.VAR_POP, 0); }
		public TerminalNode VAR_SAMP() { return getToken(MySqlParser.VAR_SAMP, 0); }
		public TerminalNode VARIABLES() { return getToken(MySqlParser.VARIABLES, 0); }
		public TerminalNode VARIANCE() { return getToken(MySqlParser.VARIANCE, 0); }
		public TerminalNode VERSION_TOKEN_ADMIN() { return getToken(MySqlParser.VERSION_TOKEN_ADMIN, 0); }
		public TerminalNode VIEW() { return getToken(MySqlParser.VIEW, 0); }
		public TerminalNode WAIT() { return getToken(MySqlParser.WAIT, 0); }
		public TerminalNode WARNINGS() { return getToken(MySqlParser.WARNINGS, 0); }
		public TerminalNode WITHOUT() { return getToken(MySqlParser.WITHOUT, 0); }
		public TerminalNode WORK() { return getToken(MySqlParser.WORK, 0); }
		public TerminalNode WRAPPER() { return getToken(MySqlParser.WRAPPER, 0); }
		public TerminalNode X509() { return getToken(MySqlParser.X509, 0); }
		public TerminalNode XA() { return getToken(MySqlParser.XA, 0); }
		public TerminalNode XA_RECOVER_ADMIN() { return getToken(MySqlParser.XA_RECOVER_ADMIN, 0); }
		public TerminalNode XML() { return getToken(MySqlParser.XML, 0); }
		public KeywordsCanBeIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keywordsCanBeId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterKeywordsCanBeId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitKeywordsCanBeId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitKeywordsCanBeId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeywordsCanBeIdContext keywordsCanBeId() throws RecognitionException {
		KeywordsCanBeIdContext _localctx = new KeywordsCanBeIdContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_keywordsCanBeId);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2838);
			_la = _input.LA(1);
			if ( !(((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (GROUP - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (ORDER - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 221)) & ~0x3f) == 0 && ((1L << (_la - 221)) & ((1L << (SERIAL - 221)) | (1L << (AVG - 221)) | (1L << (BIT_AND - 221)) | (1L << (BIT_OR - 221)) | (1L << (BIT_XOR - 221)) | (1L << (COUNT - 221)) | (1L << (GROUP_CONCAT - 221)) | (1L << (MAX - 221)) | (1L << (MIN - 221)) | (1L << (STD - 221)) | (1L << (STDDEV - 221)) | (1L << (STDDEV_POP - 221)) | (1L << (STDDEV_SAMP - 221)) | (1L << (SUM - 221)) | (1L << (VAR_POP - 221)) | (1L << (VAR_SAMP - 221)) | (1L << (VARIANCE - 221)) | (1L << (ACCOUNT - 221)) | (1L << (ACTION - 221)) | (1L << (AFTER - 221)) | (1L << (AGGREGATE - 221)) | (1L << (ALGORITHM - 221)) | (1L << (ANY - 221)) | (1L << (AT - 221)) | (1L << (AUTHORS - 221)) | (1L << (AUTOCOMMIT - 221)) | (1L << (AUTOEXTEND_SIZE - 221)) | (1L << (AUTO_INCREMENT - 221)) | (1L << (AVG_ROW_LENGTH - 221)) | (1L << (BEGIN - 221)) | (1L << (BINLOG - 221)) | (1L << (BIT - 221)))) != 0) || ((((_la - 285)) & ~0x3f) == 0 && ((1L << (_la - 285)) & ((1L << (BLOCK - 285)) | (1L << (BOOL - 285)) | (1L << (BOOLEAN - 285)) | (1L << (BTREE - 285)) | (1L << (CACHE - 285)) | (1L << (CASCADED - 285)) | (1L << (CHAIN - 285)) | (1L << (CHANGED - 285)) | (1L << (CHANNEL - 285)) | (1L << (CHECKSUM - 285)) | (1L << (PAGE_CHECKSUM - 285)) | (1L << (CIPHER - 285)) | (1L << (CLASS_ORIGIN - 285)) | (1L << (CLIENT - 285)) | (1L << (CLOSE - 285)) | (1L << (COALESCE - 285)) | (1L << (CODE - 285)) | (1L << (COLUMNS - 285)) | (1L << (COLUMN_FORMAT - 285)) | (1L << (COLUMN_NAME - 285)) | (1L << (COMMENT - 285)) | (1L << (COMMIT - 285)) | (1L << (COMPACT - 285)) | (1L << (COMPLETION - 285)) | (1L << (COMPRESSED - 285)) | (1L << (COMPRESSION - 285)) | (1L << (CONCURRENT - 285)) | (1L << (CONNECTION - 285)) | (1L << (CONSISTENT - 285)) | (1L << (CONSTRAINT_CATALOG - 285)) | (1L << (CONSTRAINT_SCHEMA - 285)) | (1L << (CONSTRAINT_NAME - 285)) | (1L << (CONTAINS - 285)) | (1L << (CONTEXT - 285)) | (1L << (CONTRIBUTORS - 285)) | (1L << (COPY - 285)) | (1L << (CPU - 285)) | (1L << (CURSOR_NAME - 285)) | (1L << (DATA - 285)) | (1L << (DATAFILE - 285)) | (1L << (DEALLOCATE - 285)) | (1L << (DEFAULT_AUTH - 285)) | (1L << (DEFINER - 285)) | (1L << (DELAY_KEY_WRITE - 285)) | (1L << (DES_KEY_FILE - 285)) | (1L << (DIRECTORY - 285)) | (1L << (DISABLE - 285)) | (1L << (DISCARD - 285)) | (1L << (DISK - 285)) | (1L << (DO - 285)) | (1L << (DUMPFILE - 285)) | (1L << (DUPLICATE - 285)) | (1L << (DYNAMIC - 285)) | (1L << (ENABLE - 285)) | (1L << (ENCRYPTION - 285)) | (1L << (END - 285)) | (1L << (ENDS - 285)) | (1L << (ENGINE - 285)) | (1L << (ENGINES - 285)) | (1L << (ERROR - 285)) | (1L << (ERRORS - 285)) | (1L << (ESCAPE - 285)) | (1L << (EVEN - 285)) | (1L << (EVENT - 285)))) != 0) || ((((_la - 349)) & ~0x3f) == 0 && ((1L << (_la - 349)) & ((1L << (EVENTS - 349)) | (1L << (EVERY - 349)) | (1L << (EXCHANGE - 349)) | (1L << (EXCLUSIVE - 349)) | (1L << (EXPIRE - 349)) | (1L << (EXPORT - 349)) | (1L << (EXTENDED - 349)) | (1L << (EXTENT_SIZE - 349)) | (1L << (FAST - 349)) | (1L << (FAULTS - 349)) | (1L << (FIELDS - 349)) | (1L << (FILE_BLOCK_SIZE - 349)) | (1L << (FILTER - 349)) | (1L << (FIRST - 349)) | (1L << (FIXED - 349)) | (1L << (FLUSH - 349)) | (1L << (FOLLOWS - 349)) | (1L << (FOUND - 349)) | (1L << (FULL - 349)) | (1L << (FUNCTION - 349)) | (1L << (GENERAL - 349)) | (1L << (GLOBAL - 349)) | (1L << (GRANTS - 349)) | (1L << (GROUP_REPLICATION - 349)) | (1L << (HANDLER - 349)) | (1L << (HASH - 349)) | (1L << (HELP - 349)) | (1L << (HOST - 349)) | (1L << (HOSTS - 349)) | (1L << (IDENTIFIED - 349)) | (1L << (IGNORE_SERVER_IDS - 349)) | (1L << (IMPORT - 349)) | (1L << (INDEXES - 349)) | (1L << (INITIAL_SIZE - 349)) | (1L << (INPLACE - 349)) | (1L << (INSERT_METHOD - 349)) | (1L << (INSTALL - 349)) | (1L << (INSTANCE - 349)) | (1L << (INVOKER - 349)) | (1L << (IO - 349)) | (1L << (IO_THREAD - 349)) | (1L << (IPC - 349)) | (1L << (ISOLATION - 349)) | (1L << (ISSUER - 349)) | (1L << (JSON - 349)) | (1L << (KEY_BLOCK_SIZE - 349)) | (1L << (LANGUAGE - 349)) | (1L << (LAST - 349)) | (1L << (LEAVES - 349)) | (1L << (LESS - 349)) | (1L << (LEVEL - 349)) | (1L << (LIST - 349)) | (1L << (LOCAL - 349)) | (1L << (LOGFILE - 349)) | (1L << (LOGS - 349)) | (1L << (MASTER - 349)) | (1L << (MASTER_AUTO_POSITION - 349)) | (1L << (MASTER_CONNECT_RETRY - 349)) | (1L << (MASTER_DELAY - 349)) | (1L << (MASTER_HEARTBEAT_PERIOD - 349)) | (1L << (MASTER_HOST - 349)) | (1L << (MASTER_LOG_FILE - 349)) | (1L << (MASTER_LOG_POS - 349)))) != 0) || ((((_la - 413)) & ~0x3f) == 0 && ((1L << (_la - 413)) & ((1L << (MASTER_PASSWORD - 413)) | (1L << (MASTER_PORT - 413)) | (1L << (MASTER_RETRY_COUNT - 413)) | (1L << (MASTER_SSL - 413)) | (1L << (MASTER_SSL_CA - 413)) | (1L << (MASTER_SSL_CAPATH - 413)) | (1L << (MASTER_SSL_CERT - 413)) | (1L << (MASTER_SSL_CIPHER - 413)) | (1L << (MASTER_SSL_CRL - 413)) | (1L << (MASTER_SSL_CRLPATH - 413)) | (1L << (MASTER_SSL_KEY - 413)) | (1L << (MASTER_TLS_VERSION - 413)) | (1L << (MASTER_USER - 413)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 413)) | (1L << (MAX_QUERIES_PER_HOUR - 413)) | (1L << (MAX_ROWS - 413)) | (1L << (MAX_SIZE - 413)) | (1L << (MAX_UPDATES_PER_HOUR - 413)) | (1L << (MAX_USER_CONNECTIONS - 413)) | (1L << (MEDIUM - 413)) | (1L << (MEMBER - 413)) | (1L << (MERGE - 413)) | (1L << (MESSAGE_TEXT - 413)) | (1L << (MID - 413)) | (1L << (MIGRATE - 413)) | (1L << (MIN_ROWS - 413)) | (1L << (MODE - 413)) | (1L << (MODIFY - 413)) | (1L << (MUTEX - 413)) | (1L << (MYSQL - 413)) | (1L << (MYSQL_ERRNO - 413)) | (1L << (NAME - 413)) | (1L << (NAMES - 413)) | (1L << (NCHAR - 413)) | (1L << (NEVER - 413)) | (1L << (NEXT - 413)) | (1L << (NO - 413)) | (1L << (NODEGROUP - 413)) | (1L << (NONE - 413)) | (1L << (OFFLINE - 413)) | (1L << (OFFSET - 413)) | (1L << (OF - 413)) | (1L << (OJ - 413)) | (1L << (OLD_PASSWORD - 413)) | (1L << (ONE - 413)) | (1L << (ONLINE - 413)) | (1L << (ONLY - 413)) | (1L << (OPEN - 413)) | (1L << (OPTIMIZER_COSTS - 413)) | (1L << (OPTIONS - 413)) | (1L << (OWNER - 413)) | (1L << (PACK_KEYS - 413)) | (1L << (PAGE - 413)) | (1L << (PARSER - 413)) | (1L << (PARTIAL - 413)) | (1L << (PARTITIONING - 413)) | (1L << (PARTITIONS - 413)) | (1L << (PASSWORD - 413)) | (1L << (PHASE - 413)) | (1L << (PLUGIN - 413)) | (1L << (PLUGIN_DIR - 413)) | (1L << (PLUGINS - 413)) | (1L << (PORT - 413)) | (1L << (PRECEDES - 413)))) != 0) || ((((_la - 477)) & ~0x3f) == 0 && ((1L << (_la - 477)) & ((1L << (PREPARE - 477)) | (1L << (PRESERVE - 477)) | (1L << (PREV - 477)) | (1L << (PROCESSLIST - 477)) | (1L << (PROFILE - 477)) | (1L << (PROFILES - 477)) | (1L << (PROXY - 477)) | (1L << (QUERY - 477)) | (1L << (QUICK - 477)) | (1L << (REBUILD - 477)) | (1L << (RECOVER - 477)) | (1L << (REDO_BUFFER_SIZE - 477)) | (1L << (REDUNDANT - 477)) | (1L << (RELAY - 477)) | (1L << (RELAY_LOG_FILE - 477)) | (1L << (RELAY_LOG_POS - 477)) | (1L << (RELAYLOG - 477)) | (1L << (REMOVE - 477)) | (1L << (REORGANIZE - 477)) | (1L << (REPAIR - 477)) | (1L << (REPLICATE_DO_DB - 477)) | (1L << (REPLICATE_DO_TABLE - 477)) | (1L << (REPLICATE_IGNORE_DB - 477)) | (1L << (REPLICATE_IGNORE_TABLE - 477)) | (1L << (REPLICATE_REWRITE_DB - 477)) | (1L << (REPLICATE_WILD_DO_TABLE - 477)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 477)) | (1L << (REPLICATION - 477)) | (1L << (RESET - 477)) | (1L << (RESUME - 477)) | (1L << (RETURNED_SQLSTATE - 477)) | (1L << (RETURNS - 477)) | (1L << (ROLE - 477)) | (1L << (ROLLBACK - 477)) | (1L << (ROLLUP - 477)) | (1L << (ROTATE - 477)) | (1L << (ROW - 477)) | (1L << (ROWS - 477)) | (1L << (ROW_FORMAT - 477)) | (1L << (SAVEPOINT - 477)) | (1L << (SCHEDULE - 477)) | (1L << (SECURITY - 477)) | (1L << (SERVER - 477)) | (1L << (SESSION - 477)) | (1L << (SHARE - 477)) | (1L << (SHARED - 477)) | (1L << (SIGNED - 477)) | (1L << (SIMPLE - 477)) | (1L << (SLAVE - 477)) | (1L << (SLOW - 477)) | (1L << (SNAPSHOT - 477)) | (1L << (SOCKET - 477)) | (1L << (SOME - 477)) | (1L << (SONAME - 477)) | (1L << (SOUNDS - 477)) | (1L << (SOURCE - 477)) | (1L << (SQL_AFTER_GTIDS - 477)) | (1L << (SQL_AFTER_MTS_GAPS - 477)) | (1L << (SQL_BEFORE_GTIDS - 477)) | (1L << (SQL_BUFFER_RESULT - 477)) | (1L << (SQL_CACHE - 477)) | (1L << (SQL_NO_CACHE - 477)) | (1L << (SQL_THREAD - 477)) | (1L << (START - 477)))) != 0) || ((((_la - 541)) & ~0x3f) == 0 && ((1L << (_la - 541)) & ((1L << (STARTS - 541)) | (1L << (STATS_AUTO_RECALC - 541)) | (1L << (STATS_PERSISTENT - 541)) | (1L << (STATS_SAMPLE_PAGES - 541)) | (1L << (STATUS - 541)) | (1L << (STOP - 541)) | (1L << (STORAGE - 541)) | (1L << (STRING - 541)) | (1L << (SUBCLASS_ORIGIN - 541)) | (1L << (SUBJECT - 541)) | (1L << (SUBPARTITION - 541)) | (1L << (SUBPARTITIONS - 541)) | (1L << (SUSPEND - 541)) | (1L << (SWAPS - 541)) | (1L << (SWITCHES - 541)) | (1L << (TABLE_NAME - 541)) | (1L << (TABLESPACE - 541)) | (1L << (TEMPORARY - 541)) | (1L << (TEMPTABLE - 541)) | (1L << (THAN - 541)) | (1L << (TRADITIONAL - 541)) | (1L << (TRANSACTION - 541)) | (1L << (TRANSACTIONAL - 541)) | (1L << (TRIGGERS - 541)) | (1L << (TRUNCATE - 541)) | (1L << (UNDEFINED - 541)) | (1L << (UNDOFILE - 541)) | (1L << (UNDO_BUFFER_SIZE - 541)) | (1L << (UNINSTALL - 541)) | (1L << (UNKNOWN - 541)) | (1L << (UNTIL - 541)) | (1L << (UPGRADE - 541)) | (1L << (USER - 541)) | (1L << (USE_FRM - 541)) | (1L << (USER_RESOURCES - 541)) | (1L << (VALIDATION - 541)) | (1L << (VALUE - 541)) | (1L << (VARIABLES - 541)) | (1L << (VIEW - 541)) | (1L << (WAIT - 541)) | (1L << (WARNINGS - 541)) | (1L << (WITHOUT - 541)) | (1L << (WORK - 541)) | (1L << (WRAPPER - 541)) | (1L << (X509 - 541)) | (1L << (XA - 541)) | (1L << (XML - 541)) | (1L << (INTERNAL - 541)))) != 0) || ((((_la - 614)) & ~0x3f) == 0 && ((1L << (_la - 614)) & ((1L << (AUDIT_ADMIN - 614)) | (1L << (BACKUP_ADMIN - 614)) | (1L << (BINLOG_ADMIN - 614)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 614)) | (1L << (CLONE_ADMIN - 614)) | (1L << (CONNECTION_ADMIN - 614)) | (1L << (ENCRYPTION_KEY_ADMIN - 614)) | (1L << (FIREWALL_ADMIN - 614)) | (1L << (FIREWALL_USER - 614)) | (1L << (GROUP_REPLICATION_ADMIN - 614)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 614)) | (1L << (NDB_STORED_USER - 614)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 614)) | (1L << (REPLICATION_APPLIER - 614)) | (1L << (REPLICATION_SLAVE_ADMIN - 614)) | (1L << (RESOURCE_GROUP_ADMIN - 614)) | (1L << (RESOURCE_GROUP_USER - 614)) | (1L << (ROLE_ADMIN - 614)) | (1L << (SESSION_VARIABLES_ADMIN - 614)) | (1L << (SET_USER_ID - 614)) | (1L << (SHOW_ROUTINE - 614)) | (1L << (SYSTEM_VARIABLES_ADMIN - 614)) | (1L << (TABLE_ENCRYPTION_ADMIN - 614)) | (1L << (VERSION_TOKEN_ADMIN - 614)) | (1L << (XA_RECOVER_ADMIN - 614)))) != 0) || _la==MEMORY || _la==CATALOG_NAME || _la==SCHEMA_NAME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionNameBaseContext extends ParserRuleContext {
		public TerminalNode ABS() { return getToken(MySqlParser.ABS, 0); }
		public TerminalNode ACOS() { return getToken(MySqlParser.ACOS, 0); }
		public TerminalNode ADDDATE() { return getToken(MySqlParser.ADDDATE, 0); }
		public TerminalNode ADDTIME() { return getToken(MySqlParser.ADDTIME, 0); }
		public TerminalNode AES_DECRYPT() { return getToken(MySqlParser.AES_DECRYPT, 0); }
		public TerminalNode AES_ENCRYPT() { return getToken(MySqlParser.AES_ENCRYPT, 0); }
		public TerminalNode AREA() { return getToken(MySqlParser.AREA, 0); }
		public TerminalNode ASBINARY() { return getToken(MySqlParser.ASBINARY, 0); }
		public TerminalNode ASIN() { return getToken(MySqlParser.ASIN, 0); }
		public TerminalNode ASTEXT() { return getToken(MySqlParser.ASTEXT, 0); }
		public TerminalNode ASWKB() { return getToken(MySqlParser.ASWKB, 0); }
		public TerminalNode ASWKT() { return getToken(MySqlParser.ASWKT, 0); }
		public TerminalNode ASYMMETRIC_DECRYPT() { return getToken(MySqlParser.ASYMMETRIC_DECRYPT, 0); }
		public TerminalNode ASYMMETRIC_DERIVE() { return getToken(MySqlParser.ASYMMETRIC_DERIVE, 0); }
		public TerminalNode ASYMMETRIC_ENCRYPT() { return getToken(MySqlParser.ASYMMETRIC_ENCRYPT, 0); }
		public TerminalNode ASYMMETRIC_SIGN() { return getToken(MySqlParser.ASYMMETRIC_SIGN, 0); }
		public TerminalNode ASYMMETRIC_VERIFY() { return getToken(MySqlParser.ASYMMETRIC_VERIFY, 0); }
		public TerminalNode ATAN() { return getToken(MySqlParser.ATAN, 0); }
		public TerminalNode ATAN2() { return getToken(MySqlParser.ATAN2, 0); }
		public TerminalNode BENCHMARK() { return getToken(MySqlParser.BENCHMARK, 0); }
		public TerminalNode BIN() { return getToken(MySqlParser.BIN, 0); }
		public TerminalNode BIT_COUNT() { return getToken(MySqlParser.BIT_COUNT, 0); }
		public TerminalNode BIT_LENGTH() { return getToken(MySqlParser.BIT_LENGTH, 0); }
		public TerminalNode BUFFER() { return getToken(MySqlParser.BUFFER, 0); }
		public TerminalNode CEIL() { return getToken(MySqlParser.CEIL, 0); }
		public TerminalNode CEILING() { return getToken(MySqlParser.CEILING, 0); }
		public TerminalNode CENTROID() { return getToken(MySqlParser.CENTROID, 0); }
		public TerminalNode CHARACTER_LENGTH() { return getToken(MySqlParser.CHARACTER_LENGTH, 0); }
		public TerminalNode CHARSET() { return getToken(MySqlParser.CHARSET, 0); }
		public TerminalNode CHAR_LENGTH() { return getToken(MySqlParser.CHAR_LENGTH, 0); }
		public TerminalNode COERCIBILITY() { return getToken(MySqlParser.COERCIBILITY, 0); }
		public TerminalNode COLLATION() { return getToken(MySqlParser.COLLATION, 0); }
		public TerminalNode COMPRESS() { return getToken(MySqlParser.COMPRESS, 0); }
		public TerminalNode CONCAT() { return getToken(MySqlParser.CONCAT, 0); }
		public TerminalNode CONCAT_WS() { return getToken(MySqlParser.CONCAT_WS, 0); }
		public TerminalNode CONNECTION_ID() { return getToken(MySqlParser.CONNECTION_ID, 0); }
		public TerminalNode CONV() { return getToken(MySqlParser.CONV, 0); }
		public TerminalNode CONVERT_TZ() { return getToken(MySqlParser.CONVERT_TZ, 0); }
		public TerminalNode COS() { return getToken(MySqlParser.COS, 0); }
		public TerminalNode COT() { return getToken(MySqlParser.COT, 0); }
		public TerminalNode COUNT() { return getToken(MySqlParser.COUNT, 0); }
		public TerminalNode CRC32() { return getToken(MySqlParser.CRC32, 0); }
		public TerminalNode CREATE_ASYMMETRIC_PRIV_KEY() { return getToken(MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, 0); }
		public TerminalNode CREATE_ASYMMETRIC_PUB_KEY() { return getToken(MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, 0); }
		public TerminalNode CREATE_DH_PARAMETERS() { return getToken(MySqlParser.CREATE_DH_PARAMETERS, 0); }
		public TerminalNode CREATE_DIGEST() { return getToken(MySqlParser.CREATE_DIGEST, 0); }
		public TerminalNode CROSSES() { return getToken(MySqlParser.CROSSES, 0); }
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode DATE() { return getToken(MySqlParser.DATE, 0); }
		public TerminalNode DATEDIFF() { return getToken(MySqlParser.DATEDIFF, 0); }
		public TerminalNode DATE_FORMAT() { return getToken(MySqlParser.DATE_FORMAT, 0); }
		public TerminalNode DAY() { return getToken(MySqlParser.DAY, 0); }
		public TerminalNode DAYNAME() { return getToken(MySqlParser.DAYNAME, 0); }
		public TerminalNode DAYOFMONTH() { return getToken(MySqlParser.DAYOFMONTH, 0); }
		public TerminalNode DAYOFWEEK() { return getToken(MySqlParser.DAYOFWEEK, 0); }
		public TerminalNode DAYOFYEAR() { return getToken(MySqlParser.DAYOFYEAR, 0); }
		public TerminalNode DECODE() { return getToken(MySqlParser.DECODE, 0); }
		public TerminalNode DEGREES() { return getToken(MySqlParser.DEGREES, 0); }
		public TerminalNode DES_DECRYPT() { return getToken(MySqlParser.DES_DECRYPT, 0); }
		public TerminalNode DES_ENCRYPT() { return getToken(MySqlParser.DES_ENCRYPT, 0); }
		public TerminalNode DIMENSION() { return getToken(MySqlParser.DIMENSION, 0); }
		public TerminalNode DISJOINT() { return getToken(MySqlParser.DISJOINT, 0); }
		public TerminalNode ELT() { return getToken(MySqlParser.ELT, 0); }
		public TerminalNode ENCODE() { return getToken(MySqlParser.ENCODE, 0); }
		public TerminalNode ENCRYPT() { return getToken(MySqlParser.ENCRYPT, 0); }
		public TerminalNode ENDPOINT() { return getToken(MySqlParser.ENDPOINT, 0); }
		public TerminalNode ENVELOPE() { return getToken(MySqlParser.ENVELOPE, 0); }
		public TerminalNode EQUALS() { return getToken(MySqlParser.EQUALS, 0); }
		public TerminalNode EXP() { return getToken(MySqlParser.EXP, 0); }
		public TerminalNode EXPORT_SET() { return getToken(MySqlParser.EXPORT_SET, 0); }
		public TerminalNode EXTERIORRING() { return getToken(MySqlParser.EXTERIORRING, 0); }
		public TerminalNode EXTRACTVALUE() { return getToken(MySqlParser.EXTRACTVALUE, 0); }
		public TerminalNode FIELD() { return getToken(MySqlParser.FIELD, 0); }
		public TerminalNode FIND_IN_SET() { return getToken(MySqlParser.FIND_IN_SET, 0); }
		public TerminalNode FLOOR() { return getToken(MySqlParser.FLOOR, 0); }
		public TerminalNode FORMAT() { return getToken(MySqlParser.FORMAT, 0); }
		public TerminalNode FOUND_ROWS() { return getToken(MySqlParser.FOUND_ROWS, 0); }
		public TerminalNode FROM_BASE64() { return getToken(MySqlParser.FROM_BASE64, 0); }
		public TerminalNode FROM_DAYS() { return getToken(MySqlParser.FROM_DAYS, 0); }
		public TerminalNode FROM_UNIXTIME() { return getToken(MySqlParser.FROM_UNIXTIME, 0); }
		public TerminalNode GEOMCOLLFROMTEXT() { return getToken(MySqlParser.GEOMCOLLFROMTEXT, 0); }
		public TerminalNode GEOMCOLLFROMWKB() { return getToken(MySqlParser.GEOMCOLLFROMWKB, 0); }
		public TerminalNode GEOMETRYCOLLECTION() { return getToken(MySqlParser.GEOMETRYCOLLECTION, 0); }
		public TerminalNode GEOMETRYCOLLECTIONFROMTEXT() { return getToken(MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, 0); }
		public TerminalNode GEOMETRYCOLLECTIONFROMWKB() { return getToken(MySqlParser.GEOMETRYCOLLECTIONFROMWKB, 0); }
		public TerminalNode GEOMETRYFROMTEXT() { return getToken(MySqlParser.GEOMETRYFROMTEXT, 0); }
		public TerminalNode GEOMETRYFROMWKB() { return getToken(MySqlParser.GEOMETRYFROMWKB, 0); }
		public TerminalNode GEOMETRYN() { return getToken(MySqlParser.GEOMETRYN, 0); }
		public TerminalNode GEOMETRYTYPE() { return getToken(MySqlParser.GEOMETRYTYPE, 0); }
		public TerminalNode GEOMFROMTEXT() { return getToken(MySqlParser.GEOMFROMTEXT, 0); }
		public TerminalNode GEOMFROMWKB() { return getToken(MySqlParser.GEOMFROMWKB, 0); }
		public TerminalNode GET_FORMAT() { return getToken(MySqlParser.GET_FORMAT, 0); }
		public TerminalNode GET_LOCK() { return getToken(MySqlParser.GET_LOCK, 0); }
		public TerminalNode GLENGTH() { return getToken(MySqlParser.GLENGTH, 0); }
		public TerminalNode GREATEST() { return getToken(MySqlParser.GREATEST, 0); }
		public TerminalNode GTID_SUBSET() { return getToken(MySqlParser.GTID_SUBSET, 0); }
		public TerminalNode GTID_SUBTRACT() { return getToken(MySqlParser.GTID_SUBTRACT, 0); }
		public TerminalNode HEX() { return getToken(MySqlParser.HEX, 0); }
		public TerminalNode HOUR() { return getToken(MySqlParser.HOUR, 0); }
		public TerminalNode IFNULL() { return getToken(MySqlParser.IFNULL, 0); }
		public TerminalNode INET6_ATON() { return getToken(MySqlParser.INET6_ATON, 0); }
		public TerminalNode INET6_NTOA() { return getToken(MySqlParser.INET6_NTOA, 0); }
		public TerminalNode INET_ATON() { return getToken(MySqlParser.INET_ATON, 0); }
		public TerminalNode INET_NTOA() { return getToken(MySqlParser.INET_NTOA, 0); }
		public TerminalNode INSTR() { return getToken(MySqlParser.INSTR, 0); }
		public TerminalNode INTERIORRINGN() { return getToken(MySqlParser.INTERIORRINGN, 0); }
		public TerminalNode INTERSECTS() { return getToken(MySqlParser.INTERSECTS, 0); }
		public TerminalNode INVISIBLE() { return getToken(MySqlParser.INVISIBLE, 0); }
		public TerminalNode ISCLOSED() { return getToken(MySqlParser.ISCLOSED, 0); }
		public TerminalNode ISEMPTY() { return getToken(MySqlParser.ISEMPTY, 0); }
		public TerminalNode ISNULL() { return getToken(MySqlParser.ISNULL, 0); }
		public TerminalNode ISSIMPLE() { return getToken(MySqlParser.ISSIMPLE, 0); }
		public TerminalNode IS_FREE_LOCK() { return getToken(MySqlParser.IS_FREE_LOCK, 0); }
		public TerminalNode IS_IPV4() { return getToken(MySqlParser.IS_IPV4, 0); }
		public TerminalNode IS_IPV4_COMPAT() { return getToken(MySqlParser.IS_IPV4_COMPAT, 0); }
		public TerminalNode IS_IPV4_MAPPED() { return getToken(MySqlParser.IS_IPV4_MAPPED, 0); }
		public TerminalNode IS_IPV6() { return getToken(MySqlParser.IS_IPV6, 0); }
		public TerminalNode IS_USED_LOCK() { return getToken(MySqlParser.IS_USED_LOCK, 0); }
		public TerminalNode LAST_INSERT_ID() { return getToken(MySqlParser.LAST_INSERT_ID, 0); }
		public TerminalNode LCASE() { return getToken(MySqlParser.LCASE, 0); }
		public TerminalNode LEAST() { return getToken(MySqlParser.LEAST, 0); }
		public TerminalNode LEFT() { return getToken(MySqlParser.LEFT, 0); }
		public TerminalNode LENGTH() { return getToken(MySqlParser.LENGTH, 0); }
		public TerminalNode LINEFROMTEXT() { return getToken(MySqlParser.LINEFROMTEXT, 0); }
		public TerminalNode LINEFROMWKB() { return getToken(MySqlParser.LINEFROMWKB, 0); }
		public TerminalNode LINESTRING() { return getToken(MySqlParser.LINESTRING, 0); }
		public TerminalNode LINESTRINGFROMTEXT() { return getToken(MySqlParser.LINESTRINGFROMTEXT, 0); }
		public TerminalNode LINESTRINGFROMWKB() { return getToken(MySqlParser.LINESTRINGFROMWKB, 0); }
		public TerminalNode LN() { return getToken(MySqlParser.LN, 0); }
		public TerminalNode LOAD_FILE() { return getToken(MySqlParser.LOAD_FILE, 0); }
		public TerminalNode LOCATE() { return getToken(MySqlParser.LOCATE, 0); }
		public TerminalNode LOG() { return getToken(MySqlParser.LOG, 0); }
		public TerminalNode LOG10() { return getToken(MySqlParser.LOG10, 0); }
		public TerminalNode LOG2() { return getToken(MySqlParser.LOG2, 0); }
		public TerminalNode LOWER() { return getToken(MySqlParser.LOWER, 0); }
		public TerminalNode LPAD() { return getToken(MySqlParser.LPAD, 0); }
		public TerminalNode LTRIM() { return getToken(MySqlParser.LTRIM, 0); }
		public TerminalNode MAKEDATE() { return getToken(MySqlParser.MAKEDATE, 0); }
		public TerminalNode MAKETIME() { return getToken(MySqlParser.MAKETIME, 0); }
		public TerminalNode MAKE_SET() { return getToken(MySqlParser.MAKE_SET, 0); }
		public TerminalNode MASTER_POS_WAIT() { return getToken(MySqlParser.MASTER_POS_WAIT, 0); }
		public TerminalNode MBRCONTAINS() { return getToken(MySqlParser.MBRCONTAINS, 0); }
		public TerminalNode MBRDISJOINT() { return getToken(MySqlParser.MBRDISJOINT, 0); }
		public TerminalNode MBREQUAL() { return getToken(MySqlParser.MBREQUAL, 0); }
		public TerminalNode MBRINTERSECTS() { return getToken(MySqlParser.MBRINTERSECTS, 0); }
		public TerminalNode MBROVERLAPS() { return getToken(MySqlParser.MBROVERLAPS, 0); }
		public TerminalNode MBRTOUCHES() { return getToken(MySqlParser.MBRTOUCHES, 0); }
		public TerminalNode MBRWITHIN() { return getToken(MySqlParser.MBRWITHIN, 0); }
		public TerminalNode MD5() { return getToken(MySqlParser.MD5, 0); }
		public TerminalNode MICROSECOND() { return getToken(MySqlParser.MICROSECOND, 0); }
		public TerminalNode MINUTE() { return getToken(MySqlParser.MINUTE, 0); }
		public TerminalNode MLINEFROMTEXT() { return getToken(MySqlParser.MLINEFROMTEXT, 0); }
		public TerminalNode MLINEFROMWKB() { return getToken(MySqlParser.MLINEFROMWKB, 0); }
		public TerminalNode MOD() { return getToken(MySqlParser.MOD, 0); }
		public TerminalNode MONTH() { return getToken(MySqlParser.MONTH, 0); }
		public TerminalNode MONTHNAME() { return getToken(MySqlParser.MONTHNAME, 0); }
		public TerminalNode MPOINTFROMTEXT() { return getToken(MySqlParser.MPOINTFROMTEXT, 0); }
		public TerminalNode MPOINTFROMWKB() { return getToken(MySqlParser.MPOINTFROMWKB, 0); }
		public TerminalNode MPOLYFROMTEXT() { return getToken(MySqlParser.MPOLYFROMTEXT, 0); }
		public TerminalNode MPOLYFROMWKB() { return getToken(MySqlParser.MPOLYFROMWKB, 0); }
		public TerminalNode MULTILINESTRING() { return getToken(MySqlParser.MULTILINESTRING, 0); }
		public TerminalNode MULTILINESTRINGFROMTEXT() { return getToken(MySqlParser.MULTILINESTRINGFROMTEXT, 0); }
		public TerminalNode MULTILINESTRINGFROMWKB() { return getToken(MySqlParser.MULTILINESTRINGFROMWKB, 0); }
		public TerminalNode MULTIPOINT() { return getToken(MySqlParser.MULTIPOINT, 0); }
		public TerminalNode MULTIPOINTFROMTEXT() { return getToken(MySqlParser.MULTIPOINTFROMTEXT, 0); }
		public TerminalNode MULTIPOINTFROMWKB() { return getToken(MySqlParser.MULTIPOINTFROMWKB, 0); }
		public TerminalNode MULTIPOLYGON() { return getToken(MySqlParser.MULTIPOLYGON, 0); }
		public TerminalNode MULTIPOLYGONFROMTEXT() { return getToken(MySqlParser.MULTIPOLYGONFROMTEXT, 0); }
		public TerminalNode MULTIPOLYGONFROMWKB() { return getToken(MySqlParser.MULTIPOLYGONFROMWKB, 0); }
		public TerminalNode NAME_CONST() { return getToken(MySqlParser.NAME_CONST, 0); }
		public TerminalNode NULLIF() { return getToken(MySqlParser.NULLIF, 0); }
		public TerminalNode NUMGEOMETRIES() { return getToken(MySqlParser.NUMGEOMETRIES, 0); }
		public TerminalNode NUMINTERIORRINGS() { return getToken(MySqlParser.NUMINTERIORRINGS, 0); }
		public TerminalNode NUMPOINTS() { return getToken(MySqlParser.NUMPOINTS, 0); }
		public TerminalNode OCT() { return getToken(MySqlParser.OCT, 0); }
		public TerminalNode OCTET_LENGTH() { return getToken(MySqlParser.OCTET_LENGTH, 0); }
		public TerminalNode ORD() { return getToken(MySqlParser.ORD, 0); }
		public TerminalNode OVERLAPS() { return getToken(MySqlParser.OVERLAPS, 0); }
		public TerminalNode PERIOD_ADD() { return getToken(MySqlParser.PERIOD_ADD, 0); }
		public TerminalNode PERIOD_DIFF() { return getToken(MySqlParser.PERIOD_DIFF, 0); }
		public TerminalNode PI() { return getToken(MySqlParser.PI, 0); }
		public TerminalNode POINT() { return getToken(MySqlParser.POINT, 0); }
		public TerminalNode POINTFROMTEXT() { return getToken(MySqlParser.POINTFROMTEXT, 0); }
		public TerminalNode POINTFROMWKB() { return getToken(MySqlParser.POINTFROMWKB, 0); }
		public TerminalNode POINTN() { return getToken(MySqlParser.POINTN, 0); }
		public TerminalNode POLYFROMTEXT() { return getToken(MySqlParser.POLYFROMTEXT, 0); }
		public TerminalNode POLYFROMWKB() { return getToken(MySqlParser.POLYFROMWKB, 0); }
		public TerminalNode POLYGON() { return getToken(MySqlParser.POLYGON, 0); }
		public TerminalNode POLYGONFROMTEXT() { return getToken(MySqlParser.POLYGONFROMTEXT, 0); }
		public TerminalNode POLYGONFROMWKB() { return getToken(MySqlParser.POLYGONFROMWKB, 0); }
		public TerminalNode POSITION() { return getToken(MySqlParser.POSITION, 0); }
		public TerminalNode POW() { return getToken(MySqlParser.POW, 0); }
		public TerminalNode POWER() { return getToken(MySqlParser.POWER, 0); }
		public TerminalNode QUARTER() { return getToken(MySqlParser.QUARTER, 0); }
		public TerminalNode QUOTE() { return getToken(MySqlParser.QUOTE, 0); }
		public TerminalNode RADIANS() { return getToken(MySqlParser.RADIANS, 0); }
		public TerminalNode RAND() { return getToken(MySqlParser.RAND, 0); }
		public TerminalNode RANDOM_BYTES() { return getToken(MySqlParser.RANDOM_BYTES, 0); }
		public TerminalNode RELEASE_LOCK() { return getToken(MySqlParser.RELEASE_LOCK, 0); }
		public TerminalNode REVERSE() { return getToken(MySqlParser.REVERSE, 0); }
		public TerminalNode RIGHT() { return getToken(MySqlParser.RIGHT, 0); }
		public TerminalNode ROUND() { return getToken(MySqlParser.ROUND, 0); }
		public TerminalNode ROW_COUNT() { return getToken(MySqlParser.ROW_COUNT, 0); }
		public TerminalNode RPAD() { return getToken(MySqlParser.RPAD, 0); }
		public TerminalNode RTRIM() { return getToken(MySqlParser.RTRIM, 0); }
		public TerminalNode SECOND() { return getToken(MySqlParser.SECOND, 0); }
		public TerminalNode SEC_TO_TIME() { return getToken(MySqlParser.SEC_TO_TIME, 0); }
		public TerminalNode SCHEMA() { return getToken(MySqlParser.SCHEMA, 0); }
		public TerminalNode SESSION_USER() { return getToken(MySqlParser.SESSION_USER, 0); }
		public TerminalNode SESSION_VARIABLES_ADMIN() { return getToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0); }
		public TerminalNode SHA() { return getToken(MySqlParser.SHA, 0); }
		public TerminalNode SHA1() { return getToken(MySqlParser.SHA1, 0); }
		public TerminalNode SHA2() { return getToken(MySqlParser.SHA2, 0); }
		public TerminalNode SIGN() { return getToken(MySqlParser.SIGN, 0); }
		public TerminalNode SIN() { return getToken(MySqlParser.SIN, 0); }
		public TerminalNode SLEEP() { return getToken(MySqlParser.SLEEP, 0); }
		public TerminalNode SOUNDEX() { return getToken(MySqlParser.SOUNDEX, 0); }
		public TerminalNode SQL_THREAD_WAIT_AFTER_GTIDS() { return getToken(MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, 0); }
		public TerminalNode SQRT() { return getToken(MySqlParser.SQRT, 0); }
		public TerminalNode SRID() { return getToken(MySqlParser.SRID, 0); }
		public TerminalNode STARTPOINT() { return getToken(MySqlParser.STARTPOINT, 0); }
		public TerminalNode STRCMP() { return getToken(MySqlParser.STRCMP, 0); }
		public TerminalNode STR_TO_DATE() { return getToken(MySqlParser.STR_TO_DATE, 0); }
		public TerminalNode ST_AREA() { return getToken(MySqlParser.ST_AREA, 0); }
		public TerminalNode ST_ASBINARY() { return getToken(MySqlParser.ST_ASBINARY, 0); }
		public TerminalNode ST_ASTEXT() { return getToken(MySqlParser.ST_ASTEXT, 0); }
		public TerminalNode ST_ASWKB() { return getToken(MySqlParser.ST_ASWKB, 0); }
		public TerminalNode ST_ASWKT() { return getToken(MySqlParser.ST_ASWKT, 0); }
		public TerminalNode ST_BUFFER() { return getToken(MySqlParser.ST_BUFFER, 0); }
		public TerminalNode ST_CENTROID() { return getToken(MySqlParser.ST_CENTROID, 0); }
		public TerminalNode ST_CONTAINS() { return getToken(MySqlParser.ST_CONTAINS, 0); }
		public TerminalNode ST_CROSSES() { return getToken(MySqlParser.ST_CROSSES, 0); }
		public TerminalNode ST_DIFFERENCE() { return getToken(MySqlParser.ST_DIFFERENCE, 0); }
		public TerminalNode ST_DIMENSION() { return getToken(MySqlParser.ST_DIMENSION, 0); }
		public TerminalNode ST_DISJOINT() { return getToken(MySqlParser.ST_DISJOINT, 0); }
		public TerminalNode ST_DISTANCE() { return getToken(MySqlParser.ST_DISTANCE, 0); }
		public TerminalNode ST_ENDPOINT() { return getToken(MySqlParser.ST_ENDPOINT, 0); }
		public TerminalNode ST_ENVELOPE() { return getToken(MySqlParser.ST_ENVELOPE, 0); }
		public TerminalNode ST_EQUALS() { return getToken(MySqlParser.ST_EQUALS, 0); }
		public TerminalNode ST_EXTERIORRING() { return getToken(MySqlParser.ST_EXTERIORRING, 0); }
		public TerminalNode ST_GEOMCOLLFROMTEXT() { return getToken(MySqlParser.ST_GEOMCOLLFROMTEXT, 0); }
		public TerminalNode ST_GEOMCOLLFROMTXT() { return getToken(MySqlParser.ST_GEOMCOLLFROMTXT, 0); }
		public TerminalNode ST_GEOMCOLLFROMWKB() { return getToken(MySqlParser.ST_GEOMCOLLFROMWKB, 0); }
		public TerminalNode ST_GEOMETRYCOLLECTIONFROMTEXT() { return getToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, 0); }
		public TerminalNode ST_GEOMETRYCOLLECTIONFROMWKB() { return getToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, 0); }
		public TerminalNode ST_GEOMETRYFROMTEXT() { return getToken(MySqlParser.ST_GEOMETRYFROMTEXT, 0); }
		public TerminalNode ST_GEOMETRYFROMWKB() { return getToken(MySqlParser.ST_GEOMETRYFROMWKB, 0); }
		public TerminalNode ST_GEOMETRYN() { return getToken(MySqlParser.ST_GEOMETRYN, 0); }
		public TerminalNode ST_GEOMETRYTYPE() { return getToken(MySqlParser.ST_GEOMETRYTYPE, 0); }
		public TerminalNode ST_GEOMFROMTEXT() { return getToken(MySqlParser.ST_GEOMFROMTEXT, 0); }
		public TerminalNode ST_GEOMFROMWKB() { return getToken(MySqlParser.ST_GEOMFROMWKB, 0); }
		public TerminalNode ST_INTERIORRINGN() { return getToken(MySqlParser.ST_INTERIORRINGN, 0); }
		public TerminalNode ST_INTERSECTION() { return getToken(MySqlParser.ST_INTERSECTION, 0); }
		public TerminalNode ST_INTERSECTS() { return getToken(MySqlParser.ST_INTERSECTS, 0); }
		public TerminalNode ST_ISCLOSED() { return getToken(MySqlParser.ST_ISCLOSED, 0); }
		public TerminalNode ST_ISEMPTY() { return getToken(MySqlParser.ST_ISEMPTY, 0); }
		public TerminalNode ST_ISSIMPLE() { return getToken(MySqlParser.ST_ISSIMPLE, 0); }
		public TerminalNode ST_LINEFROMTEXT() { return getToken(MySqlParser.ST_LINEFROMTEXT, 0); }
		public TerminalNode ST_LINEFROMWKB() { return getToken(MySqlParser.ST_LINEFROMWKB, 0); }
		public TerminalNode ST_LINESTRINGFROMTEXT() { return getToken(MySqlParser.ST_LINESTRINGFROMTEXT, 0); }
		public TerminalNode ST_LINESTRINGFROMWKB() { return getToken(MySqlParser.ST_LINESTRINGFROMWKB, 0); }
		public TerminalNode ST_NUMGEOMETRIES() { return getToken(MySqlParser.ST_NUMGEOMETRIES, 0); }
		public TerminalNode ST_NUMINTERIORRING() { return getToken(MySqlParser.ST_NUMINTERIORRING, 0); }
		public TerminalNode ST_NUMINTERIORRINGS() { return getToken(MySqlParser.ST_NUMINTERIORRINGS, 0); }
		public TerminalNode ST_NUMPOINTS() { return getToken(MySqlParser.ST_NUMPOINTS, 0); }
		public TerminalNode ST_OVERLAPS() { return getToken(MySqlParser.ST_OVERLAPS, 0); }
		public TerminalNode ST_POINTFROMTEXT() { return getToken(MySqlParser.ST_POINTFROMTEXT, 0); }
		public TerminalNode ST_POINTFROMWKB() { return getToken(MySqlParser.ST_POINTFROMWKB, 0); }
		public TerminalNode ST_POINTN() { return getToken(MySqlParser.ST_POINTN, 0); }
		public TerminalNode ST_POLYFROMTEXT() { return getToken(MySqlParser.ST_POLYFROMTEXT, 0); }
		public TerminalNode ST_POLYFROMWKB() { return getToken(MySqlParser.ST_POLYFROMWKB, 0); }
		public TerminalNode ST_POLYGONFROMTEXT() { return getToken(MySqlParser.ST_POLYGONFROMTEXT, 0); }
		public TerminalNode ST_POLYGONFROMWKB() { return getToken(MySqlParser.ST_POLYGONFROMWKB, 0); }
		public TerminalNode ST_SRID() { return getToken(MySqlParser.ST_SRID, 0); }
		public TerminalNode ST_STARTPOINT() { return getToken(MySqlParser.ST_STARTPOINT, 0); }
		public TerminalNode ST_SYMDIFFERENCE() { return getToken(MySqlParser.ST_SYMDIFFERENCE, 0); }
		public TerminalNode ST_TOUCHES() { return getToken(MySqlParser.ST_TOUCHES, 0); }
		public TerminalNode ST_UNION() { return getToken(MySqlParser.ST_UNION, 0); }
		public TerminalNode ST_WITHIN() { return getToken(MySqlParser.ST_WITHIN, 0); }
		public TerminalNode ST_X() { return getToken(MySqlParser.ST_X, 0); }
		public TerminalNode ST_Y() { return getToken(MySqlParser.ST_Y, 0); }
		public TerminalNode SUBDATE() { return getToken(MySqlParser.SUBDATE, 0); }
		public TerminalNode SUBSTRING_INDEX() { return getToken(MySqlParser.SUBSTRING_INDEX, 0); }
		public TerminalNode SUBTIME() { return getToken(MySqlParser.SUBTIME, 0); }
		public TerminalNode SYSTEM_USER() { return getToken(MySqlParser.SYSTEM_USER, 0); }
		public TerminalNode TAN() { return getToken(MySqlParser.TAN, 0); }
		public TerminalNode TIME() { return getToken(MySqlParser.TIME, 0); }
		public TerminalNode TIMEDIFF() { return getToken(MySqlParser.TIMEDIFF, 0); }
		public TerminalNode TIMESTAMP() { return getToken(MySqlParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMPADD() { return getToken(MySqlParser.TIMESTAMPADD, 0); }
		public TerminalNode TIMESTAMPDIFF() { return getToken(MySqlParser.TIMESTAMPDIFF, 0); }
		public TerminalNode TIME_FORMAT() { return getToken(MySqlParser.TIME_FORMAT, 0); }
		public TerminalNode TIME_TO_SEC() { return getToken(MySqlParser.TIME_TO_SEC, 0); }
		public TerminalNode TOUCHES() { return getToken(MySqlParser.TOUCHES, 0); }
		public TerminalNode TO_BASE64() { return getToken(MySqlParser.TO_BASE64, 0); }
		public TerminalNode TO_DAYS() { return getToken(MySqlParser.TO_DAYS, 0); }
		public TerminalNode TO_SECONDS() { return getToken(MySqlParser.TO_SECONDS, 0); }
		public TerminalNode UCASE() { return getToken(MySqlParser.UCASE, 0); }
		public TerminalNode UNCOMPRESS() { return getToken(MySqlParser.UNCOMPRESS, 0); }
		public TerminalNode UNCOMPRESSED_LENGTH() { return getToken(MySqlParser.UNCOMPRESSED_LENGTH, 0); }
		public TerminalNode UNHEX() { return getToken(MySqlParser.UNHEX, 0); }
		public TerminalNode UNIX_TIMESTAMP() { return getToken(MySqlParser.UNIX_TIMESTAMP, 0); }
		public TerminalNode UPDATEXML() { return getToken(MySqlParser.UPDATEXML, 0); }
		public TerminalNode UPPER() { return getToken(MySqlParser.UPPER, 0); }
		public TerminalNode UUID() { return getToken(MySqlParser.UUID, 0); }
		public TerminalNode UUID_SHORT() { return getToken(MySqlParser.UUID_SHORT, 0); }
		public TerminalNode VALIDATE_PASSWORD_STRENGTH() { return getToken(MySqlParser.VALIDATE_PASSWORD_STRENGTH, 0); }
		public TerminalNode VERSION() { return getToken(MySqlParser.VERSION, 0); }
		public TerminalNode VISIBLE() { return getToken(MySqlParser.VISIBLE, 0); }
		public TerminalNode WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS() { return getToken(MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, 0); }
		public TerminalNode WEEK() { return getToken(MySqlParser.WEEK, 0); }
		public TerminalNode WEEKDAY() { return getToken(MySqlParser.WEEKDAY, 0); }
		public TerminalNode WEEKOFYEAR() { return getToken(MySqlParser.WEEKOFYEAR, 0); }
		public TerminalNode WEIGHT_STRING() { return getToken(MySqlParser.WEIGHT_STRING, 0); }
		public TerminalNode WITHIN() { return getToken(MySqlParser.WITHIN, 0); }
		public TerminalNode YEAR() { return getToken(MySqlParser.YEAR, 0); }
		public TerminalNode YEARWEEK() { return getToken(MySqlParser.YEARWEEK, 0); }
		public TerminalNode Y_FUNCTION() { return getToken(MySqlParser.Y_FUNCTION, 0); }
		public TerminalNode X_FUNCTION() { return getToken(MySqlParser.X_FUNCTION, 0); }
		public TerminalNode JSON_VALID() { return getToken(MySqlParser.JSON_VALID, 0); }
		public TerminalNode JSON_SCHEMA_VALID() { return getToken(MySqlParser.JSON_SCHEMA_VALID, 0); }
		public FunctionNameBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionNameBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFunctionNameBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFunctionNameBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFunctionNameBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionNameBaseContext functionNameBase() throws RecognitionException {
		FunctionNameBaseContext _localctx = new FunctionNameBaseContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_functionNameBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2840);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (LEFT - 87)) | (1L << (RIGHT - 87)) | (1L << (SCHEMA - 87)))) != 0) || ((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (DATE - 199)) | (1L << (TIME - 199)) | (1L << (TIMESTAMP - 199)) | (1L << (YEAR - 199)) | (1L << (JSON_VALID - 199)) | (1L << (JSON_SCHEMA_VALID - 199)) | (1L << (COUNT - 199)) | (1L << (POSITION - 199)))) != 0) || _la==INVISIBLE || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (VISIBLE - 582)) | (1L << (QUARTER - 582)) | (1L << (MONTH - 582)) | (1L << (DAY - 582)) | (1L << (HOUR - 582)) | (1L << (MINUTE - 582)) | (1L << (WEEK - 582)) | (1L << (SECOND - 582)) | (1L << (MICROSECOND - 582)) | (1L << (SESSION_VARIABLES_ADMIN - 582)))) != 0) || ((((_la - 701)) & ~0x3f) == 0 && ((1L << (_la - 701)) & ((1L << (GEOMETRYCOLLECTION - 701)) | (1L << (LINESTRING - 701)) | (1L << (MULTILINESTRING - 701)) | (1L << (MULTIPOINT - 701)) | (1L << (MULTIPOLYGON - 701)) | (1L << (POINT - 701)) | (1L << (POLYGON - 701)) | (1L << (ABS - 701)) | (1L << (ACOS - 701)) | (1L << (ADDDATE - 701)) | (1L << (ADDTIME - 701)) | (1L << (AES_DECRYPT - 701)) | (1L << (AES_ENCRYPT - 701)) | (1L << (AREA - 701)) | (1L << (ASBINARY - 701)) | (1L << (ASIN - 701)) | (1L << (ASTEXT - 701)) | (1L << (ASWKB - 701)) | (1L << (ASWKT - 701)) | (1L << (ASYMMETRIC_DECRYPT - 701)) | (1L << (ASYMMETRIC_DERIVE - 701)) | (1L << (ASYMMETRIC_ENCRYPT - 701)) | (1L << (ASYMMETRIC_SIGN - 701)) | (1L << (ASYMMETRIC_VERIFY - 701)) | (1L << (ATAN - 701)) | (1L << (ATAN2 - 701)) | (1L << (BENCHMARK - 701)) | (1L << (BIN - 701)) | (1L << (BIT_COUNT - 701)) | (1L << (BIT_LENGTH - 701)) | (1L << (BUFFER - 701)) | (1L << (CEIL - 701)) | (1L << (CEILING - 701)) | (1L << (CENTROID - 701)) | (1L << (CHARACTER_LENGTH - 701)) | (1L << (CHARSET - 701)) | (1L << (CHAR_LENGTH - 701)) | (1L << (COERCIBILITY - 701)) | (1L << (COLLATION - 701)) | (1L << (COMPRESS - 701)) | (1L << (CONCAT - 701)) | (1L << (CONCAT_WS - 701)) | (1L << (CONNECTION_ID - 701)) | (1L << (CONV - 701)) | (1L << (CONVERT_TZ - 701)) | (1L << (COS - 701)) | (1L << (COT - 701)) | (1L << (CRC32 - 701)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 701)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 701)) | (1L << (CREATE_DH_PARAMETERS - 701)) | (1L << (CREATE_DIGEST - 701)) | (1L << (CROSSES - 701)) | (1L << (DATEDIFF - 701)) | (1L << (DATE_FORMAT - 701)) | (1L << (DAYNAME - 701)) | (1L << (DAYOFMONTH - 701)) | (1L << (DAYOFWEEK - 701)) | (1L << (DAYOFYEAR - 701)) | (1L << (DECODE - 701)) | (1L << (DEGREES - 701)))) != 0) || ((((_la - 765)) & ~0x3f) == 0 && ((1L << (_la - 765)) & ((1L << (DES_DECRYPT - 765)) | (1L << (DES_ENCRYPT - 765)) | (1L << (DIMENSION - 765)) | (1L << (DISJOINT - 765)) | (1L << (ELT - 765)) | (1L << (ENCODE - 765)) | (1L << (ENCRYPT - 765)) | (1L << (ENDPOINT - 765)) | (1L << (ENVELOPE - 765)) | (1L << (EQUALS - 765)) | (1L << (EXP - 765)) | (1L << (EXPORT_SET - 765)) | (1L << (EXTERIORRING - 765)) | (1L << (EXTRACTVALUE - 765)) | (1L << (FIELD - 765)) | (1L << (FIND_IN_SET - 765)) | (1L << (FLOOR - 765)) | (1L << (FORMAT - 765)) | (1L << (FOUND_ROWS - 765)) | (1L << (FROM_BASE64 - 765)) | (1L << (FROM_DAYS - 765)) | (1L << (FROM_UNIXTIME - 765)) | (1L << (GEOMCOLLFROMTEXT - 765)) | (1L << (GEOMCOLLFROMWKB - 765)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 765)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 765)) | (1L << (GEOMETRYFROMTEXT - 765)) | (1L << (GEOMETRYFROMWKB - 765)) | (1L << (GEOMETRYN - 765)) | (1L << (GEOMETRYTYPE - 765)) | (1L << (GEOMFROMTEXT - 765)) | (1L << (GEOMFROMWKB - 765)) | (1L << (GET_FORMAT - 765)) | (1L << (GET_LOCK - 765)) | (1L << (GLENGTH - 765)) | (1L << (GREATEST - 765)) | (1L << (GTID_SUBSET - 765)) | (1L << (GTID_SUBTRACT - 765)) | (1L << (HEX - 765)) | (1L << (IFNULL - 765)) | (1L << (INET6_ATON - 765)) | (1L << (INET6_NTOA - 765)) | (1L << (INET_ATON - 765)) | (1L << (INET_NTOA - 765)) | (1L << (INSTR - 765)) | (1L << (INTERIORRINGN - 765)) | (1L << (INTERSECTS - 765)) | (1L << (ISCLOSED - 765)) | (1L << (ISEMPTY - 765)) | (1L << (ISNULL - 765)) | (1L << (ISSIMPLE - 765)) | (1L << (IS_FREE_LOCK - 765)) | (1L << (IS_IPV4 - 765)) | (1L << (IS_IPV4_COMPAT - 765)) | (1L << (IS_IPV4_MAPPED - 765)) | (1L << (IS_IPV6 - 765)) | (1L << (IS_USED_LOCK - 765)) | (1L << (LAST_INSERT_ID - 765)) | (1L << (LCASE - 765)) | (1L << (LEAST - 765)) | (1L << (LENGTH - 765)) | (1L << (LINEFROMTEXT - 765)) | (1L << (LINEFROMWKB - 765)) | (1L << (LINESTRINGFROMTEXT - 765)))) != 0) || ((((_la - 829)) & ~0x3f) == 0 && ((1L << (_la - 829)) & ((1L << (LINESTRINGFROMWKB - 829)) | (1L << (LN - 829)) | (1L << (LOAD_FILE - 829)) | (1L << (LOCATE - 829)) | (1L << (LOG - 829)) | (1L << (LOG10 - 829)) | (1L << (LOG2 - 829)) | (1L << (LOWER - 829)) | (1L << (LPAD - 829)) | (1L << (LTRIM - 829)) | (1L << (MAKEDATE - 829)) | (1L << (MAKETIME - 829)) | (1L << (MAKE_SET - 829)) | (1L << (MASTER_POS_WAIT - 829)) | (1L << (MBRCONTAINS - 829)) | (1L << (MBRDISJOINT - 829)) | (1L << (MBREQUAL - 829)) | (1L << (MBRINTERSECTS - 829)) | (1L << (MBROVERLAPS - 829)) | (1L << (MBRTOUCHES - 829)) | (1L << (MBRWITHIN - 829)) | (1L << (MD5 - 829)) | (1L << (MLINEFROMTEXT - 829)) | (1L << (MLINEFROMWKB - 829)) | (1L << (MONTHNAME - 829)) | (1L << (MPOINTFROMTEXT - 829)) | (1L << (MPOINTFROMWKB - 829)) | (1L << (MPOLYFROMTEXT - 829)) | (1L << (MPOLYFROMWKB - 829)) | (1L << (MULTILINESTRINGFROMTEXT - 829)) | (1L << (MULTILINESTRINGFROMWKB - 829)) | (1L << (MULTIPOINTFROMTEXT - 829)) | (1L << (MULTIPOINTFROMWKB - 829)) | (1L << (MULTIPOLYGONFROMTEXT - 829)) | (1L << (MULTIPOLYGONFROMWKB - 829)) | (1L << (NAME_CONST - 829)) | (1L << (NULLIF - 829)) | (1L << (NUMGEOMETRIES - 829)) | (1L << (NUMINTERIORRINGS - 829)) | (1L << (NUMPOINTS - 829)) | (1L << (OCT - 829)) | (1L << (OCTET_LENGTH - 829)) | (1L << (ORD - 829)) | (1L << (OVERLAPS - 829)) | (1L << (PERIOD_ADD - 829)) | (1L << (PERIOD_DIFF - 829)) | (1L << (PI - 829)) | (1L << (POINTFROMTEXT - 829)) | (1L << (POINTFROMWKB - 829)) | (1L << (POINTN - 829)) | (1L << (POLYFROMTEXT - 829)) | (1L << (POLYFROMWKB - 829)) | (1L << (POLYGONFROMTEXT - 829)) | (1L << (POLYGONFROMWKB - 829)) | (1L << (POW - 829)) | (1L << (POWER - 829)) | (1L << (QUOTE - 829)) | (1L << (RADIANS - 829)) | (1L << (RAND - 829)) | (1L << (RANDOM_BYTES - 829)) | (1L << (RELEASE_LOCK - 829)) | (1L << (REVERSE - 829)) | (1L << (ROUND - 829)) | (1L << (ROW_COUNT - 829)))) != 0) || ((((_la - 893)) & ~0x3f) == 0 && ((1L << (_la - 893)) & ((1L << (RPAD - 893)) | (1L << (RTRIM - 893)) | (1L << (SEC_TO_TIME - 893)) | (1L << (SESSION_USER - 893)) | (1L << (SHA - 893)) | (1L << (SHA1 - 893)) | (1L << (SHA2 - 893)) | (1L << (SIGN - 893)) | (1L << (SIN - 893)) | (1L << (SLEEP - 893)) | (1L << (SOUNDEX - 893)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 893)) | (1L << (SQRT - 893)) | (1L << (SRID - 893)) | (1L << (STARTPOINT - 893)) | (1L << (STRCMP - 893)) | (1L << (STR_TO_DATE - 893)) | (1L << (ST_AREA - 893)) | (1L << (ST_ASBINARY - 893)) | (1L << (ST_ASTEXT - 893)) | (1L << (ST_ASWKB - 893)) | (1L << (ST_ASWKT - 893)) | (1L << (ST_BUFFER - 893)) | (1L << (ST_CENTROID - 893)) | (1L << (ST_CONTAINS - 893)) | (1L << (ST_CROSSES - 893)) | (1L << (ST_DIFFERENCE - 893)) | (1L << (ST_DIMENSION - 893)) | (1L << (ST_DISJOINT - 893)) | (1L << (ST_DISTANCE - 893)) | (1L << (ST_ENDPOINT - 893)) | (1L << (ST_ENVELOPE - 893)) | (1L << (ST_EQUALS - 893)) | (1L << (ST_EXTERIORRING - 893)) | (1L << (ST_GEOMCOLLFROMTEXT - 893)) | (1L << (ST_GEOMCOLLFROMTXT - 893)) | (1L << (ST_GEOMCOLLFROMWKB - 893)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 893)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 893)) | (1L << (ST_GEOMETRYFROMTEXT - 893)) | (1L << (ST_GEOMETRYFROMWKB - 893)) | (1L << (ST_GEOMETRYN - 893)) | (1L << (ST_GEOMETRYTYPE - 893)) | (1L << (ST_GEOMFROMTEXT - 893)) | (1L << (ST_GEOMFROMWKB - 893)) | (1L << (ST_INTERIORRINGN - 893)) | (1L << (ST_INTERSECTION - 893)) | (1L << (ST_INTERSECTS - 893)) | (1L << (ST_ISCLOSED - 893)) | (1L << (ST_ISEMPTY - 893)) | (1L << (ST_ISSIMPLE - 893)) | (1L << (ST_LINEFROMTEXT - 893)) | (1L << (ST_LINEFROMWKB - 893)) | (1L << (ST_LINESTRINGFROMTEXT - 893)) | (1L << (ST_LINESTRINGFROMWKB - 893)) | (1L << (ST_NUMGEOMETRIES - 893)) | (1L << (ST_NUMINTERIORRING - 893)) | (1L << (ST_NUMINTERIORRINGS - 893)) | (1L << (ST_NUMPOINTS - 893)) | (1L << (ST_OVERLAPS - 893)) | (1L << (ST_POINTFROMTEXT - 893)) | (1L << (ST_POINTFROMWKB - 893)) | (1L << (ST_POINTN - 893)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (ST_POLYFROMTEXT - 957)) | (1L << (ST_POLYFROMWKB - 957)) | (1L << (ST_POLYGONFROMTEXT - 957)) | (1L << (ST_POLYGONFROMWKB - 957)) | (1L << (ST_SRID - 957)) | (1L << (ST_STARTPOINT - 957)) | (1L << (ST_SYMDIFFERENCE - 957)) | (1L << (ST_TOUCHES - 957)) | (1L << (ST_UNION - 957)) | (1L << (ST_WITHIN - 957)) | (1L << (ST_X - 957)) | (1L << (ST_Y - 957)) | (1L << (SUBDATE - 957)) | (1L << (SUBSTRING_INDEX - 957)) | (1L << (SUBTIME - 957)) | (1L << (SYSTEM_USER - 957)) | (1L << (TAN - 957)) | (1L << (TIMEDIFF - 957)) | (1L << (TIMESTAMPADD - 957)) | (1L << (TIMESTAMPDIFF - 957)) | (1L << (TIME_FORMAT - 957)) | (1L << (TIME_TO_SEC - 957)) | (1L << (TOUCHES - 957)) | (1L << (TO_BASE64 - 957)) | (1L << (TO_DAYS - 957)) | (1L << (TO_SECONDS - 957)) | (1L << (UCASE - 957)) | (1L << (UNCOMPRESS - 957)) | (1L << (UNCOMPRESSED_LENGTH - 957)) | (1L << (UNHEX - 957)) | (1L << (UNIX_TIMESTAMP - 957)) | (1L << (UPDATEXML - 957)) | (1L << (UPPER - 957)) | (1L << (UUID - 957)) | (1L << (UUID_SHORT - 957)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 957)) | (1L << (VERSION - 957)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 957)) | (1L << (WEEKDAY - 957)) | (1L << (WEEKOFYEAR - 957)) | (1L << (WEIGHT_STRING - 957)) | (1L << (WITHIN - 957)) | (1L << (YEARWEEK - 957)) | (1L << (Y_FUNCTION - 957)) | (1L << (X_FUNCTION - 957)) | (1L << (MOD - 957)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 116:
			return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 117:
			return predicate_sempred((PredicateContext)_localctx, predIndex);
		case 118:
			return expressionAtom_sempred((ExpressionAtomContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 3);
		}
		return true;
	}
	private boolean predicate_sempred(PredicateContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1:
			return precpred(_ctx, 8);
		case 2:
			return precpred(_ctx, 6);
		case 3:
			return precpred(_ctx, 5);
		case 4:
			return precpred(_ctx, 3);
		case 5:
			return precpred(_ctx, 10);
		case 6:
			return precpred(_ctx, 9);
		case 7:
			return precpred(_ctx, 7);
		case 8:
			return precpred(_ctx, 4);
		case 9:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean expressionAtom_sempred(ExpressionAtomContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10:
			return precpred(_ctx, 3);
		case 11:
			return precpred(_ctx, 2);
		case 12:
			return precpred(_ctx, 1);
		case 13:
			return precpred(_ctx, 12);
		}
		return true;
	}

	private static final int _serializedATNSegments = 2;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0423\u0b1d\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\3\2\5\2\u010c\n\2\3\2\5\2\u010f\n\2\3\2\3\2\3\3\3\3\5\3\u0115"+
		"\n\3\3\3\5\3\u0118\n\3\3\3\7\3\u011b\n\3\f\3\16\3\u011e\13\3\3\3\3\3\5"+
		"\3\u0122\n\3\3\3\5\3\u0125\n\3\3\3\5\3\u0128\n\3\3\4\3\4\5\4\u012c\n\4"+
		"\3\5\3\5\3\6\3\6\5\6\u0132\n\6\3\7\3\7\3\7\3\7\5\7\u0138\n\7\3\b\3\b\5"+
		"\b\u013c\n\b\3\b\5\b\u013f\n\b\3\b\3\b\3\b\5\b\u0144\n\b\3\b\3\b\3\b\3"+
		"\b\7\b\u014a\n\b\f\b\16\b\u014d\13\b\3\b\3\b\5\b\u0151\n\b\3\b\3\b\3\b"+
		"\5\b\u0156\n\b\3\b\7\b\u0159\n\b\f\b\16\b\u015c\13\b\3\t\3\t\3\t\3\n\3"+
		"\n\5\n\u0163\n\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\5\n\u016e\n\n\3\13"+
		"\3\13\5\13\u0172\n\13\3\13\3\13\5\13\u0176\n\13\3\13\3\13\3\13\3\13\3"+
		"\13\3\13\3\13\3\13\5\13\u0180\n\13\3\13\3\13\5\13\u0184\n\13\3\13\3\13"+
		"\5\13\u0188\n\13\3\13\3\13\5\13\u018c\n\13\3\13\3\13\5\13\u0190\n\13\3"+
		"\13\7\13\u0193\n\13\f\13\16\13\u0196\13\13\5\13\u0198\n\13\3\13\5\13\u019b"+
		"\n\13\3\13\5\13\u019e\n\13\3\13\5\13\u01a1\n\13\3\13\3\13\3\13\3\13\5"+
		"\13\u01a7\n\13\3\13\3\13\5\13\u01ab\n\13\3\13\3\13\3\13\3\13\5\13\u01b1"+
		"\n\13\3\13\7\13\u01b4\n\13\f\13\16\13\u01b7\13\13\5\13\u01b9\n\13\3\13"+
		"\5\13\u01bc\n\13\5\13\u01be\n\13\3\f\3\f\3\f\3\f\3\r\3\r\3\r\3\r\7\r\u01c8"+
		"\n\r\f\r\16\r\u01cb\13\r\3\r\3\r\3\16\3\16\3\16\3\16\3\16\5\16\u01d4\n"+
		"\16\3\17\3\17\7\17\u01d8\n\17\f\17\16\17\u01db\13\17\3\20\3\20\3\20\3"+
		"\20\3\20\3\20\3\20\5\20\u01e4\n\20\3\20\5\20\u01e7\n\20\3\20\3\20\3\20"+
		"\5\20\u01ec\n\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20"+
		"\5\20\u01f9\n\20\3\20\3\20\3\20\3\20\3\20\5\20\u0200\n\20\3\20\3\20\3"+
		"\20\3\20\3\20\5\20\u0207\n\20\5\20\u0209\n\20\3\20\3\20\3\20\3\20\3\20"+
		"\5\20\u0210\n\20\3\21\3\21\5\21\u0214\n\21\3\21\3\21\3\21\3\21\3\21\3"+
		"\21\5\21\u021c\n\21\3\21\3\21\3\21\5\21\u0221\n\21\3\22\3\22\3\22\5\22"+
		"\u0226\n\22\3\22\5\22\u0229\n\22\3\22\3\22\3\22\5\22\u022e\n\22\3\22\5"+
		"\22\u0231\n\22\3\23\3\23\5\23\u0235\n\23\5\23\u0237\n\23\3\23\3\23\3\23"+
		"\5\23\u023c\n\23\3\23\5\23\u023f\n\23\3\23\3\23\7\23\u0243\n\23\f\23\16"+
		"\23\u0246\13\23\3\23\3\23\5\23\u024a\n\23\5\23\u024c\n\23\3\23\3\23\5"+
		"\23\u0250\n\23\3\23\5\23\u0253\n\23\3\23\5\23\u0256\n\23\3\23\3\23\7\23"+
		"\u025a\n\23\f\23\16\23\u025d\13\23\3\23\3\23\5\23\u0261\n\23\5\23\u0263"+
		"\n\23\3\23\3\23\3\23\5\23\u0268\n\23\3\23\3\23\3\23\3\23\3\23\5\23\u026f"+
		"\n\23\5\23\u0271\n\23\3\23\3\23\3\23\3\23\3\23\5\23\u0278\n\23\3\24\3"+
		"\24\3\24\5\24\u027d\n\24\3\24\3\24\5\24\u0281\n\24\3\24\5\24\u0284\n\24"+
		"\3\25\3\25\3\25\3\25\3\25\3\25\5\25\u028c\n\25\3\25\3\25\3\25\3\25\3\25"+
		"\3\25\5\25\u0294\n\25\5\25\u0296\n\25\3\26\3\26\3\26\3\26\3\26\3\26\5"+
		"\26\u029e\n\26\3\27\3\27\5\27\u02a2\n\27\3\27\5\27\u02a5\n\27\3\27\3\27"+
		"\7\27\u02a9\n\27\f\27\16\27\u02ac\13\27\3\27\3\27\5\27\u02b0\n\27\3\27"+
		"\5\27\u02b3\n\27\3\27\3\27\7\27\u02b7\n\27\f\27\16\27\u02ba\13\27\5\27"+
		"\u02bc\n\27\3\30\3\30\5\30\u02c0\n\30\3\30\3\30\3\30\5\30\u02c5\n\30\3"+
		"\30\3\30\3\30\5\30\u02ca\n\30\3\30\3\30\5\30\u02ce\n\30\3\30\3\30\3\30"+
		"\5\30\u02d3\n\30\3\30\5\30\u02d6\n\30\3\30\3\30\5\30\u02da\n\30\3\30\3"+
		"\30\5\30\u02de\n\30\3\30\3\30\5\30\u02e2\n\30\3\30\3\30\5\30\u02e6\n\30"+
		"\3\30\3\30\3\30\5\30\u02eb\n\30\3\30\3\30\3\30\5\30\u02f0\n\30\3\30\3"+
		"\30\3\30\5\30\u02f5\n\30\3\30\3\30\3\30\3\30\5\30\u02fb\n\30\3\30\3\30"+
		"\3\30\5\30\u0300\n\30\3\30\3\30\3\30\5\30\u0305\n\30\3\30\3\30\3\30\3"+
		"\30\5\30\u030b\n\30\3\30\3\30\3\30\5\30\u0310\n\30\3\30\3\30\3\30\5\30"+
		"\u0315\n\30\3\30\3\30\3\30\5\30\u031a\n\30\3\30\3\30\3\30\5\30\u031f\n"+
		"\30\3\30\3\30\3\30\5\30\u0324\n\30\3\30\3\30\3\30\5\30\u0329\n\30\3\30"+
		"\3\30\3\30\5\30\u032e\n\30\3\30\3\30\3\30\5\30\u0333\n\30\3\30\3\30\3"+
		"\30\5\30\u0338\n\30\3\30\3\30\3\30\5\30\u033d\n\30\3\30\3\30\3\30\3\30"+
		"\5\30\u0343\n\30\3\30\3\30\3\30\5\30\u0348\n\30\3\30\3\30\3\30\3\30\5"+
		"\30\u034e\n\30\3\31\3\31\3\31\3\32\3\32\3\32\3\32\3\32\5\32\u0358\n\32"+
		"\3\32\3\32\3\32\3\32\3\32\5\32\u035f\n\32\5\32\u0361\n\32\3\32\3\32\3"+
		"\32\3\32\7\32\u0367\n\32\f\32\16\32\u036a\13\32\3\32\3\32\5\32\u036e\n"+
		"\32\3\33\5\33\u0371\n\33\3\33\3\33\3\33\3\33\3\33\3\33\5\33\u0379\n\33"+
		"\3\33\3\33\3\33\3\33\5\33\u037f\n\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33"+
		"\3\33\3\33\3\33\3\33\3\33\3\33\3\33\5\33\u038f\n\33\3\33\3\33\3\33\3\33"+
		"\3\33\3\33\3\33\3\33\3\33\3\33\5\33\u039b\n\33\5\33\u039d\n\33\3\34\5"+
		"\34\u03a0\n\34\3\34\3\34\3\34\3\34\3\34\3\34\5\34\u03a8\n\34\3\34\3\34"+
		"\3\34\3\34\5\34\u03ae\n\34\3\34\3\34\3\34\3\34\5\34\u03b4\n\34\3\35\3"+
		"\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\7\35\u03bf\n\35\f\35\16\35\u03c2"+
		"\13\35\3\35\3\35\7\35\u03c6\n\35\f\35\16\35\u03c9\13\35\3\35\3\35\3\35"+
		"\3\35\7\35\u03cf\n\35\f\35\16\35\u03d2\13\35\3\35\3\35\5\35\u03d6\n\35"+
		"\3\35\3\35\3\35\3\35\3\35\3\35\3\35\7\35\u03df\n\35\f\35\16\35\u03e2\13"+
		"\35\3\35\3\35\3\35\3\35\7\35\u03e8\n\35\f\35\16\35\u03eb\13\35\3\35\3"+
		"\35\5\35\u03ef\n\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\7\35\u03f9"+
		"\n\35\f\35\16\35\u03fc\13\35\3\35\3\35\7\35\u0400\n\35\f\35\16\35\u0403"+
		"\13\35\3\35\3\35\3\35\3\35\7\35\u0409\n\35\f\35\16\35\u040c\13\35\3\35"+
		"\3\35\5\35\u0410\n\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\7\35\u041a"+
		"\n\35\f\35\16\35\u041d\13\35\3\35\3\35\7\35\u0421\n\35\f\35\16\35\u0424"+
		"\13\35\3\35\3\35\3\35\3\35\7\35\u042a\n\35\f\35\16\35\u042d\13\35\3\35"+
		"\3\35\5\35\u0431\n\35\3\35\3\35\3\35\7\35\u0436\n\35\f\35\16\35\u0439"+
		"\13\35\3\35\3\35\3\35\3\35\7\35\u043f\n\35\f\35\16\35\u0442\13\35\3\35"+
		"\3\35\5\35\u0446\n\35\5\35\u0448\n\35\3\36\3\36\3\36\5\36\u044d\n\36\3"+
		"\37\3\37\3\37\3\37\6\37\u0453\n\37\r\37\16\37\u0454\3\37\3\37\3 \3 \3"+
		" \7 \u045c\n \f \16 \u045f\13 \3!\5!\u0462\n!\3!\3!\5!\u0466\n!\3!\3!"+
		"\3!\5!\u046b\n!\3!\3!\3!\3!\5!\u0471\n!\3!\3!\3!\3!\5!\u0477\n!\3!\3!"+
		"\3!\5!\u047c\n!\3!\3!\3!\5!\u0481\n!\3!\3!\3!\5!\u0486\n!\3!\3!\3!\5!"+
		"\u048b\n!\3!\5!\u048e\n!\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3"+
		"\"\3\"\5\"\u049d\n\"\3#\3#\5#\u04a1\n#\3$\3$\5$\u04a5\n$\3$\5$\u04a8\n"+
		"$\3$\5$\u04ab\n$\3$\3$\3$\3$\5$\u04b1\n$\3$\5$\u04b4\n$\3$\3$\3$\3$\5"+
		"$\u04ba\n$\3$\3$\3$\3$\3$\7$\u04c1\n$\f$\16$\u04c4\13$\5$\u04c6\n$\3$"+
		"\3$\3$\3$\3$\3$\3$\7$\u04cf\n$\f$\16$\u04d2\13$\5$\u04d4\n$\3%\3%\5%\u04d8"+
		"\n%\3%\3%\5%\u04dc\n%\3%\3%\6%\u04e0\n%\r%\16%\u04e1\3%\3%\5%\u04e6\n"+
		"%\3%\3%\5%\u04ea\n%\5%\u04ec\n%\3%\5%\u04ef\n%\3%\5%\u04f2\n%\3%\5%\u04f5"+
		"\n%\3%\3%\6%\u04f9\n%\r%\16%\u04fa\3%\3%\5%\u04ff\n%\3%\5%\u0502\n%\3"+
		"%\5%\u0505\n%\3%\5%\u0508\n%\3%\5%\u050b\n%\5%\u050d\n%\3&\3&\5&\u0511"+
		"\n&\3\'\3\'\3\'\3\'\5\'\u0517\n\'\3\'\3\'\3\'\3\'\5\'\u051d\n\'\3\'\7"+
		"\'\u0520\n\'\f\'\16\'\u0523\13\'\5\'\u0525\n\'\3(\3(\3(\3(\5(\u052b\n"+
		"(\3)\3)\5)\u052f\n)\3*\3*\3*\3*\3*\3*\5*\u0537\n*\3+\3+\5+\u053b\n+\3"+
		"+\5+\u053e\n+\3+\5+\u0541\n+\3+\3+\3+\3+\3+\3+\3+\5+\u054a\n+\3+\3+\5"+
		"+\u054e\n+\3+\5+\u0551\n+\3+\3+\5+\u0555\n+\3,\3,\5,\u0559\n,\3,\5,\u055c"+
		"\n,\3,\5,\u055f\n,\3,\3,\3,\5,\u0564\n,\3,\3,\3,\3,\5,\u056a\n,\7,\u056c"+
		"\n,\f,\16,\u056f\13,\3,\3,\3,\3,\3,\3,\3,\5,\u0578\n,\3,\3,\3,\3,\5,\u057e"+
		"\n,\7,\u0580\n,\f,\16,\u0583\13,\3,\3,\3,\5,\u0588\n,\3,\3,\5,\u058c\n"+
		",\3-\3-\5-\u0590\n-\3-\5-\u0593\n-\3-\3-\5-\u0597\n-\3-\5-\u059a\n-\3"+
		"-\3-\3-\3-\7-\u05a0\n-\f-\16-\u05a3\13-\3-\3-\5-\u05a7\n-\3-\5-\u05aa"+
		"\n-\3-\5-\u05ad\n-\3.\3.\5.\u05b1\n.\3.\5.\u05b4\n.\3.\3.\3.\3.\3.\7."+
		"\u05bb\n.\f.\16.\u05be\13.\3.\3.\5.\u05c2\n.\3/\3/\3/\3/\3/\7/\u05c9\n"+
		"/\f/\16/\u05cc\13/\3\60\3\60\5\60\u05d0\n\60\3\61\3\61\3\61\7\61\u05d5"+
		"\n\61\f\61\16\61\u05d8\13\61\3\62\3\62\7\62\u05dc\n\62\f\62\16\62\u05df"+
		"\13\62\3\62\3\62\3\62\7\62\u05e4\n\62\f\62\16\62\u05e7\13\62\3\62\3\62"+
		"\5\62\u05eb\n\62\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u05f3\n\63\3\63\5"+
		"\63\u05f6\n\63\3\63\5\63\u05f9\n\63\3\63\3\63\3\63\7\63\u05fe\n\63\f\63"+
		"\16\63\u0601\13\63\5\63\u0603\n\63\3\63\3\63\3\63\3\63\3\63\5\63\u060a"+
		"\n\63\3\63\5\63\u060d\n\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u0615\n"+
		"\63\3\64\3\64\3\64\3\64\5\64\u061b\n\64\3\64\3\64\3\64\3\64\3\65\3\65"+
		"\3\65\3\65\3\65\5\65\u0626\n\65\3\66\5\66\u0629\n\66\3\66\3\66\3\66\3"+
		"\66\3\66\3\66\3\66\3\66\3\66\5\66\u0634\n\66\3\66\3\66\3\66\3\66\5\66"+
		"\u063a\n\66\3\66\3\66\5\66\u063e\n\66\3\66\3\66\3\66\3\66\3\66\3\66\3"+
		"\66\3\66\3\66\5\66\u0649\n\66\3\66\3\66\3\66\5\66\u064e\n\66\5\66\u0650"+
		"\n\66\3\66\3\66\5\66\u0654\n\66\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67"+
		"\5\67\u065e\n\67\38\38\38\38\38\38\38\38\58\u0668\n8\39\39\79\u066c\n"+
		"9\f9\169\u066f\139\39\39\59\u0673\n9\39\59\u0676\n9\39\59\u0679\n9\39"+
		"\59\u067c\n9\39\59\u067f\n9\39\59\u0682\n9\39\39\79\u0686\n9\f9\169\u0689"+
		"\139\39\39\59\u068d\n9\39\59\u0690\n9\39\59\u0693\n9\39\59\u0696\n9\3"+
		"9\59\u0699\n9\39\59\u069c\n9\59\u069e\n9\3:\3:\7:\u06a2\n:\f:\16:\u06a5"+
		"\13:\3:\3:\5:\u06a9\n:\3:\5:\u06ac\n:\3:\5:\u06af\n:\3:\5:\u06b2\n:\3"+
		":\5:\u06b5\n:\3;\3;\5;\u06b9\n;\3;\3;\3<\3<\5<\u06bf\n<\3<\3<\5<\u06c3"+
		"\n<\3=\3=\3=\3=\3=\3=\3=\3=\5=\u06cd\n=\3>\3>\5>\u06d1\n>\3>\3>\7>\u06d5"+
		"\n>\f>\16>\u06d8\13>\3?\3?\3?\3?\3?\3?\5?\u06e0\n?\3?\5?\u06e3\n?\3?\3"+
		"?\5?\u06e7\n?\3?\5?\u06ea\n?\3?\3?\5?\u06ee\n?\3?\3?\5?\u06f2\n?\3?\5"+
		"?\u06f5\n?\5?\u06f7\n?\3@\3@\3@\3@\7@\u06fd\n@\f@\16@\u0700\13@\3@\3@"+
		"\3@\3@\3@\3@\3@\3@\3@\5@\u070b\n@\3@\3@\6@\u070f\n@\r@\16@\u0710\5@\u0713"+
		"\n@\3@\3@\6@\u0717\n@\r@\16@\u0718\5@\u071b\n@\5@\u071d\n@\3A\3A\3A\3"+
		"A\5A\u0723\nA\3A\3A\3A\3A\3A\3A\5A\u072b\nA\3B\3B\3B\3B\3B\3B\5B\u0733"+
		"\nB\3C\3C\3C\3C\5C\u0739\nC\3D\3D\3D\3D\3D\7D\u0740\nD\fD\16D\u0743\13"+
		"D\3D\3D\5D\u0747\nD\3E\3E\3E\3F\3F\5F\u074e\nF\3G\3G\3G\3G\5G\u0754\n"+
		"G\3G\3G\3G\3G\3G\5G\u075b\nG\3H\3H\3H\5H\u0760\nH\3I\3I\3I\3I\5I\u0766"+
		"\nI\3I\3I\3I\5I\u076b\nI\3J\3J\3J\3J\5J\u0771\nJ\3K\3K\3L\3L\3L\5L\u0778"+
		"\nL\5L\u077a\nL\3L\3L\3L\5L\u077f\nL\5L\u0781\nL\3M\3M\5M\u0785\nM\3M"+
		"\3M\3M\3M\5M\u078b\nM\3M\5M\u078e\nM\3N\3N\3O\3O\3O\3O\5O\u0796\nO\3P"+
		"\3P\5P\u079a\nP\3Q\3Q\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\6R\u07ac"+
		"\nR\rR\16R\u07ad\3S\3S\3S\3S\3S\5S\u07b5\nS\5S\u07b7\nS\3T\3T\3T\6T\u07bc"+
		"\nT\rT\16T\u07bd\5T\u07c0\nT\3U\3U\5U\u07c4\nU\3V\3V\3V\5V\u07c9\nV\3"+
		"W\3W\3W\3W\3W\3W\3W\3W\3W\5W\u07d4\nW\3X\3X\3X\5X\u07d9\nX\3Y\3Y\3Z\3"+
		"Z\5Z\u07df\nZ\3[\5[\u07e2\n[\3[\3[\5[\u07e6\n[\3[\6[\u07e9\n[\r[\16[\u07ea"+
		"\3[\5[\u07ee\n[\3[\3[\5[\u07f2\n[\3[\3[\5[\u07f6\n[\5[\u07f8\n[\3\\\3"+
		"\\\3]\5]\u07fd\n]\3]\3]\3^\5^\u0802\n^\3^\3^\3_\3_\3_\3_\3_\3_\3_\3_\3"+
		"_\5_\u080f\n_\3_\5_\u0812\n_\3`\3`\5`\u0816\n`\3`\5`\u0819\n`\3`\5`\u081c"+
		"\n`\3`\3`\3`\5`\u0821\n`\3`\5`\u0824\n`\3`\3`\3`\5`\u0829\n`\3`\3`\3`"+
		"\5`\u082e\n`\3`\5`\u0831\n`\3`\3`\3`\5`\u0836\n`\3`\5`\u0839\n`\3`\3`"+
		"\3`\3`\5`\u083f\n`\3`\5`\u0842\n`\3`\3`\5`\u0846\n`\3`\5`\u0849\n`\3`"+
		"\5`\u084c\n`\3`\3`\5`\u0850\n`\3`\5`\u0853\n`\3`\5`\u0856\n`\3`\3`\5`"+
		"\u085a\n`\3`\5`\u085d\n`\3`\5`\u0860\n`\3`\5`\u0863\n`\3`\3`\5`\u0867"+
		"\n`\3`\5`\u086a\n`\3`\5`\u086d\n`\3`\3`\3`\5`\u0872\n`\3`\3`\3`\5`\u0877"+
		"\n`\3`\3`\3`\5`\u087c\n`\3`\5`\u087f\n`\3`\3`\3`\5`\u0884\n`\3`\5`\u0887"+
		"\n`\3`\3`\3`\5`\u088c\n`\3`\5`\u088f\n`\3`\3`\5`\u0893\n`\3`\3`\5`\u0897"+
		"\n`\3a\3a\3a\3a\7a\u089d\na\fa\16a\u08a0\13a\3a\3a\3b\3b\5b\u08a6\nb\3"+
		"b\3b\5b\u08aa\nb\3b\3b\3b\5b\u08af\nb\3b\5b\u08b2\nb\3b\3b\3b\5b\u08b7"+
		"\nb\3b\3b\5b\u08bb\nb\5b\u08bd\nb\3c\3c\3c\3c\3d\3d\3d\3d\3d\3d\3e\3e"+
		"\3e\3e\5e\u08cd\ne\3e\3e\3f\3f\3f\7f\u08d4\nf\ff\16f\u08d7\13f\3g\3g\3"+
		"g\7g\u08dc\ng\fg\16g\u08df\13g\3h\3h\3h\3h\7h\u08e5\nh\fh\16h\u08e8\13"+
		"h\3h\3h\3i\3i\3i\7i\u08ef\ni\fi\16i\u08f2\13i\3j\3j\3j\7j\u08f7\nj\fj"+
		"\16j\u08fa\13j\3k\3k\5k\u08fe\nk\3l\3l\3l\3l\3l\5l\u0905\nl\3l\3l\3l\3"+
		"l\3l\5l\u090c\nl\3l\3l\3l\5l\u0911\nl\3m\3m\3m\5m\u0916\nm\3m\3m\3m\3"+
		"m\3m\3m\3m\3m\3m\3m\3m\3m\3m\3m\3m\3m\3m\3m\3m\3m\3m\3m\3m\3m\3m\3m\3"+
		"m\3m\3m\6m\u0935\nm\rm\16m\u0936\3m\3m\5m\u093b\nm\3m\3m\3m\3m\6m\u0941"+
		"\nm\rm\16m\u0942\3m\3m\5m\u0947\nm\3m\3m\3m\3m\3m\3m\3m\5m\u0950\nm\3"+
		"m\3m\3m\3m\3m\3m\5m\u0958\nm\3m\3m\3m\5m\u095d\nm\3m\3m\3m\3m\3m\3m\5"+
		"m\u0965\nm\3m\3m\3m\5m\u096a\nm\3m\3m\3m\5m\u096f\nm\5m\u0971\nm\3m\3"+
		"m\3m\3m\3m\3m\3m\5m\u097a\nm\3m\3m\3m\5m\u097f\nm\3m\3m\3m\3m\3m\3m\5"+
		"m\u0987\nm\3m\3m\3m\5m\u098c\nm\3m\3m\3m\3m\3m\3m\5m\u0994\nm\3m\3m\3"+
		"m\3m\3m\3m\5m\u099c\nm\3m\5m\u099f\nm\3m\3m\3m\3m\3m\3m\3m\3m\5m\u09a9"+
		"\nm\3m\3m\3m\3m\3m\3m\3m\3m\3m\5m\u09b4\nm\3n\3n\3n\3n\3n\3o\3o\3o\3o"+
		"\7o\u09bf\no\fo\16o\u09c2\13o\3o\3o\3o\3o\3o\5o\u09c9\no\3p\3p\5p\u09cd"+
		"\np\3q\3q\3q\5q\u09d2\nq\3q\3q\3q\3q\3q\3q\3q\5q\u09db\nq\3q\5q\u09de"+
		"\nq\3q\3q\3q\3q\3q\3q\3q\3q\3q\3q\5q\u09ea\nq\3q\3q\3q\3q\3q\3q\5q\u09f2"+
		"\nq\3q\3q\3q\3q\3q\3q\7q\u09fa\nq\fq\16q\u09fd\13q\5q\u09ff\nq\3q\3q\5"+
		"q\u0a03\nq\3q\3q\5q\u0a07\nq\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3"+
		"r\3r\3r\3r\3r\3r\3r\3r\3r\3r\5r\u0a20\nr\3s\3s\3s\3s\3s\3t\3t\3t\3t\5"+
		"t\u0a2b\nt\3t\3t\3t\3t\3t\5t\u0a32\nt\7t\u0a34\nt\ft\16t\u0a37\13t\3u"+
		"\3u\3u\3u\5u\u0a3d\nu\3v\3v\3v\3v\3v\3v\5v\u0a45\nv\3v\3v\3v\5v\u0a4a"+
		"\nv\3v\3v\3v\3v\7v\u0a50\nv\fv\16v\u0a53\13v\3w\3w\3w\5w\u0a58\nw\3w\3"+
		"w\3w\3w\3w\3w\3w\3w\5w\u0a62\nw\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\5w\u0a6f"+
		"\nw\3w\3w\3w\3w\5w\u0a75\nw\3w\3w\3w\3w\5w\u0a7b\nw\3w\3w\3w\3w\3w\3w"+
		"\3w\3w\3w\3w\3w\3w\3w\3w\5w\u0a8b\nw\3w\3w\3w\3w\5w\u0a91\nw\3w\3w\3w"+
		"\3w\3w\3w\3w\7w\u0a9a\nw\fw\16w\u0a9d\13w\3x\3x\3x\3x\3x\3x\3x\3x\3x\3"+
		"x\3x\3x\3x\3x\7x\u0aad\nx\fx\16x\u0ab0\13x\3x\3x\3x\3x\3x\3x\3x\6x\u0ab9"+
		"\nx\rx\16x\u0aba\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\5x\u0acc"+
		"\nx\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\7x\u0add\nx\fx\16x\u0ae0"+
		"\13x\3y\3y\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\5z\u0af2\nz\3{\3"+
		"{\3{\3{\3{\3{\3{\5{\u0afb\n{\3|\3|\3|\3|\3|\3|\3|\5|\u0b04\n|\3}\3}\3"+
		"~\3~\3~\3~\3~\5~\u0b0d\n~\3\177\3\177\3\u0080\3\u0080\3\u0081\3\u0081"+
		"\3\u0082\3\u0082\3\u0083\3\u0083\3\u0084\3\u0084\3\u0085\3\u0085\3\u0085"+
		"\2\5\u00ea\u00ec\u00ee\u0086\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \""+
		"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084"+
		"\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c"+
		"\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4"+
		"\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc"+
		"\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4"+
		"\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc"+
		"\u00fe\u0100\u0102\u0104\u0106\u0108\2G\4\2\u01c6\u01c6\u01cc\u01cc\5"+
		"\2@@\u0090\u0090\u00a5\u00a5\5\2((\u0142\u0142\u0181\u0181\6\2((\u0162"+
		"\u0162\u01c5\u01c5\u020c\u020c\4\2\u0122\u0122\u0178\u0178\4\2HH\u0081"+
		"\u0081\5\2((\u0153\u0153\u016d\u016d\5\2((\u014f\u014f\u02b4\u02b4\4\2"+
		"\u0226\u0226\u0247\u0247\4\2\u00ff\u0100\u0106\u0106\4\2JJTT\5\2\u0171"+
		"\u0171\u01d5\u01d5\u020e\u020e\4\2@@\u0090\u0090\3\2\u0128\u0129\3\2\u040b"+
		"\u040c\4\2\u0415\u0415\u041d\u041d\5\2\u016c\u016c\u018f\u018f\u01c3\u01c3"+
		"\4\2((\u040b\u040c\t\2((\u0135\u0135\u0137\u0137\u0153\u0153\u016d\u016d"+
		"\u01eb\u01eb\u041d\u041d\3\2\u040c\u040d\5\2))FFaa\4\2\b\b//\4\2\u00ac"+
		"\u00ac\u0244\u0244\4\2\16\16++\5\2==HH\u00aa\u00aa\4\2!!LL\4\2YY\u0087"+
		"\u0087\4\2\b\b/\60\3\2\u021b\u021c\4\2\u0130\u0130\u0169\u0169\3\2\u0421"+
		"\u0422\5\2\u02af\u02ba\u0415\u0415\u041d\u041e\4\2\u040b\u040d\u0416\u0416"+
		"\4\2::\u00a2\u00a2\4\2jj\u0419\u0419\7\2\30\30\u00ce\u00d0\u00d7\u00d7"+
		"\u00d9\u00dc\u01c0\u01c0\4\2\30\30\u00cf\u00cf\4\2\30\30\u00ce\u00ce\3"+
		"\2\u00b4\u00bf\4\2\u00a7\u00a7\u020d\u020d\4\2\u00c3\u00c8\u016d\u016d"+
		"\b\2\u00c9\u00c9\u00d4\u00d4\u00d6\u00d6\u00d8\u00d8\u00df\u00df\u0120"+
		"\u0121\6\2\u00ca\u00cd\u00d2\u00d3\u00d5\u00d5\u011e\u011e\4\2\u008c\u008c"+
		"\u00dd\u00dd\4\2\u018c\u018c\u02bf\u02c7\4\2\u00d2\u00d2\u01c0\u01c0\5"+
		"\2\u00c9\u00ca\u00cc\u00cc\u018c\u018c\4\2##\u00fd\u0100\3\2\u0109\u010a"+
		"\5\2\21\21WW\u00a0\u00a0\4\2\u00ce\u00ce\u00d2\u00d2\4\2\u00c9\u00ca\u00cc"+
		"\u00cc\5\2\16\16++\u037c\u037c\5\2\u00ed\u00ed\u00f3\u00f4\u00f9\u00f9"+
		"\5\2\u00ee\u00f0\u00f5\u00f8\u00fa\u00fc\4\2\u01ca\u01ca\u01d8\u01d8\4"+
		"\2hh\u0400\u0400\5\2::\u00a2\u00a2\u023d\u023d\4\2}}\u0088\u0088\5\2\b"+
		"\b\u0115\u0115\u0213\u0213\6\2hh\u03f8\u03f8\u03fa\u03fa\u0400\u0401\3"+
		"\2\u03f5\u03fc\3\2\u0287\u02ae\3\2\u02bb\u02be\3\2\u025e\u0266\3\2\u0256"+
		"\u025d\5\2\u00c9\u00cd\u00da\u00da\u00dd\u00dd\26\2\"\"..DDkkqq\u0099"+
		"\u0099\u00df\u00df\u00ed\u00fc\u0110\u0184\u0186\u0225\u0227\u0246\u0249"+
		"\u0250\u0255\u0255\u0268\u0270\u0275\u0276\u0278\u027e\u0280\u0286\u02b4"+
		"\u02b4\u02e0\u02e0\u0386\u0386\24\2%%YY\u0087\u0087\u0089\u0089\u00c9"+
		"\u00cb\u00cd\u00cd\u00eb\u00ec\u00f1\u00f1\u0108\u0108\u0185\u0185\u0248"+
		"\u0248\u0256\u025d\u0280\u0280\u02bf\u02bf\u02c2\u02df\u02e1\u0385\u0387"+
		"\u03eb\u03fc\u03fc\2\u0d2c\2\u010b\3\2\2\2\4\u011c\3\2\2\2\6\u012b\3\2"+
		"\2\2\b\u012d\3\2\2\2\n\u0131\3\2\2\2\f\u0137\3\2\2\2\16\u0139\3\2\2\2"+
		"\20\u015d\3\2\2\2\22\u016d\3\2\2\2\24\u01bd\3\2\2\2\26\u01bf\3\2\2\2\30"+
		"\u01c3\3\2\2\2\32\u01d3\3\2\2\2\34\u01d5\3\2\2\2\36\u020f\3\2\2\2 \u021b"+
		"\3\2\2\2\"\u0230\3\2\2\2$\u0277\3\2\2\2&\u0279\3\2\2\2(\u0295\3\2\2\2"+
		"*\u029d\3\2\2\2,\u02bb\3\2\2\2.\u034d\3\2\2\2\60\u034f\3\2\2\2\62\u0352"+
		"\3\2\2\2\64\u039c\3\2\2\2\66\u03b3\3\2\2\28\u0447\3\2\2\2:\u044c\3\2\2"+
		"\2<\u044e\3\2\2\2>\u0458\3\2\2\2@\u048d\3\2\2\2B\u049c\3\2\2\2D\u04a0"+
		"\3\2\2\2F\u04a2\3\2\2\2H\u050c\3\2\2\2J\u0510\3\2\2\2L\u0524\3\2\2\2N"+
		"\u0526\3\2\2\2P\u052e\3\2\2\2R\u0536\3\2\2\2T\u0538\3\2\2\2V\u0556\3\2"+
		"\2\2X\u058d\3\2\2\2Z\u05ae\3\2\2\2\\\u05c3\3\2\2\2^\u05cd\3\2\2\2`\u05d1"+
		"\3\2\2\2b\u05ea\3\2\2\2d\u0614\3\2\2\2f\u0616\3\2\2\2h\u0625\3\2\2\2j"+
		"\u0653\3\2\2\2l\u065d\3\2\2\2n\u0667\3\2\2\2p\u069d\3\2\2\2r\u069f\3\2"+
		"\2\2t\u06b6\3\2\2\2v\u06bc\3\2\2\2x\u06cc\3\2\2\2z\u06d0\3\2\2\2|\u06f6"+
		"\3\2\2\2~\u071c\3\2\2\2\u0080\u072a\3\2\2\2\u0082\u0732\3\2\2\2\u0084"+
		"\u0734\3\2\2\2\u0086\u073a\3\2\2\2\u0088\u0748\3\2\2\2\u008a\u074b\3\2"+
		"\2\2\u008c\u074f\3\2\2\2\u008e\u075f\3\2\2\2\u0090\u076a\3\2\2\2\u0092"+
		"\u076c\3\2\2\2\u0094\u0772\3\2\2\2\u0096\u0780\3\2\2\2\u0098\u0784\3\2"+
		"\2\2\u009a\u078f\3\2\2\2\u009c\u0795\3\2\2\2\u009e\u0799\3\2\2\2\u00a0"+
		"\u079b\3\2\2\2\u00a2\u079d\3\2\2\2\u00a4\u07af\3\2\2\2\u00a6\u07bf\3\2"+
		"\2\2\u00a8\u07c3\3\2\2\2\u00aa\u07c8\3\2\2\2\u00ac\u07d3\3\2\2\2\u00ae"+
		"\u07d8\3\2\2\2\u00b0\u07da\3\2\2\2\u00b2\u07de\3\2\2\2\u00b4\u07f7\3\2"+
		"\2\2\u00b6\u07f9\3\2\2\2\u00b8\u07fc\3\2\2\2\u00ba\u0801\3\2\2\2\u00bc"+
		"\u0811\3\2\2\2\u00be\u0896\3\2\2\2\u00c0\u0898\3\2\2\2\u00c2\u08bc\3\2"+
		"\2\2\u00c4\u08be\3\2\2\2\u00c6\u08c2\3\2\2\2\u00c8\u08c8\3\2\2\2\u00ca"+
		"\u08d0\3\2\2\2\u00cc\u08d8\3\2\2\2\u00ce\u08e0\3\2\2\2\u00d0\u08eb\3\2"+
		"\2\2\u00d2\u08f3\3\2\2\2\u00d4\u08fd\3\2\2\2\u00d6\u0910\3\2\2\2\u00d8"+
		"\u09b3\3\2\2\2\u00da\u09b5\3\2\2\2\u00dc\u09c8\3\2\2\2\u00de\u09ca\3\2"+
		"\2\2\u00e0\u0a06\3\2\2\2\u00e2\u0a1f\3\2\2\2\u00e4\u0a21\3\2\2\2\u00e6"+
		"\u0a2a\3\2\2\2\u00e8\u0a3c\3\2\2\2\u00ea\u0a49\3\2\2\2\u00ec\u0a54\3\2"+
		"\2\2\u00ee\u0acb\3\2\2\2\u00f0\u0ae1\3\2\2\2\u00f2\u0af1\3\2\2\2\u00f4"+
		"\u0afa\3\2\2\2\u00f6\u0b03\3\2\2\2\u00f8\u0b05\3\2\2\2\u00fa\u0b0c\3\2"+
		"\2\2\u00fc\u0b0e\3\2\2\2\u00fe\u0b10\3\2\2\2\u0100\u0b12\3\2\2\2\u0102"+
		"\u0b14\3\2\2\2\u0104\u0b16\3\2\2\2\u0106\u0b18\3\2\2\2\u0108\u0b1a\3\2"+
		"\2\2\u010a\u010c\5\4\3\2\u010b\u010a\3\2\2\2\u010b\u010c\3\2\2\2\u010c"+
		"\u010e\3\2\2\2\u010d\u010f\7\u03f9\2\2\u010e\u010d\3\2\2\2\u010e\u010f"+
		"\3\2\2\2\u010f\u0110\3\2\2\2\u0110\u0111\7\2\2\3\u0111\3\3\2\2\2\u0112"+
		"\u0114\5\6\4\2\u0113\u0115\7\u03f9\2\2\u0114\u0113\3\2\2\2\u0114\u0115"+
		"\3\2\2\2\u0115\u0117\3\2\2\2\u0116\u0118\7\u0409\2\2\u0117\u0116\3\2\2"+
		"\2\u0117\u0118\3\2\2\2\u0118\u011b\3\2\2\2\u0119\u011b\5\b\5\2\u011a\u0112"+
		"\3\2\2\2\u011a\u0119\3\2\2\2\u011b\u011e\3\2\2\2\u011c\u011a\3\2\2\2\u011c"+
		"\u011d\3\2\2\2\u011d\u0127\3\2\2\2\u011e\u011c\3\2\2\2\u011f\u0124\5\6"+
		"\4\2\u0120\u0122\7\u03f9\2\2\u0121\u0120\3\2\2\2\u0121\u0122\3\2\2\2\u0122"+
		"\u0123\3\2\2\2\u0123\u0125\7\u0409\2\2\u0124\u0121\3\2\2\2\u0124\u0125"+
		"\3\2\2\2\u0125\u0128\3\2\2\2\u0126\u0128\5\b\5\2\u0127\u011f\3\2\2\2\u0127"+
		"\u0126\3\2\2\2\u0128\5\3\2\2\2\u0129\u012c\5\f\7\2\u012a\u012c\5\n\6\2"+
		"\u012b\u0129\3\2\2\2\u012b\u012a\3\2\2\2\u012c\7\3\2\2\2\u012d\u012e\7"+
		"\u0409\2\2\u012e\t\3\2\2\2\u012f\u0132\5\16\b\2\u0130\u0132\5\24\13\2"+
		"\u0131\u012f\3\2\2\2\u0131\u0130\3\2\2\2\u0132\13\3\2\2\2\u0133\u0138"+
		"\5H%\2\u0134\u0138\5F$\2\u0135\u0138\5J&\2\u0136\u0138\5D#\2\u0137\u0133"+
		"\3\2\2\2\u0137\u0134\3\2\2\2\u0137\u0135\3\2\2\2\u0137\u0136\3\2\2\2\u0138"+
		"\r\3\2\2\2\u0139\u013b\7 \2\2\u013a\u013c\t\2\2\2\u013b\u013a\3\2\2\2"+
		"\u013b\u013c\3\2\2\2\u013c\u013e\3\2\2\2\u013d\u013f\t\3\2\2\u013e\u013d"+
		"\3\2\2\2\u013e\u013f\3\2\2\2\u013f\u0140\3\2\2\2\u0140\u0141\7J\2\2\u0141"+
		"\u0143\5\u00aaV\2\u0142\u0144\5\20\t\2\u0143\u0142\3\2\2\2\u0143\u0144"+
		"\3\2\2\2\u0144\u0145\3\2\2\2\u0145\u0146\7l\2\2\u0146\u0147\5\u0094K\2"+
		"\u0147\u014b\5\u00ceh\2\u0148\u014a\5\22\n\2\u0149\u0148\3\2\2\2\u014a"+
		"\u014d\3\2\2\2\u014b\u0149\3\2\2\2\u014b\u014c\3\2\2\2\u014c\u015a\3\2"+
		"\2\2\u014d\u014b\3\2\2\2\u014e\u0150\7\u0114\2\2\u014f\u0151\7\u03fd\2"+
		"\2\u0150\u014f\3\2\2\2\u0150\u0151\3\2\2\2\u0151\u0152\3\2\2\2\u0152\u0159"+
		"\t\4\2\2\u0153\u0155\7_\2\2\u0154\u0156\7\u03fd\2\2\u0155\u0154\3\2\2"+
		"\2\u0155\u0156\3\2\2\2\u0156\u0157\3\2\2\2\u0157\u0159\t\5\2\2\u0158\u014e"+
		"\3\2\2\2\u0158\u0153\3\2\2\2\u0159\u015c\3\2\2\2\u015a\u0158\3\2\2\2\u015a"+
		"\u015b\3\2\2\2\u015b\17\3\2\2\2\u015c\u015a\3\2\2\2\u015d\u015e\7\u00ab"+
		"\2\2\u015e\u015f\t\6\2\2\u015f\21\3\2\2\2\u0160\u0162\7\u018d\2\2\u0161"+
		"\u0163\7\u03fd\2\2\u0162\u0161\3\2\2\2\u0162\u0163\3\2\2\2\u0163\u0164"+
		"\3\2\2\2\u0164\u016e\5\u00b2Z\2\u0165\u016e\5\20\t\2\u0166\u0167\7\u00b0"+
		"\2\2\u0167\u0168\7\u01d4\2\2\u0168\u016e\5\u00aaV\2\u0169\u016a\7\u0133"+
		"\2\2\u016a\u016e\7\u0415\2\2\u016b\u016e\7\u0185\2\2\u016c\u016e\7\u0248"+
		"\2\2\u016d\u0160\3\2\2\2\u016d\u0165\3\2\2\2\u016d\u0166\3\2\2\2\u016d"+
		"\u0169\3\2\2\2\u016d\u016b\3\2\2\2\u016d\u016c\3\2\2\2\u016e\23\3\2\2"+
		"\2\u016f\u0171\7 \2\2\u0170\u0172\7\u0231\2\2\u0171\u0170\3\2\2\2\u0171"+
		"\u0172\3\2\2\2\u0172\u0173\3\2\2\2\u0173\u0175\7\u009c\2\2\u0174\u0176"+
		"\5\26\f\2\u0175\u0174\3\2\2\2\u0175\u0176\3\2\2\2\u0176\u0177\3\2\2\2"+
		"\u0177\u017f\5\u0094K\2\u0178\u0179\7Z\2\2\u0179\u0180\5\u0094K\2\u017a"+
		"\u017b\7\u0406\2\2\u017b\u017c\7Z\2\2\u017c\u017d\5\u0094K\2\u017d\u017e"+
		"\7\u0407\2\2\u017e\u0180\3\2\2\2\u017f\u0178\3\2\2\2\u017f\u017a\3\2\2"+
		"\2\u0180\u01be\3\2\2\2\u0181\u0183\7 \2\2\u0182\u0184\7\u0231\2\2\u0183"+
		"\u0182\3\2\2\2\u0183\u0184\3\2\2\2\u0184\u0185\3\2\2\2\u0185\u0187\7\u009c"+
		"\2\2\u0186\u0188\5\26\f\2\u0187\u0186\3\2\2\2\u0187\u0188\3\2\2\2\u0188"+
		"\u0189\3\2\2\2\u0189\u018b\5\u0094K\2\u018a\u018c\5\30\r\2\u018b\u018a"+
		"\3\2\2\2\u018b\u018c\3\2\2\2\u018c\u0197\3\2\2\2\u018d\u0194\5.\30\2\u018e"+
		"\u0190\7\u0408\2\2\u018f\u018e\3\2\2\2\u018f\u0190\3\2\2\2\u0190\u0191"+
		"\3\2\2\2\u0191\u0193\5.\30\2\u0192\u018f\3\2\2\2\u0193\u0196\3\2\2\2\u0194"+
		"\u0192\3\2\2\2\u0194\u0195\3\2\2\2\u0195\u0198\3\2\2\2\u0196\u0194\3\2"+
		"\2\2\u0197\u018d\3\2\2\2\u0197\u0198\3\2\2\2\u0198\u019a\3\2\2\2\u0199"+
		"\u019b\5\62\32\2\u019a\u0199\3\2\2\2\u019a\u019b\3\2\2\2\u019b\u019d\3"+
		"\2\2\2\u019c\u019e\t\7\2\2\u019d\u019c\3\2\2\2\u019d\u019e\3\2\2\2\u019e"+
		"\u01a0\3\2\2\2\u019f\u01a1\7\r\2\2\u01a0\u019f\3\2\2\2\u01a0\u01a1\3\2"+
		"\2\2\u01a1\u01a2\3\2\2\2\u01a2\u01a3\5H%\2\u01a3\u01be\3\2\2\2\u01a4\u01a6"+
		"\7 \2\2\u01a5\u01a7\7\u0231\2\2\u01a6\u01a5\3\2\2\2\u01a6\u01a7\3\2\2"+
		"\2\u01a7\u01a8\3\2\2\2\u01a8\u01aa\7\u009c\2\2\u01a9\u01ab\5\26\f\2\u01aa"+
		"\u01a9\3\2\2\2\u01aa\u01ab\3\2\2\2\u01ab\u01ac\3\2\2\2\u01ac\u01ad\5\u0094"+
		"K\2\u01ad\u01b8\5\30\r\2\u01ae\u01b5\5.\30\2\u01af\u01b1\7\u0408\2\2\u01b0"+
		"\u01af\3\2\2\2\u01b0\u01b1\3\2\2\2\u01b1\u01b2\3\2\2\2\u01b2\u01b4\5."+
		"\30\2\u01b3\u01b0\3\2\2\2\u01b4\u01b7\3\2\2\2\u01b5\u01b3\3\2\2\2\u01b5"+
		"\u01b6\3\2\2\2\u01b6\u01b9\3\2\2\2\u01b7\u01b5\3\2\2\2\u01b8\u01ae\3\2"+
		"\2\2\u01b8\u01b9\3\2\2\2\u01b9\u01bb\3\2\2\2\u01ba\u01bc\5\62\32\2\u01bb"+
		"\u01ba\3\2\2\2\u01bb\u01bc\3\2\2\2\u01bc\u01be\3\2\2\2\u01bd\u016f\3\2"+
		"\2\2\u01bd\u0181\3\2\2\2\u01bd\u01a4\3\2\2\2\u01be\25\3\2\2\2\u01bf\u01c0"+
		"\7G\2\2\u01c0\u01c1\7h\2\2\u01c1\u01c2\7\67\2\2\u01c2\27\3\2\2\2\u01c3"+
		"\u01c4\7\u0406\2\2\u01c4\u01c9\5\32\16\2\u01c5\u01c6\7\u0408\2\2\u01c6"+
		"\u01c8\5\32\16\2\u01c7\u01c5\3\2\2\2\u01c8\u01cb\3\2\2\2\u01c9\u01c7\3"+
		"\2\2\2\u01c9\u01ca\3\2\2\2\u01ca\u01cc\3\2\2\2\u01cb\u01c9\3\2\2\2\u01cc"+
		"\u01cd\7\u0407\2\2\u01cd\31\3\2\2\2\u01ce\u01cf\5\u00aaV\2\u01cf\u01d0"+
		"\5\34\17\2\u01d0\u01d4\3\2\2\2\u01d1\u01d4\5$\23\2\u01d2\u01d4\5,\27\2"+
		"\u01d3\u01ce\3\2\2\2\u01d3\u01d1\3\2\2\2\u01d3\u01d2\3\2\2\2\u01d4\33"+
		"\3\2\2\2\u01d5\u01d9\5\u00be`\2\u01d6\u01d8\5\36\20\2\u01d7\u01d6\3\2"+
		"\2\2\u01d8\u01db\3\2\2\2\u01d9\u01d7\3\2\2\2\u01d9\u01da\3\2\2\2\u01da"+
		"\35\3\2\2\2\u01db\u01d9\3\2\2\2\u01dc\u0210\5\u00ba^\2\u01dd\u01de\7("+
		"\2\2\u01de\u0210\5 \21\2\u01df\u01e4\7\u011a\2\2\u01e0\u01e1\7l\2\2\u01e1"+
		"\u01e2\7\u00a8\2\2\u01e2\u01e4\5\"\22\2\u01e3\u01df\3\2\2\2\u01e3\u01e0"+
		"\3\2\2\2\u01e4\u0210\3\2\2\2\u01e5\u01e7\7v\2\2\u01e6\u01e5\3\2\2\2\u01e6"+
		"\u01e7\3\2\2\2\u01e7\u01e8\3\2\2\2\u01e8\u0210\7T\2\2\u01e9\u01eb\7\u00a5"+
		"\2\2\u01ea\u01ec\7T\2\2\u01eb\u01ea\3\2\2\2\u01eb\u01ec\3\2\2\2\u01ec"+
		"\u0210\3\2\2\2\u01ed\u01ee\7\u0133\2\2\u01ee\u0210\7\u0415\2\2\u01ef\u01f0"+
		"\7\u0131\2\2\u01f0\u0210\t\b\2\2\u01f1\u01f2\7\u0225\2\2\u01f2\u0210\t"+
		"\t\2\2\u01f3\u0210\5&\24\2\u01f4\u01f5\7\32\2\2\u01f5\u0210\5\u009eP\2"+
		"\u01f6\u01f7\7A\2\2\u01f7\u01f9\7\n\2\2\u01f8\u01f6\3\2\2\2\u01f8\u01f9"+
		"\3\2\2\2\u01f9\u01fa\3\2\2\2\u01fa\u01fb\7\r\2\2\u01fb\u01fc\7\u0406\2"+
		"\2\u01fc\u01fd\5\u00eav\2\u01fd\u01ff\7\u0407\2\2\u01fe\u0200\t\n\2\2"+
		"\u01ff\u01fe\3\2\2\2\u01ff\u0200\3\2\2\2\u0200\u0210\3\2\2\2\u0201\u0202"+
		"\7\u00df\2\2\u0202\u0203\7(\2\2\u0203\u0210\7\u0244\2\2\u0204\u0206\7"+
		"\35\2\2\u0205\u0207\5\u00aaV\2\u0206\u0205\3\2\2\2\u0206\u0207\3\2\2\2"+
		"\u0207\u0209\3\2\2\2\u0208\u0204\3\2\2\2\u0208\u0209\3\2\2\2\u0209\u020a"+
		"\3\2\2\2\u020a\u020b\7\31\2\2\u020b\u020c\7\u0406\2\2\u020c\u020d\5\u00ea"+
		"v\2\u020d\u020e\7\u0407\2\2\u020e\u0210\3\2\2\2\u020f\u01dc\3\2\2\2\u020f"+
		"\u01dd\3\2\2\2\u020f\u01e3\3\2\2\2\u020f\u01e6\3\2\2\2\u020f\u01e9\3\2"+
		"\2\2\u020f\u01ed\3\2\2\2\u020f\u01ef\3\2\2\2\u020f\u01f1\3\2\2\2\u020f"+
		"\u01f3\3\2\2\2\u020f\u01f4\3\2\2\2\u020f\u01f8\3\2\2\2\u020f\u0201\3\2"+
		"\2\2\u020f\u0208\3\2\2\2\u0210\37\3\2\2\2\u0211\u021c\7j\2\2\u0212\u0214"+
		"\5\u00f0y\2\u0213\u0212\3\2\2\2\u0213\u0214\3\2\2\2\u0214\u0215\3\2\2"+
		"\2\u0215\u021c\5\u00bc_\2\u0216\u021c\5\"\22\2\u0217\u0218\7\u0406\2\2"+
		"\u0218\u0219\5\u00eav\2\u0219\u021a\7\u0407\2\2\u021a\u021c\3\2\2\2\u021b"+
		"\u0211\3\2\2\2\u021b\u0213\3\2\2\2\u021b\u0216\3\2\2\2\u021b\u0217\3\2"+
		"\2\2\u021c\u0220\3\2\2\2\u021d\u021e\7l\2\2\u021e\u021f\7\u00a8\2\2\u021f"+
		"\u0221\5\"\22\2\u0220\u021d\3\2\2\2\u0220\u0221\3\2\2\2\u0221!\3\2\2\2"+
		"\u0222\u0228\t\13\2\2\u0223\u0225\7\u0406\2\2\u0224\u0226\5\u00b0Y\2\u0225"+
		"\u0224\3\2\2\2\u0225\u0226\3\2\2\2\u0226\u0227\3\2\2\2\u0227\u0229\7\u0407"+
		"\2\2\u0228\u0223\3\2\2\2\u0228\u0229\3\2\2\2\u0229\u0231\3\2\2\2\u022a"+
		"\u022b\7\u0107\2\2\u022b\u022d\7\u0406\2\2\u022c\u022e\5\u00b0Y\2\u022d"+
		"\u022c\3\2\2\2\u022d\u022e\3\2\2\2\u022e\u022f\3\2\2\2\u022f\u0231\7\u0407"+
		"\2\2\u0230\u0222\3\2\2\2\u0230\u022a\3\2\2\2\u0231#\3\2\2\2\u0232\u0234"+
		"\7\35\2\2\u0233\u0235\5\u00aaV\2\u0234\u0233\3\2\2\2\u0234\u0235\3\2\2"+
		"\2\u0235\u0237\3\2\2\2\u0236\u0232\3\2\2\2\u0236\u0237\3\2\2\2\u0237\u0238"+
		"\3\2\2\2\u0238\u0239\7v\2\2\u0239\u023b\7T\2\2\u023a\u023c\5\u00aaV\2"+
		"\u023b\u023a\3\2\2\2\u023b\u023c\3\2\2\2\u023c\u023e\3\2\2\2\u023d\u023f"+
		"\5\20\t\2\u023e\u023d\3\2\2\2\u023e\u023f\3\2\2\2\u023f\u0240\3\2\2\2"+
		"\u0240\u0244\5\u00ceh\2\u0241\u0243\5\22\n\2\u0242\u0241\3\2\2\2\u0243"+
		"\u0246\3\2\2\2\u0244\u0242\3\2\2\2\u0244\u0245\3\2\2\2\u0245\u0278\3\2"+
		"\2\2\u0246\u0244\3\2\2\2\u0247\u0249\7\35\2\2\u0248\u024a\5\u00aaV\2\u0249"+
		"\u0248\3\2\2\2\u0249\u024a\3\2\2\2\u024a\u024c\3\2\2\2\u024b\u0247\3\2"+
		"\2\2\u024b\u024c\3\2\2\2\u024c\u024d\3\2\2\2\u024d\u024f\7\u00a5\2\2\u024e"+
		"\u0250\t\f\2\2\u024f\u024e\3\2\2\2\u024f\u0250\3\2\2\2\u0250\u0252\3\2"+
		"\2\2\u0251\u0253\5\u00aaV\2\u0252\u0251\3\2\2\2\u0252\u0253\3\2\2\2\u0253"+
		"\u0255\3\2\2\2\u0254\u0256\5\20\t\2\u0255\u0254\3\2\2\2\u0255\u0256\3"+
		"\2\2\2\u0256\u0257\3\2\2\2\u0257\u025b\5\u00ceh\2\u0258\u025a\5\22\n\2"+
		"\u0259\u0258\3\2\2\2\u025a\u025d\3\2\2\2\u025b\u0259\3\2\2\2\u025b\u025c"+
		"\3\2\2\2\u025c\u0278\3\2\2\2\u025d\u025b\3\2\2\2\u025e\u0260\7\35\2\2"+
		"\u025f\u0261\5\u00aaV\2\u0260\u025f\3\2\2\2\u0260\u0261\3\2\2\2\u0261"+
		"\u0263\3\2\2\2\u0262\u025e\3\2\2\2\u0262\u0263\3\2\2\2\u0263\u0264\3\2"+
		"\2\2\u0264\u0265\7>\2\2\u0265\u0267\7T\2\2\u0266\u0268\5\u00aaV\2\u0267"+
		"\u0266\3\2\2\2\u0267\u0268\3\2\2\2\u0268\u0269\3\2\2\2\u0269\u026a\5\u00ce"+
		"h\2\u026a\u026b\5&\24\2\u026b\u0278\3\2\2\2\u026c\u026e\7\35\2\2\u026d"+
		"\u026f\5\u00aaV\2\u026e\u026d\3\2\2\2\u026e\u026f\3\2\2\2\u026f\u0271"+
		"\3\2\2\2\u0270\u026c\3\2\2\2\u0270\u0271\3\2\2\2\u0271\u0272\3\2\2\2\u0272"+
		"\u0273\7\31\2\2\u0273\u0274\7\u0406\2\2\u0274\u0275\5\u00eav\2\u0275\u0276"+
		"\7\u0407\2\2\u0276\u0278\3\2\2\2\u0277\u0236\3\2\2\2\u0277\u024b\3\2\2"+
		"\2\u0277\u0262\3\2\2\2\u0277\u0270\3\2\2\2\u0278%\3\2\2\2\u0279\u027a"+
		"\7|\2\2\u027a\u027c\5\u0094K\2\u027b\u027d\5\u00ceh\2\u027c\u027b\3\2"+
		"\2\2\u027c\u027d\3\2\2\2\u027d\u0280\3\2\2\2\u027e\u027f\7d\2\2\u027f"+
		"\u0281\t\r\2\2\u0280\u027e\3\2\2\2\u0280\u0281\3\2\2\2\u0281\u0283\3\2"+
		"\2\2\u0282\u0284\5(\25\2\u0283\u0282\3\2\2\2\u0283\u0284\3\2\2\2\u0284"+
		"\'\3\2\2\2\u0285\u0286\7l\2\2\u0286\u0287\7*\2\2\u0287\u028b\5*\26\2\u0288"+
		"\u0289\7l\2\2\u0289\u028a\7\u00a8\2\2\u028a\u028c\5*\26\2\u028b\u0288"+
		"\3\2\2\2\u028b\u028c\3\2\2\2\u028c\u0296\3\2\2\2\u028d\u028e\7l\2\2\u028e"+
		"\u028f\7\u00a8\2\2\u028f\u0293\5*\26\2\u0290\u0291\7l\2\2\u0291\u0292"+
		"\7*\2\2\u0292\u0294\5*\26\2\u0293\u0290\3\2\2\2\u0293\u0294\3\2\2\2\u0294"+
		"\u0296\3\2\2\2\u0295\u0285\3\2\2\2\u0295\u028d\3\2\2\2\u0296)\3\2\2\2"+
		"\u0297\u029e\7\u0084\2\2\u0298\u029e\7\24\2\2\u0299\u029a\7\u008c\2\2"+
		"\u029a\u029e\7j\2\2\u029b\u029c\7\u01c3\2\2\u029c\u029e\7\u0111\2\2\u029d"+
		"\u0297\3\2\2\2\u029d\u0298\3\2\2\2\u029d\u0299\3\2\2\2\u029d\u029b\3\2"+
		"\2\2\u029e+\3\2\2\2\u029f\u02a1\t\f\2\2\u02a0\u02a2\5\u00aaV\2\u02a1\u02a0"+
		"\3\2\2\2\u02a1\u02a2\3\2\2\2\u02a2\u02a4\3\2\2\2\u02a3\u02a5\5\20\t\2"+
		"\u02a4\u02a3\3\2\2\2\u02a4\u02a5\3\2\2\2\u02a5\u02a6\3\2\2\2\u02a6\u02aa"+
		"\5\u00ceh\2\u02a7\u02a9\5\22\n\2\u02a8\u02a7\3\2\2\2\u02a9\u02ac\3\2\2"+
		"\2\u02aa\u02a8\3\2\2\2\u02aa\u02ab\3\2\2\2\u02ab\u02bc\3\2\2\2\u02ac\u02aa"+
		"\3\2\2\2\u02ad\u02af\t\16\2\2\u02ae\u02b0\t\f\2\2\u02af\u02ae\3\2\2\2"+
		"\u02af\u02b0\3\2\2\2\u02b0\u02b2\3\2\2\2\u02b1\u02b3\5\u00aaV\2\u02b2"+
		"\u02b1\3\2\2\2\u02b2\u02b3\3\2\2\2\u02b3\u02b4\3\2\2\2\u02b4\u02b8\5\u00ce"+
		"h\2\u02b5\u02b7\5\22\n\2\u02b6\u02b5\3\2\2\2\u02b7\u02ba\3\2\2\2\u02b8"+
		"\u02b6\3\2\2\2\u02b8\u02b9\3\2\2\2\u02b9\u02bc\3\2\2\2\u02ba\u02b8\3\2"+
		"\2\2\u02bb\u029f\3\2\2\2\u02bb\u02ad\3\2\2\2\u02bc-\3\2\2\2\u02bd\u02bf"+
		"\7\u0158\2\2\u02be\u02c0\7\u03fd\2\2\u02bf\u02be\3\2\2\2\u02bf\u02c0\3"+
		"\2\2\2\u02c0\u02c1\3\2\2\2\u02c1\u034e\5\u00a0Q\2\u02c2\u02c4\7\u011a"+
		"\2\2\u02c3\u02c5\7\u03fd\2\2\u02c4\u02c3\3\2\2\2\u02c4\u02c5\3\2\2\2\u02c5"+
		"\u02c6\3\2\2\2\u02c6\u034e\5\u00b0Y\2\u02c7\u02c9\7\u011b\2\2\u02c8\u02ca"+
		"\7\u03fd\2\2\u02c9\u02c8\3\2\2\2\u02c9\u02ca\3\2\2\2\u02ca\u02cb\3\2\2"+
		"\2\u02cb\u034e\5\u00b0Y\2\u02cc\u02ce\7(\2\2\u02cd\u02cc\3\2\2\2\u02cd"+
		"\u02ce\3\2\2\2\u02ce\u02d2\3\2\2\2\u02cf\u02d0\7\30\2\2\u02d0\u02d3\7"+
		"\u008c\2\2\u02d1\u02d3\7\u02e5\2\2\u02d2\u02cf\3\2\2\2\u02d2\u02d1\3\2"+
		"\2\2\u02d3\u02d5\3\2\2\2\u02d4\u02d6\7\u03fd\2\2\u02d5\u02d4\3\2\2\2\u02d5"+
		"\u02d6\3\2\2\2\u02d6\u02d9\3\2\2\2\u02d7\u02da\5\u009cO\2\u02d8\u02da"+
		"\7(\2\2\u02d9\u02d7\3\2\2\2\u02d9\u02d8\3\2\2\2\u02da\u034e\3\2\2\2\u02db"+
		"\u02dd\t\17\2\2\u02dc\u02de\7\u03fd\2\2\u02dd\u02dc\3\2\2\2\u02dd\u02de"+
		"\3\2\2\2\u02de\u02df\3\2\2\2\u02df\u034e\t\20\2\2\u02e0\u02e2\7(\2\2\u02e1"+
		"\u02e0\3\2\2\2\u02e1\u02e2\3\2\2\2\u02e2\u02e3\3\2\2\2\u02e3\u02e5\7\32"+
		"\2\2\u02e4\u02e6\7\u03fd\2\2\u02e5\u02e4\3\2\2\2\u02e5\u02e6\3\2\2\2\u02e6"+
		"\u02e7\3\2\2\2\u02e7\u034e\5\u009eP\2\u02e8\u02ea\7\u0133\2\2\u02e9\u02eb"+
		"\7\u03fd\2\2\u02ea\u02e9\3\2\2\2\u02ea\u02eb\3\2\2\2\u02eb\u02ec\3\2\2"+
		"\2\u02ec\u034e\7\u0415\2\2\u02ed\u02ef\7\u0138\2\2\u02ee\u02f0\7\u03fd"+
		"\2\2\u02ef\u02ee\3\2\2\2\u02ef\u02f0\3\2\2\2\u02f0\u02f1\3\2\2\2\u02f1"+
		"\u034e\t\21\2\2\u02f2\u02f4\7\u013a\2\2\u02f3\u02f5\7\u03fd\2\2\u02f4"+
		"\u02f3\3\2\2\2\u02f4\u02f5\3\2\2\2\u02f5\u02f6\3\2\2\2\u02f6\u034e\7\u0415"+
		"\2\2\u02f7\u02f8\7\u0145\2\2\u02f8\u02fa\7\u014c\2\2\u02f9\u02fb\7\u03fd"+
		"\2\2\u02fa\u02f9\3\2\2\2\u02fa\u02fb\3\2\2\2\u02fb\u02fc\3\2\2\2\u02fc"+
		"\u034e\7\u0415\2\2\u02fd\u02ff\7\u014a\2\2\u02fe\u0300\7\u03fd\2\2\u02ff"+
		"\u02fe\3\2\2\2\u02ff\u0300\3\2\2\2\u0300\u0301\3\2\2\2\u0301\u034e\t\20"+
		"\2\2\u0302\u0304\7\u0155\2\2\u0303\u0305\7\u03fd\2\2\u0304\u0303\3\2\2"+
		"\2\u0304\u0305\3\2\2\2\u0305\u0306\3\2\2\2\u0306\u034e\7\u0415\2\2\u0307"+
		"\u0308\7J\2\2\u0308\u030a\7\u014c\2\2\u0309\u030b\7\u03fd\2\2\u030a\u0309"+
		"\3\2\2\2\u030a\u030b\3\2\2\2\u030b\u030c\3\2\2\2\u030c\u034e\7\u0415\2"+
		"\2\u030d\u030f\7\u0182\2\2\u030e\u0310\7\u03fd\2\2\u030f\u030e\3\2\2\2"+
		"\u030f\u0310\3\2\2\2\u0310\u0311\3\2\2\2\u0311\u034e\t\22\2\2\u0312\u0314"+
		"\7\u018d\2\2\u0313\u0315\7\u03fd\2\2\u0314\u0313\3\2\2\2\u0314\u0315\3"+
		"\2\2\2\u0315\u0316\3\2\2\2\u0316\u034e\5\u00b2Z\2\u0317\u0319\7\u01ae"+
		"\2\2\u0318\u031a\7\u03fd\2\2\u0319\u0318\3\2\2\2\u0319\u031a\3\2\2\2\u031a"+
		"\u031b\3\2\2\2\u031b\u034e\5\u00b0Y\2\u031c\u031e\7\u01b8\2\2\u031d\u031f"+
		"\7\u03fd\2\2\u031e\u031d\3\2\2\2\u031e\u031f\3\2\2\2\u031f\u0320\3\2\2"+
		"\2\u0320\u034e\5\u00b0Y\2\u0321\u0323\7\u01d2\2\2\u0322\u0324\7\u03fd"+
		"\2\2\u0323\u0322\3\2\2\2\u0323\u0324\3\2\2\2\u0324\u0325\3\2\2\2\u0325"+
		"\u034e\t\23\2\2\u0326\u0328\7\u01d8\2\2\u0327\u0329\7\u03fd\2\2\u0328"+
		"\u0327\3\2\2\2\u0328\u0329\3\2\2\2\u0329\u032a\3\2\2\2\u032a\u034e\7\u0415"+
		"\2\2\u032b\u032d\7\u0205\2\2\u032c\u032e\7\u03fd\2\2\u032d\u032c\3\2\2"+
		"\2\u032d\u032e\3\2\2\2\u032e\u032f\3\2\2\2\u032f\u034e\t\24\2\2\u0330"+
		"\u0332\7\u0220\2\2\u0331\u0333\7\u03fd\2\2\u0332\u0331\3\2\2\2\u0332\u0333"+
		"\3\2\2\2\u0333\u0334\3\2\2\2\u0334\u034e\t\23\2\2\u0335\u0337\7\u0221"+
		"\2\2\u0336\u0338\7\u03fd\2\2\u0337\u0336\3\2\2\2\u0337\u0338\3\2\2\2\u0338"+
		"\u0339\3\2\2\2\u0339\u034e\t\23\2\2\u033a\u033c\7\u0222\2\2\u033b\u033d"+
		"\7\u03fd\2\2\u033c\u033b\3\2\2\2\u033c\u033d\3\2\2\2\u033d\u033e\3\2\2"+
		"\2\u033e\u034e\5\u00b0Y\2\u033f\u0340\7\u0230\2\2\u0340\u0342\5\u00aa"+
		"V\2\u0341\u0343\5\60\31\2\u0342\u0341\3\2\2\2\u0342\u0343\3\2\2\2\u0343"+
		"\u034e\3\2\2\2\u0344\u034e\5\60\31\2\u0345\u0347\7\u00a4\2\2\u0346\u0348"+
		"\7\u03fd\2\2\u0347\u0346\3\2\2\2\u0347\u0348\3\2\2\2\u0348\u0349\3\2\2"+
		"\2\u0349\u034a\7\u0406\2\2\u034a\u034b\5\u00ccg\2\u034b\u034c\7\u0407"+
		"\2\2\u034c\u034e\3\2\2\2\u034d\u02bd\3\2\2\2\u034d\u02c2\3\2\2\2\u034d"+
		"\u02c7\3\2\2\2\u034d\u02cd\3\2\2\2\u034d\u02db\3\2\2\2\u034d\u02e1\3\2"+
		"\2\2\u034d\u02e8\3\2\2\2\u034d\u02ed\3\2\2\2\u034d\u02f2\3\2\2\2\u034d"+
		"\u02f7\3\2\2\2\u034d\u02fd\3\2\2\2\u034d\u0302\3\2\2\2\u034d\u0307\3\2"+
		"\2\2\u034d\u030d\3\2\2\2\u034d\u0312\3\2\2\2\u034d\u0317\3\2\2\2\u034d"+
		"\u031c\3\2\2\2\u034d\u0321\3\2\2\2\u034d\u0326\3\2\2\2\u034d\u032b\3\2"+
		"\2\2\u034d\u0330\3\2\2\2\u034d\u0335\3\2\2\2\u034d\u033a\3\2\2\2\u034d"+
		"\u033f\3\2\2\2\u034d\u0344\3\2\2\2\u034d\u0345\3\2\2\2\u034e/\3\2\2\2"+
		"\u034f\u0350\7\u0225\2\2\u0350\u0351\t\t\2\2\u0351\61\3\2\2\2\u0352\u0353"+
		"\7u\2\2\u0353\u0354\7\22\2\2\u0354\u0357\5\64\33\2\u0355\u0356\7\u01d7"+
		"\2\2\u0356\u0358\5\u00b0Y\2\u0357\u0355\3\2\2\2\u0357\u0358\3\2\2\2\u0358"+
		"\u0360\3\2\2\2\u0359\u035a\7\u022a\2\2\u035a\u035b\7\22\2\2\u035b\u035e"+
		"\5\66\34\2\u035c\u035d\7\u022b\2\2\u035d\u035f\5\u00b0Y\2\u035e\u035c"+
		"\3\2\2\2\u035e\u035f\3\2\2\2\u035f\u0361\3\2\2\2\u0360\u0359\3\2\2\2\u0360"+
		"\u0361\3\2\2\2\u0361\u036d\3\2\2\2\u0362\u0363\7\u0406\2\2\u0363\u0368"+
		"\58\35\2\u0364\u0365\7\u0408\2\2\u0365\u0367\58\35\2\u0366\u0364\3\2\2"+
		"\2\u0367\u036a\3\2\2\2\u0368\u0366\3\2\2\2\u0368\u0369\3\2\2\2\u0369\u036b"+
		"\3\2\2\2\u036a\u0368\3\2\2\2\u036b\u036c\7\u0407\2\2\u036c\u036e\3\2\2"+
		"\2\u036d\u0362\3\2\2\2\u036d\u036e\3\2\2\2\u036e\63\3\2\2\2\u036f\u0371"+
		"\7\\\2\2\u0370\u036f\3\2\2\2\u0370\u0371\3\2\2\2\u0371\u0372\3\2\2\2\u0372"+
		"\u0373\7\u0178\2\2\u0373\u0374\7\u0406\2\2\u0374\u0375\5\u00eav\2\u0375"+
		"\u0376\7\u0407\2\2\u0376\u039d\3\2\2\2\u0377\u0379\7\\\2\2\u0378\u0377"+
		"\3\2\2\2\u0378\u0379\3\2\2\2\u0379\u037a\3\2\2\2\u037a\u037e\7T\2\2\u037b"+
		"\u037c\7\u0114\2\2\u037c\u037d\7\u03fd\2\2\u037d\u037f\t\25\2\2\u037e"+
		"\u037b\3\2\2\2\u037e\u037f\3\2\2\2\u037f\u0380\3\2\2\2\u0380\u0381\7\u0406"+
		"\2\2\u0381\u0382\5\u00caf\2\u0382\u0383\7\u0407\2\2\u0383\u039d\3\2\2"+
		"\2\u0384\u038e\7y\2\2\u0385\u0386\7\u0406\2\2\u0386\u0387\5\u00eav\2\u0387"+
		"\u0388\7\u0407\2\2\u0388\u038f\3\2\2\2\u0389\u038a\7\u0130\2\2\u038a\u038b"+
		"\7\u0406\2\2\u038b\u038c\5\u00caf\2\u038c\u038d\7\u0407\2\2\u038d\u038f"+
		"\3\2\2\2\u038e\u0385\3\2\2\2\u038e\u0389\3\2\2\2\u038f\u039d\3\2\2\2\u0390"+
		"\u039a\7\u0193\2\2\u0391\u0392\7\u0406\2\2\u0392\u0393\5\u00eav\2\u0393"+
		"\u0394\7\u0407\2\2\u0394\u039b\3\2\2\2\u0395\u0396\7\u0130\2\2\u0396\u0397"+
		"\7\u0406\2\2\u0397\u0398\5\u00caf\2\u0398\u0399\7\u0407\2\2\u0399\u039b"+
		"\3\2\2\2\u039a\u0391\3\2\2\2\u039a\u0395\3\2\2\2\u039b\u039d\3\2\2\2\u039c"+
		"\u0370\3\2\2\2\u039c\u0378\3\2\2\2\u039c\u0384\3\2\2\2\u039c\u0390\3\2"+
		"\2\2\u039d\65\3\2\2\2\u039e\u03a0\7\\\2\2\u039f\u039e\3\2\2\2\u039f\u03a0"+
		"\3\2\2\2\u03a0\u03a1\3\2\2\2\u03a1\u03a2\7\u0178\2\2\u03a2\u03a3\7\u0406"+
		"\2\2\u03a3\u03a4\5\u00eav\2\u03a4\u03a5\7\u0407\2\2\u03a5\u03b4\3\2\2"+
		"\2\u03a6\u03a8\7\\\2\2\u03a7\u03a6\3\2\2\2\u03a7\u03a8\3\2\2\2\u03a8\u03a9"+
		"\3\2\2\2\u03a9\u03ad\7T\2\2\u03aa\u03ab\7\u0114\2\2\u03ab\u03ac\7\u03fd"+
		"\2\2\u03ac\u03ae\t\25\2\2\u03ad\u03aa\3\2\2\2\u03ad\u03ae\3\2\2\2\u03ae"+
		"\u03af\3\2\2\2\u03af\u03b0\7\u0406\2\2\u03b0\u03b1\5\u00caf\2\u03b1\u03b2"+
		"\7\u0407\2\2\u03b2\u03b4\3\2\2\2\u03b3\u039f\3\2\2\2\u03b3\u03a7\3\2\2"+
		"\2\u03b4\67\3\2\2\2\u03b5\u03b6\7u\2\2\u03b6\u03b7\5\u00aaV\2\u03b7\u03b8"+
		"\7\u00ac\2\2\u03b8\u03b9\7\u0191\2\2\u03b9\u03ba\7\u0233\2\2\u03ba\u03bb"+
		"\7\u0406\2\2\u03bb\u03c0\5:\36\2\u03bc\u03bd\7\u0408\2\2\u03bd\u03bf\5"+
		":\36\2\u03be\u03bc\3\2\2\2\u03bf\u03c2\3\2\2\2\u03c0\u03be\3\2\2\2\u03c0"+
		"\u03c1\3\2\2\2\u03c1\u03c3\3\2\2\2\u03c2\u03c0\3\2\2\2\u03c3\u03c7\7\u0407"+
		"\2\2\u03c4\u03c6\5@!\2\u03c5\u03c4\3\2\2\2\u03c6\u03c9\3\2\2\2\u03c7\u03c5"+
		"\3\2\2\2\u03c7\u03c8\3\2\2\2\u03c8\u03d5\3\2\2\2\u03c9\u03c7\3\2\2\2\u03ca"+
		"\u03cb\7\u0406\2\2\u03cb\u03d0\5> \2\u03cc\u03cd\7\u0408\2\2\u03cd\u03cf"+
		"\5> \2\u03ce\u03cc\3\2\2\2\u03cf\u03d2\3\2\2\2\u03d0\u03ce\3\2\2\2\u03d0"+
		"\u03d1\3\2\2\2\u03d1\u03d3\3\2\2\2\u03d2\u03d0\3\2\2\2\u03d3\u03d4\7\u0407"+
		"\2\2\u03d4\u03d6\3\2\2\2\u03d5\u03ca\3\2\2\2\u03d5\u03d6\3\2\2\2\u03d6"+
		"\u0448\3\2\2\2\u03d7\u03d8\7u\2\2\u03d8\u03d9\5\u00aaV\2\u03d9\u03da\7"+
		"\u00ac\2\2\u03da\u03db\7\u0191\2\2\u03db\u03dc\7\u0233\2\2\u03dc\u03e0"+
		"\5:\36\2\u03dd\u03df\5@!\2\u03de\u03dd\3\2\2\2\u03df\u03e2\3\2\2\2\u03e0"+
		"\u03de\3\2\2\2\u03e0\u03e1\3\2\2\2\u03e1\u03ee\3\2\2\2\u03e2\u03e0\3\2"+
		"\2\2\u03e3\u03e4\7\u0406\2\2\u03e4\u03e9\5> \2\u03e5\u03e6\7\u0408\2\2"+
		"\u03e6\u03e8\5> \2\u03e7\u03e5\3\2\2\2\u03e8\u03eb\3\2\2\2\u03e9\u03e7"+
		"\3\2\2\2\u03e9\u03ea\3\2\2\2\u03ea\u03ec\3\2\2\2\u03eb\u03e9\3\2\2\2\u03ec"+
		"\u03ed\7\u0407\2\2\u03ed\u03ef\3\2\2\2\u03ee\u03e3\3\2\2\2\u03ee\u03ef"+
		"\3\2\2\2\u03ef\u0448\3\2\2\2\u03f0\u03f1\7u\2\2\u03f1\u03f2\5\u00aaV\2"+
		"\u03f2\u03f3\7\u00ac\2\2\u03f3\u03f4\7I\2\2\u03f4\u03f5\7\u0406\2\2\u03f5"+
		"\u03fa\5:\36\2\u03f6\u03f7\7\u0408\2\2\u03f7\u03f9\5:\36\2\u03f8\u03f6"+
		"\3\2\2\2\u03f9\u03fc\3\2\2\2\u03fa\u03f8\3\2\2\2\u03fa\u03fb\3\2\2\2\u03fb"+
		"\u03fd\3\2\2\2\u03fc\u03fa\3\2\2\2\u03fd\u0401\7\u0407\2\2\u03fe\u0400"+
		"\5@!\2\u03ff\u03fe\3\2\2\2\u0400\u0403\3\2\2\2\u0401\u03ff\3\2\2\2\u0401"+
		"\u0402\3\2\2\2\u0402\u040f\3\2\2\2\u0403\u0401\3\2\2\2\u0404\u0405\7\u0406"+
		"\2\2\u0405\u040a\5> \2\u0406\u0407\7\u0408\2\2\u0407\u0409\5> \2\u0408"+
		"\u0406\3\2\2\2\u0409\u040c\3\2\2\2\u040a\u0408\3\2\2\2\u040a\u040b\3\2"+
		"\2\2\u040b\u040d\3\2\2\2\u040c\u040a\3\2\2\2\u040d\u040e\7\u0407\2\2\u040e"+
		"\u0410\3\2\2\2\u040f\u0404\3\2\2\2\u040f\u0410\3\2\2\2\u0410\u0448\3\2"+
		"\2\2\u0411\u0412\7u\2\2\u0412\u0413\5\u00aaV\2\u0413\u0414\7\u00ac\2\2"+
		"\u0414\u0415\7I\2\2\u0415\u0416\7\u0406\2\2\u0416\u041b\5<\37\2\u0417"+
		"\u0418\7\u0408\2\2\u0418\u041a\5<\37\2\u0419\u0417\3\2\2\2\u041a\u041d"+
		"\3\2\2\2\u041b\u0419\3\2\2\2\u041b\u041c\3\2\2\2\u041c\u041e\3\2\2\2\u041d"+
		"\u041b\3\2\2\2\u041e\u0422\7\u0407\2\2\u041f\u0421\5@!\2\u0420\u041f\3"+
		"\2\2\2\u0421\u0424\3\2\2\2\u0422\u0420\3\2\2\2\u0422\u0423\3\2\2\2\u0423"+
		"\u0430\3\2\2\2\u0424\u0422\3\2\2\2\u0425\u0426\7\u0406\2\2\u0426\u042b"+
		"\5> \2\u0427\u0428\7\u0408\2\2\u0428\u042a\5> \2\u0429\u0427\3\2\2\2\u042a"+
		"\u042d\3\2\2\2\u042b\u0429\3\2\2\2\u042b\u042c\3\2\2\2\u042c\u042e\3\2"+
		"\2\2\u042d\u042b\3\2\2\2\u042e\u042f\7\u0407\2\2\u042f\u0431\3\2\2\2\u0430"+
		"\u0425\3\2\2\2\u0430\u0431\3\2\2\2\u0431\u0448\3\2\2\2\u0432\u0433\7u"+
		"\2\2\u0433\u0437\5\u00aaV\2\u0434\u0436\5@!\2\u0435\u0434\3\2\2\2\u0436"+
		"\u0439\3\2\2\2\u0437\u0435\3\2\2\2\u0437\u0438\3\2\2\2\u0438\u0445\3\2"+
		"\2\2\u0439\u0437\3\2\2\2\u043a\u043b\7\u0406\2\2\u043b\u0440\5> \2\u043c"+
		"\u043d\7\u0408\2\2\u043d\u043f\5> \2\u043e\u043c\3\2\2\2\u043f\u0442\3"+
		"\2\2\2\u0440\u043e\3\2\2\2\u0440\u0441\3\2\2\2\u0441\u0443\3\2\2\2\u0442"+
		"\u0440\3\2\2\2\u0443\u0444\7\u0407\2\2\u0444\u0446\3\2\2\2\u0445\u043a"+
		"\3\2\2\2\u0445\u0446\3\2\2\2\u0446\u0448\3\2\2\2\u0447\u03b5\3\2\2\2\u0447"+
		"\u03d7\3\2\2\2\u0447\u03f0\3\2\2\2\u0447\u0411\3\2\2\2\u0447\u0432\3\2"+
		"\2\2\u04489\3\2\2\2\u0449\u044d\5\u00bc_\2\u044a\u044d\5\u00eav\2\u044b"+
		"\u044d\7e\2\2\u044c\u0449\3\2\2\2\u044c\u044a\3\2\2\2\u044c\u044b\3\2"+
		"\2\2\u044d;\3\2\2\2\u044e\u044f\7\u0406\2\2\u044f\u0452\5:\36\2\u0450"+
		"\u0451\7\u0408\2\2\u0451\u0453\5:\36\2\u0452\u0450\3\2\2\2\u0453\u0454"+
		"\3\2\2\2\u0454\u0452\3\2\2\2\u0454\u0455\3\2\2\2\u0455\u0456\3\2\2\2\u0456"+
		"\u0457\7\u0407\2\2\u0457=\3\2\2\2\u0458\u0459\7\u022a\2\2\u0459\u045d"+
		"\5\u00aaV\2\u045a\u045c\5@!\2\u045b\u045a\3\2\2\2\u045c\u045f\3\2\2\2"+
		"\u045d\u045b\3\2\2\2\u045d\u045e\3\2\2\2\u045e?\3\2\2\2\u045f\u045d\3"+
		"\2\2\2\u0460\u0462\7\u0225\2\2\u0461\u0460\3\2\2\2\u0461\u0462\3\2\2\2"+
		"\u0462\u0463\3\2\2\2\u0463\u0465\7\u0158\2\2\u0464\u0466\7\u03fd\2\2\u0465"+
		"\u0464\3\2\2\2\u0465\u0466\3\2\2\2\u0466\u0467\3\2\2\2\u0467\u048e\5\u00a0"+
		"Q\2\u0468\u046a\7\u0133\2\2\u0469\u046b\7\u03fd\2\2\u046a\u0469\3\2\2"+
		"\2\u046a\u046b\3\2\2\2\u046b\u046c\3\2\2\2\u046c\u048e\7\u0415\2\2\u046d"+
		"\u046e\7\u0145\2\2\u046e\u0470\7\u014c\2\2\u046f\u0471\7\u03fd\2\2\u0470"+
		"\u046f\3\2\2\2\u0470\u0471\3\2\2\2\u0471\u0472\3\2\2\2\u0472\u048e\7\u0415"+
		"\2\2\u0473\u0474\7J\2\2\u0474\u0476\7\u014c\2\2\u0475\u0477\7\u03fd\2"+
		"\2\u0476\u0475\3\2\2\2\u0476\u0477\3\2\2\2\u0477\u0478\3\2\2\2\u0478\u048e"+
		"\7\u0415\2\2\u0479\u047b\7\u01ae\2\2\u047a\u047c\7\u03fd\2\2\u047b\u047a"+
		"\3\2\2\2\u047b\u047c\3\2\2\2\u047c\u047d\3\2\2\2\u047d\u048e\5\u00b0Y"+
		"\2\u047e\u0480\7\u01b8\2\2\u047f\u0481\7\u03fd\2\2\u0480\u047f\3\2\2\2"+
		"\u0480\u0481\3\2\2\2\u0481\u0482\3\2\2\2\u0482\u048e\5\u00b0Y\2\u0483"+
		"\u0485\7\u0230\2\2\u0484\u0486\7\u03fd\2\2\u0485\u0484\3\2\2\2\u0485\u0486"+
		"\3\2\2\2\u0486\u0487\3\2\2\2\u0487\u048e\5\u00aaV\2\u0488\u048a\7\u01c4"+
		"\2\2\u0489\u048b\7\u03fd\2\2\u048a\u0489\3\2\2\2\u048a\u048b\3\2\2\2\u048b"+
		"\u048c\3\2\2\2\u048c\u048e\5\u00aaV\2\u048d\u0461\3\2\2\2\u048d\u0468"+
		"\3\2\2\2\u048d\u046d\3\2\2\2\u048d\u0473\3\2\2\2\u048d\u0479\3\2\2\2\u048d"+
		"\u047e\3\2\2\2\u048d\u0483\3\2\2\2\u048d\u0488\3\2\2\2\u048eA\3\2\2\2"+
		"\u048f\u049d\5\u0102\u0082\2\u0490\u049d\7\u00cd\2\2\u0491\u049d\7\u00e0"+
		"\2\2\u0492\u049d\7\u00e1\2\2\u0493\u049d\7\u00e2\2\2\u0494\u049d\7\u00e3"+
		"\2\2\u0495\u049d\7\u00e4\2\2\u0496\u049d\7\u00e5\2\2\u0497\u049d\7\u00e6"+
		"\2\2\u0498\u049d\7\u00e7\2\2\u0499\u049d\7\u00e8\2\2\u049a\u049d\7\u00e9"+
		"\2\2\u049b\u049d\7\u00ea\2\2\u049c\u048f\3\2\2\2\u049c\u0490\3\2\2\2\u049c"+
		"\u0491\3\2\2\2\u049c\u0492\3\2\2\2\u049c\u0493\3\2\2\2\u049c\u0494\3\2"+
		"\2\2\u049c\u0495\3\2\2\2\u049c\u0496\3\2\2\2\u049c\u0497\3\2\2\2\u049c"+
		"\u0498\3\2\2\2\u049c\u0499\3\2\2\2\u049c\u049a\3\2\2\2\u049c\u049b\3\2"+
		"\2\2\u049dC\3\2\2\2\u049e\u04a1\5T+\2\u049f\u04a1\5V,\2\u04a0\u049e\3"+
		"\2\2\2\u04a0\u049f\3\2\2\2\u04a1E\3\2\2\2\u04a2\u04a4\7N\2\2\u04a3\u04a5"+
		"\t\26\2\2\u04a4\u04a3\3\2\2\2\u04a4\u04a5\3\2\2\2\u04a5\u04a7\3\2\2\2"+
		"\u04a6\u04a8\7H\2\2\u04a7\u04a6\3\2\2\2\u04a7\u04a8\3\2\2\2\u04a8\u04aa"+
		"\3\2\2\2\u04a9\u04ab\7P\2\2\u04aa\u04a9\3\2\2\2\u04aa\u04ab\3\2\2\2\u04ab"+
		"\u04ac\3\2\2\2\u04ac\u04b3\5\u0094K\2\u04ad\u04ae\7u\2\2\u04ae\u04b0\7"+
		"\u0406\2\2\u04af\u04b1\5\u00caf\2\u04b0\u04af\3\2\2\2\u04b0\u04b1\3\2"+
		"\2\2\u04b1\u04b2\3\2\2\2\u04b2\u04b4\7\u0407\2\2\u04b3\u04ad\3\2\2\2\u04b3"+
		"\u04b4\3\2\2\2\u04b4\u04c5\3\2\2\2\u04b5\u04b6\7\u0406\2\2\u04b6\u04b7"+
		"\5\u00caf\2\u04b7\u04b8\7\u0407\2\2\u04b8\u04ba\3\2\2\2\u04b9\u04b5\3"+
		"\2\2\2\u04b9\u04ba\3\2\2\2\u04ba\u04bb\3\2\2\2\u04bb\u04c6\5L\'\2\u04bc"+
		"\u04bd\7\u008c\2\2\u04bd\u04c2\5N(\2\u04be\u04bf\7\u0408\2\2\u04bf\u04c1"+
		"\5N(\2\u04c0\u04be\3\2\2\2\u04c1\u04c4\3\2\2\2\u04c2\u04c0\3\2\2\2\u04c2"+
		"\u04c3\3\2\2\2\u04c3\u04c6\3\2\2\2\u04c4\u04c2\3\2\2\2\u04c5\u04b9\3\2"+
		"\2\2\u04c5\u04bc\3\2\2\2\u04c6\u04d3\3\2\2\2\u04c7\u04c8\7l\2\2\u04c8"+
		"\u04c9\7\u0152\2\2\u04c9\u04ca\7T\2\2\u04ca\u04cb\7\u00a8\2\2\u04cb\u04d0"+
		"\5N(\2\u04cc\u04cd\7\u0408\2\2\u04cd\u04cf\5N(\2\u04ce\u04cc\3\2\2\2\u04cf"+
		"\u04d2\3\2\2\2\u04d0\u04ce\3\2\2\2\u04d0\u04d1\3\2\2\2\u04d1\u04d4\3\2"+
		"\2\2\u04d2\u04d0\3\2\2\2\u04d3\u04c7\3\2\2\2\u04d3\u04d4\3\2\2\2\u04d4"+
		"G\3\2\2\2\u04d5\u04d7\5p9\2\u04d6\u04d8\5R*\2\u04d7\u04d6\3\2\2\2\u04d7"+
		"\u04d8\3\2\2\2\u04d8\u050d\3\2\2\2\u04d9\u04db\5l\67\2\u04da\u04dc\5R"+
		"*\2\u04db\u04da\3\2\2\2\u04db\u04dc\3\2\2\2\u04dc\u050d\3\2\2\2\u04dd"+
		"\u04df\5r:\2\u04de\u04e0\5v<\2\u04df\u04de\3\2\2\2\u04e0\u04e1\3\2\2\2"+
		"\u04e1\u04df\3\2\2\2\u04e1\u04e2\3\2\2\2\u04e2\u04eb\3\2\2\2\u04e3\u04e5"+
		"\7\u00a4\2\2\u04e4\u04e6\t\27\2\2\u04e5\u04e4\3\2\2\2\u04e5\u04e6\3\2"+
		"\2\2\u04e6\u04e9\3\2\2\2\u04e7\u04ea\5p9\2\u04e8\u04ea\5l\67\2\u04e9\u04e7"+
		"\3\2\2\2\u04e9\u04e8\3\2\2\2\u04ea\u04ec\3\2\2\2\u04eb\u04e3\3\2\2\2\u04eb"+
		"\u04ec\3\2\2\2\u04ec\u04ee\3\2\2\2\u04ed\u04ef\5\\/\2\u04ee\u04ed\3\2"+
		"\2\2\u04ee\u04ef\3\2\2\2\u04ef\u04f1\3\2\2\2\u04f0\u04f2\5\u008cG\2\u04f1"+
		"\u04f0\3\2\2\2\u04f1\u04f2\3\2\2\2\u04f2\u04f4\3\2\2\2\u04f3\u04f5\5R"+
		"*\2\u04f4\u04f3\3\2\2\2\u04f4\u04f5\3\2\2\2\u04f5\u050d\3\2\2\2\u04f6"+
		"\u04f8\5n8\2\u04f7\u04f9\5t;\2\u04f8\u04f7\3\2\2\2\u04f9\u04fa\3\2\2\2"+
		"\u04fa\u04f8\3\2\2\2\u04fa\u04fb\3\2\2\2\u04fb\u0501\3\2\2\2\u04fc\u04fe"+
		"\7\u00a4\2\2\u04fd\u04ff\t\27\2\2\u04fe\u04fd\3\2\2\2\u04fe\u04ff\3\2"+
		"\2\2\u04ff\u0500\3\2\2\2\u0500\u0502\5l\67\2\u0501\u04fc\3\2\2\2\u0501"+
		"\u0502\3\2\2\2\u0502\u0504\3\2\2\2\u0503\u0505\5\\/\2\u0504\u0503\3\2"+
		"\2\2\u0504\u0505\3\2\2\2\u0505\u0507\3\2\2\2\u0506\u0508\5\u008cG\2\u0507"+
		"\u0506\3\2\2\2\u0507\u0508\3\2\2\2\u0508\u050a\3\2\2\2\u0509\u050b\5R"+
		"*\2\u050a\u0509\3\2\2\2\u050a\u050b\3\2\2\2\u050b\u050d\3\2\2\2\u050c"+
		"\u04d5\3\2\2\2\u050c\u04d9\3\2\2\2\u050c\u04dd\3\2\2\2\u050c\u04f6\3\2"+
		"\2\2\u050dI\3\2\2\2\u050e\u0511\5X-\2\u050f\u0511\5Z.\2\u0510\u050e\3"+
		"\2\2\2\u0510\u050f\3\2\2\2\u0511K\3\2\2\2\u0512\u0525\5H%\2\u0513\u0514"+
		"\t\30\2\2\u0514\u0516\7\u0406\2\2\u0515\u0517\5\u00d2j\2\u0516\u0515\3"+
		"\2\2\2\u0516\u0517\3\2\2\2\u0517\u0518\3\2\2\2\u0518\u0521\7\u0407\2\2"+
		"\u0519\u051a\7\u0408\2\2\u051a\u051c\7\u0406\2\2\u051b\u051d\5\u00d2j"+
		"\2\u051c\u051b\3\2\2\2\u051c\u051d\3\2\2\2\u051d\u051e\3\2\2\2\u051e\u0520"+
		"\7\u0407\2\2\u051f\u0519\3\2\2\2\u0520\u0523\3\2\2\2\u0521\u051f\3\2\2"+
		"\2\u0521\u0522\3\2\2\2\u0522\u0525\3\2\2\2\u0523\u0521\3\2\2\2\u0524\u0512"+
		"\3\2\2\2\u0524\u0513\3\2\2\2\u0525M\3\2\2\2\u0526\u0527\5\u0096L\2\u0527"+
		"\u052a\7\u03fd\2\2\u0528\u052b\5\u00eav\2\u0529\u052b\7(\2\2\u052a\u0528"+
		"\3\2\2\2\u052a\u0529\3\2\2\2\u052bO\3\2\2\2\u052c\u052f\5\u00aaV\2\u052d"+
		"\u052f\7\u0421\2\2\u052e\u052c\3\2\2\2\u052e\u052d\3\2\2\2\u052fQ\3\2"+
		"\2\2\u0530\u0531\7<\2\2\u0531\u0537\7\u00a8\2\2\u0532\u0533\7_\2\2\u0533"+
		"\u0534\7I\2\2\u0534\u0535\7\u020b\2\2\u0535\u0537\7\u01b9\2\2\u0536\u0530"+
		"\3\2\2\2\u0536\u0532\3\2\2\2\u0537S\3\2\2\2\u0538\u053a\7*\2\2\u0539\u053b"+
		"\7a\2\2\u053a\u0539\3\2\2\2\u053a\u053b\3\2\2\2\u053b\u053d\3\2\2\2\u053c"+
		"\u053e\7\u01e7\2\2\u053d\u053c\3\2\2\2\u053d\u053e\3\2\2\2\u053e\u0540"+
		"\3\2\2\2\u053f\u0541\7H\2\2\u0540\u053f\3\2\2\2\u0540\u0541\3\2\2\2\u0541"+
		"\u0542\3\2\2\2\u0542\u0543\7?\2\2\u0543\u0549\5\u0094K\2\u0544\u0545\7"+
		"u\2\2\u0545\u0546\7\u0406\2\2\u0546\u0547\5\u00caf\2\u0547\u0548\7\u0407"+
		"\2\2\u0548\u054a\3\2\2\2\u0549\u0544\3\2\2\2\u0549\u054a\3\2\2\2\u054a"+
		"\u054d\3\2\2\2\u054b\u054c\7\u00ae\2\2\u054c\u054e\5\u00eav\2\u054d\u054b"+
		"\3\2\2\2\u054d\u054e\3\2\2\2\u054e\u0550\3\2\2\2\u054f\u0551\5\\/\2\u0550"+
		"\u054f\3\2\2\2\u0550\u0551\3\2\2\2\u0551\u0554\3\2\2\2\u0552\u0553\7["+
		"\2\2\u0553\u0555\5\u008eH\2\u0554\u0552\3\2\2\2\u0554\u0555\3\2\2\2\u0555"+
		"U\3\2\2\2\u0556\u0558\7*\2\2\u0557\u0559\7a\2\2\u0558\u0557\3\2\2\2\u0558"+
		"\u0559\3\2\2\2\u0559\u055b\3\2\2\2\u055a\u055c\7\u01e7\2\2\u055b\u055a"+
		"\3\2\2\2\u055b\u055c\3\2\2\2\u055c\u055e\3\2\2\2\u055d\u055f\7H\2\2\u055e"+
		"\u055d\3\2\2\2\u055e\u055f\3\2\2\2\u055f\u0587\3\2\2\2\u0560\u0563\5\u0094"+
		"K\2\u0561\u0562\7\u0405\2\2\u0562\u0564\7\u03f5\2\2\u0563\u0561\3\2\2"+
		"\2\u0563\u0564\3\2\2\2\u0564\u056d\3\2\2\2\u0565\u0566\7\u0408\2\2\u0566"+
		"\u0569\5\u0094K\2\u0567\u0568\7\u0405\2\2\u0568\u056a\7\u03f5\2\2\u0569"+
		"\u0567\3\2\2\2\u0569\u056a\3\2\2\2\u056a\u056c\3\2\2\2\u056b\u0565\3\2"+
		"\2\2\u056c\u056f\3\2\2\2\u056d\u056b\3\2\2\2\u056d\u056e\3\2\2\2\u056e"+
		"\u0570\3\2\2\2\u056f\u056d\3\2\2\2\u0570\u0571\7?\2\2\u0571\u0572\5`\61"+
		"\2\u0572\u0588\3\2\2\2\u0573\u0574\7?\2\2\u0574\u0577\5\u0094K\2\u0575"+
		"\u0576\7\u0405\2\2\u0576\u0578\7\u03f5\2\2\u0577\u0575\3\2\2\2\u0577\u0578"+
		"\3\2\2\2\u0578\u0581\3\2\2\2\u0579\u057a\7\u0408\2\2\u057a\u057d\5\u0094"+
		"K\2\u057b\u057c\7\u0405\2\2\u057c\u057e\7\u03f5\2\2\u057d\u057b\3\2\2"+
		"\2\u057d\u057e\3\2\2\2\u057e\u0580\3\2\2\2\u057f\u0579\3\2\2\2\u0580\u0583"+
		"\3\2\2\2\u0581\u057f\3\2\2\2\u0581\u0582\3\2\2\2\u0582\u0584\3\2\2\2\u0583"+
		"\u0581\3\2\2\2\u0584\u0585\7\u00ab\2\2\u0585\u0586\5`\61\2\u0586\u0588"+
		"\3\2\2\2\u0587\u0560\3\2\2\2\u0587\u0573\3\2\2\2\u0588\u058b\3\2\2\2\u0589"+
		"\u058a\7\u00ae\2\2\u058a\u058c\5\u00eav\2\u058b\u0589\3\2\2\2\u058b\u058c"+
		"\3\2\2\2\u058cW\3\2\2\2\u058d\u058f\7\u00a8\2\2\u058e\u0590\7a\2\2\u058f"+
		"\u058e\3\2\2\2\u058f\u0590\3\2\2\2\u0590\u0592\3\2\2\2\u0591\u0593\7H"+
		"\2\2\u0592\u0591\3\2\2\2\u0592\u0593\3\2\2\2\u0593\u0594\3\2\2\2\u0594"+
		"\u0599\5\u0094K\2\u0595\u0597\7\r\2\2\u0596\u0595\3\2\2\2\u0596\u0597"+
		"\3\2\2\2\u0597\u0598\3\2\2\2\u0598\u059a\5\u00aaV\2\u0599\u0596\3\2\2"+
		"\2\u0599\u059a\3\2\2\2\u059a\u059b\3\2\2\2\u059b\u059c\7\u008c\2\2\u059c"+
		"\u05a1\5N(\2\u059d\u059e\7\u0408\2\2\u059e\u05a0\5N(\2\u059f\u059d\3\2"+
		"\2\2\u05a0\u05a3\3\2\2\2\u05a1\u059f\3\2\2\2\u05a1\u05a2\3\2\2\2\u05a2"+
		"\u05a6\3\2\2\2\u05a3\u05a1\3\2\2\2\u05a4\u05a5\7\u00ae\2\2\u05a5\u05a7"+
		"\5\u00eav\2\u05a6\u05a4\3\2\2\2\u05a6\u05a7\3\2\2\2\u05a7\u05a9\3\2\2"+
		"\2\u05a8\u05aa\5\\/\2\u05a9\u05a8\3\2\2\2\u05a9\u05aa\3\2\2\2\u05aa\u05ac"+
		"\3\2\2\2\u05ab\u05ad\5\u008cG\2\u05ac\u05ab\3\2\2\2\u05ac\u05ad\3\2\2"+
		"\2\u05adY\3\2\2\2\u05ae\u05b0\7\u00a8\2\2\u05af\u05b1\7a\2\2\u05b0\u05af"+
		"\3\2\2\2\u05b0\u05b1\3\2\2\2\u05b1\u05b3\3\2\2\2\u05b2\u05b4\7H\2\2\u05b3"+
		"\u05b2\3\2\2\2\u05b3\u05b4\3\2\2\2\u05b4\u05b5\3\2\2\2\u05b5\u05b6\5`"+
		"\61\2\u05b6\u05b7\7\u008c\2\2\u05b7\u05bc\5N(\2\u05b8\u05b9\7\u0408\2"+
		"\2\u05b9\u05bb\5N(\2\u05ba\u05b8\3\2\2\2\u05bb\u05be\3\2\2\2\u05bc\u05ba"+
		"\3\2\2\2\u05bc\u05bd\3\2\2\2\u05bd\u05c1\3\2\2\2\u05be\u05bc\3\2\2\2\u05bf"+
		"\u05c0\7\u00ae\2\2\u05c0\u05c2\5\u00eav\2\u05c1\u05bf\3\2\2\2\u05c1\u05c2"+
		"\3\2\2\2\u05c2[\3\2\2\2\u05c3\u05c4\7q\2\2\u05c4\u05c5\7\22\2\2\u05c5"+
		"\u05ca\5^\60\2\u05c6\u05c7\7\u0408\2\2\u05c7\u05c9\5^\60\2\u05c8\u05c6"+
		"\3\2\2\2\u05c9\u05cc\3\2\2\2\u05ca\u05c8\3\2\2\2\u05ca\u05cb\3\2\2\2\u05cb"+
		"]\3\2\2\2\u05cc\u05ca\3\2\2\2\u05cd\u05cf\5\u00eav\2\u05ce\u05d0\t\31"+
		"\2\2\u05cf\u05ce\3\2\2\2\u05cf\u05d0\3\2\2\2\u05d0_\3\2\2\2\u05d1\u05d6"+
		"\5b\62\2\u05d2\u05d3\7\u0408\2\2\u05d3\u05d5\5b\62\2\u05d4\u05d2\3\2\2"+
		"\2\u05d5\u05d8\3\2\2\2\u05d6\u05d4\3\2\2\2\u05d6\u05d7\3\2\2\2\u05d7a"+
		"\3\2\2\2\u05d8\u05d6\3\2\2\2\u05d9\u05dd\5d\63\2\u05da\u05dc\5j\66\2\u05db"+
		"\u05da\3\2\2\2\u05dc\u05df\3\2\2\2\u05dd\u05db\3\2\2\2\u05dd\u05de\3\2"+
		"\2\2\u05de\u05eb\3\2\2\2\u05df\u05dd\3\2\2\2\u05e0\u05e1\7\u0406\2\2\u05e1"+
		"\u05e5\5d\63\2\u05e2\u05e4\5j\66\2\u05e3\u05e2\3\2\2\2\u05e4\u05e7\3\2"+
		"\2\2\u05e5\u05e3\3\2\2\2\u05e5\u05e6\3\2\2\2\u05e6\u05e8\3\2\2\2\u05e7"+
		"\u05e5\3\2\2\2\u05e8\u05e9\7\u0407\2\2\u05e9\u05eb\3\2\2\2\u05ea\u05d9"+
		"\3\2\2\2\u05ea\u05e0\3\2\2\2\u05ebc\3\2\2\2\u05ec\u05f2\5\u0094K\2\u05ed"+
		"\u05ee\7u\2\2\u05ee\u05ef\7\u0406\2\2\u05ef\u05f0\5\u00caf\2\u05f0\u05f1"+
		"\7\u0407\2\2\u05f1\u05f3\3\2\2\2\u05f2\u05ed\3\2\2\2\u05f2\u05f3\3\2\2"+
		"\2\u05f3\u05f8\3\2\2\2\u05f4\u05f6\7\r\2\2\u05f5\u05f4\3\2\2\2\u05f5\u05f6"+
		"\3\2\2\2\u05f6\u05f7\3\2\2\2\u05f7\u05f9\5\u00aaV\2\u05f8\u05f5\3\2\2"+
		"\2\u05f8\u05f9\3\2\2\2\u05f9\u0602\3\2\2\2\u05fa\u05ff\5f\64\2\u05fb\u05fc"+
		"\7\u0408\2\2\u05fc\u05fe\5f\64\2\u05fd\u05fb\3\2\2\2\u05fe\u0601\3\2\2"+
		"\2\u05ff\u05fd\3\2\2\2\u05ff\u0600\3\2\2\2\u0600\u0603\3\2\2\2\u0601\u05ff"+
		"\3\2\2\2\u0602\u05fa\3\2\2\2\u0602\u0603\3\2\2\2\u0603\u0615\3\2\2\2\u0604"+
		"\u060a\5H%\2\u0605\u0606\7\u0406\2\2\u0606\u0607\5H%\2\u0607\u0608\7\u0407"+
		"\2\2\u0608\u060a\3\2\2\2\u0609\u0604\3\2\2\2\u0609\u0605\3\2\2\2\u060a"+
		"\u060c\3\2\2\2\u060b\u060d\7\r\2\2\u060c\u060b\3\2\2\2\u060c\u060d\3\2"+
		"\2\2\u060d\u060e\3\2\2\2\u060e\u060f\5\u00aaV\2\u060f\u0615\3\2\2\2\u0610"+
		"\u0611\7\u0406\2\2\u0611\u0612\5`\61\2\u0612\u0613\7\u0407\2\2\u0613\u0615"+
		"\3\2\2\2\u0614\u05ec\3\2\2\2\u0614\u0609\3\2\2\2\u0614\u0610\3\2\2\2\u0615"+
		"e\3\2\2\2\u0616\u0617\t\32\2\2\u0617\u061a\t\f\2\2\u0618\u0619\7<\2\2"+
		"\u0619\u061b\5h\65\2\u061a\u0618\3\2\2\2\u061a\u061b\3\2\2\2\u061b\u061c"+
		"\3\2\2\2\u061c\u061d\7\u0406\2\2\u061d\u061e\5\u00caf\2\u061e\u061f\7"+
		"\u0407\2\2\u061fg\3\2\2\2\u0620\u0626\7S\2\2\u0621\u0622\7q\2\2\u0622"+
		"\u0626\7\22\2\2\u0623\u0624\7D\2\2\u0624\u0626\7\22\2\2\u0625\u0620\3"+
		"\2\2\2\u0625\u0621\3\2\2\2\u0625\u0623\3\2\2\2\u0626i\3\2\2\2\u0627\u0629"+
		"\t\33\2\2\u0628\u0627\3\2\2\2\u0628\u0629\3\2\2\2\u0629\u062a\3\2\2\2"+
		"\u062a\u062b\7S\2\2\u062b\u0633\5d\63\2\u062c\u062d\7l\2\2\u062d\u0634"+
		"\5\u00eav\2\u062e\u062f\7\u00ab\2\2\u062f\u0630\7\u0406\2\2\u0630\u0631"+
		"\5\u00caf\2\u0631\u0632\7\u0407\2\2\u0632\u0634\3\2\2\2\u0633\u062c\3"+
		"\2\2\2\u0633\u062e\3\2\2\2\u0633\u0634\3\2\2\2\u0634\u0654\3\2\2\2\u0635"+
		"\u0636\7\u009b\2\2\u0636\u0639\5d\63\2\u0637\u0638\7l\2\2\u0638\u063a"+
		"\5\u00eav\2\u0639\u0637\3\2\2\2\u0639\u063a\3\2\2\2\u063a\u0654\3\2\2"+
		"\2\u063b\u063d\t\34\2\2\u063c\u063e\7s\2\2\u063d\u063c\3\2\2\2\u063d\u063e"+
		"\3\2\2\2\u063e\u063f\3\2\2\2\u063f\u0640\7S\2\2\u0640\u0648\5d\63\2\u0641"+
		"\u0642\7l\2\2\u0642\u0649\5\u00eav\2\u0643\u0644\7\u00ab\2\2\u0644\u0645"+
		"\7\u0406\2\2\u0645\u0646\5\u00caf\2\u0646\u0647\7\u0407\2\2\u0647\u0649"+
		"\3\2\2\2\u0648\u0641\3\2\2\2\u0648\u0643\3\2\2\2\u0649\u0654\3\2\2\2\u064a"+
		"\u064f\7g\2\2\u064b\u064d\t\34\2\2\u064c\u064e\7s\2\2\u064d\u064c\3\2"+
		"\2\2\u064d\u064e\3\2\2\2\u064e\u0650\3\2\2\2\u064f\u064b\3\2\2\2\u064f"+
		"\u0650\3\2\2\2\u0650\u0651\3\2\2\2\u0651\u0652\7S\2\2\u0652\u0654\5d\63"+
		"\2\u0653\u0628\3\2\2\2\u0653\u0635\3\2\2\2\u0653\u063b\3\2\2\2\u0653\u064a"+
		"\3\2\2\2\u0654k\3\2\2\2\u0655\u0656\7\u0406\2\2\u0656\u0657\5p9\2\u0657"+
		"\u0658\7\u0407\2\2\u0658\u065e\3\2\2\2\u0659\u065a\7\u0406\2\2\u065a\u065b"+
		"\5l\67\2\u065b\u065c\7\u0407\2\2\u065c\u065e\3\2\2\2\u065d\u0655\3\2\2"+
		"\2\u065d\u0659\3\2\2\2\u065em\3\2\2\2\u065f\u0660\7\u0406\2\2\u0660\u0661"+
		"\5r:\2\u0661\u0662\7\u0407\2\2\u0662\u0668\3\2\2\2\u0663\u0664\7\u0406"+
		"\2\2\u0664\u0665\5n8\2\u0665\u0666\7\u0407\2\2\u0666\u0668\3\2\2\2\u0667"+
		"\u065f\3\2\2\2\u0667\u0663\3\2\2\2\u0668o\3\2\2\2\u0669\u066d\7\u008b"+
		"\2\2\u066a\u066c\5x=\2\u066b\u066a\3\2\2\2\u066c\u066f\3\2\2\2\u066d\u066b"+
		"\3\2\2\2\u066d\u066e\3\2\2\2\u066e\u0670\3\2\2\2\u066f\u066d\3\2\2\2\u0670"+
		"\u0672\5z>\2\u0671\u0673\5~@\2\u0672\u0671\3\2\2\2\u0672\u0673\3\2\2\2"+
		"\u0673\u0675\3\2\2\2\u0674\u0676\5\u0084C\2\u0675\u0674\3\2\2\2\u0675"+
		"\u0676\3\2\2\2\u0676\u0678\3\2\2\2\u0677\u0679\5\u0086D\2\u0678\u0677"+
		"\3\2\2\2\u0678\u0679\3\2\2\2\u0679\u067b\3\2\2\2\u067a\u067c\5\u0088E"+
		"\2\u067b\u067a\3\2\2\2\u067b\u067c\3\2\2\2\u067c\u067e\3\2\2\2\u067d\u067f"+
		"\5\\/\2\u067e\u067d\3\2\2\2\u067e\u067f\3\2\2\2\u067f\u0681\3\2\2\2\u0680"+
		"\u0682\5\u008cG\2\u0681\u0680\3\2\2\2\u0681\u0682\3\2\2\2\u0682\u069e"+
		"\3\2\2\2\u0683\u0687\7\u008b\2\2\u0684\u0686\5x=\2\u0685\u0684\3\2\2\2"+
		"\u0686\u0689\3\2\2\2\u0687\u0685\3\2\2\2\u0687\u0688\3\2\2\2\u0688\u068a"+
		"\3\2\2\2\u0689\u0687\3\2\2\2\u068a\u068c\5z>\2\u068b\u068d\5\u0084C\2"+
		"\u068c\u068b\3\2\2\2\u068c\u068d\3\2\2\2\u068d\u068f\3\2\2\2\u068e\u0690"+
		"\5\u0086D\2\u068f\u068e\3\2\2\2\u068f\u0690\3\2\2\2\u0690\u0692\3\2\2"+
		"\2\u0691\u0693\5\u0088E\2\u0692\u0691\3\2\2\2\u0692\u0693\3\2\2\2\u0693"+
		"\u0695\3\2\2\2\u0694\u0696\5\\/\2\u0695\u0694\3\2\2\2\u0695\u0696\3\2"+
		"\2\2\u0696\u0698\3\2\2\2\u0697\u0699\5\u008cG\2\u0698\u0697\3\2\2\2\u0698"+
		"\u0699\3\2\2\2\u0699\u069b\3\2\2\2\u069a\u069c\5~@\2\u069b\u069a\3\2\2"+
		"\2\u069b\u069c\3\2\2\2\u069c\u069e\3\2\2\2\u069d\u0669\3\2\2\2\u069d\u0683"+
		"\3\2\2\2\u069eq\3\2\2\2\u069f\u06a3\7\u008b\2\2\u06a0\u06a2\5x=\2\u06a1"+
		"\u06a0\3\2\2\2\u06a2\u06a5\3\2\2\2\u06a3\u06a1\3\2\2\2\u06a3\u06a4\3\2"+
		"\2\2\u06a4\u06a6\3\2\2\2\u06a5\u06a3\3\2\2\2\u06a6\u06a8\5z>\2\u06a7\u06a9"+
		"\5\u0084C\2\u06a8\u06a7\3\2\2\2\u06a8\u06a9\3\2\2\2\u06a9\u06ab\3\2\2"+
		"\2\u06aa\u06ac\5\u0086D\2\u06ab\u06aa\3\2\2\2\u06ab\u06ac\3\2\2\2\u06ac"+
		"\u06ae\3\2\2\2\u06ad\u06af\5\u0088E\2\u06ae\u06ad\3\2\2\2\u06ae\u06af"+
		"\3\2\2\2\u06af\u06b1\3\2\2\2\u06b0\u06b2\5\\/\2\u06b1\u06b0\3\2\2\2\u06b1"+
		"\u06b2\3\2\2\2\u06b2\u06b4\3\2\2\2\u06b3\u06b5\5\u008cG\2\u06b4\u06b3"+
		"\3\2\2\2\u06b4\u06b5\3\2\2\2\u06b5s\3\2\2\2\u06b6\u06b8\7\u00a4\2\2\u06b7"+
		"\u06b9\t\27\2\2\u06b8\u06b7\3\2\2\2\u06b8\u06b9\3\2\2\2\u06b9\u06ba\3"+
		"\2\2\2\u06ba\u06bb\5n8\2\u06bbu\3\2\2\2\u06bc\u06be\7\u00a4\2\2\u06bd"+
		"\u06bf\t\27\2\2\u06be\u06bd\3\2\2\2\u06be\u06bf\3\2\2\2\u06bf\u06c2\3"+
		"\2\2\2\u06c0\u06c3\5r:\2\u06c1\u06c3\5n8\2\u06c2\u06c0\3\2\2\2\u06c2\u06c1"+
		"\3\2\2\2\u06c3w\3\2\2\2\u06c4\u06cd\t\35\2\2\u06c5\u06cd\7F\2\2\u06c6"+
		"\u06cd\7\u009b\2\2\u06c7\u06cd\7\u0097\2\2\u06c8\u06cd\7\u0095\2\2\u06c9"+
		"\u06cd\7\u021a\2\2\u06ca\u06cd\t\36\2\2\u06cb\u06cd\7\u0096\2\2\u06cc"+
		"\u06c4\3\2\2\2\u06cc\u06c5\3\2\2\2\u06cc\u06c6\3\2\2\2\u06cc\u06c7\3\2"+
		"\2\2\u06cc\u06c8\3\2\2\2\u06cc\u06c9\3\2\2\2\u06cc\u06ca\3\2\2\2\u06cc"+
		"\u06cb\3\2\2\2\u06cdy\3\2\2\2\u06ce\u06d1\7\u03f5\2\2\u06cf\u06d1\5|?"+
		"\2\u06d0\u06ce\3\2\2\2\u06d0\u06cf\3\2\2\2\u06d1\u06d6\3\2\2\2\u06d2\u06d3"+
		"\7\u0408\2\2\u06d3\u06d5\5|?\2\u06d4\u06d2\3\2\2\2\u06d5\u06d8\3\2\2\2"+
		"\u06d6\u06d4\3\2\2\2\u06d6\u06d7\3\2\2\2\u06d7{\3\2\2\2\u06d8\u06d6\3"+
		"\2\2\2\u06d9\u06da\5\u0092J\2\u06da\u06db\7\u0405\2\2\u06db\u06dc\7\u03f5"+
		"\2\2\u06dc\u06f7\3\2\2\2\u06dd\u06e2\5\u0096L\2\u06de\u06e0\7\r\2\2\u06df"+
		"\u06de\3\2\2\2\u06df\u06e0\3\2\2\2\u06e0\u06e1\3\2\2\2\u06e1\u06e3\5\u00aa"+
		"V\2\u06e2\u06df\3\2\2\2\u06e2\u06e3\3\2\2\2\u06e3\u06f7\3\2\2\2\u06e4"+
		"\u06e9\5\u00d6l\2\u06e5\u06e7\7\r\2\2\u06e6\u06e5\3\2\2\2\u06e6\u06e7"+
		"\3\2\2\2\u06e7\u06e8\3\2\2\2\u06e8\u06ea\5\u00aaV\2\u06e9\u06e6\3\2\2"+
		"\2\u06e9\u06ea\3\2\2\2\u06ea\u06f7\3\2\2\2\u06eb\u06ec\7\u0421\2\2\u06ec"+
		"\u06ee\7\u03ec\2\2\u06ed\u06eb\3\2\2\2\u06ed\u06ee\3\2\2\2\u06ee\u06ef"+
		"\3\2\2\2\u06ef\u06f4\5\u00eav\2\u06f0\u06f2\7\r\2\2\u06f1\u06f0\3\2\2"+
		"\2\u06f1\u06f2\3\2\2\2\u06f2\u06f3\3\2\2\2\u06f3\u06f5\5\u00aaV\2\u06f4"+
		"\u06f1\3\2\2\2\u06f4\u06f5\3\2\2\2\u06f5\u06f7\3\2\2\2\u06f6\u06d9\3\2"+
		"\2\2\u06f6\u06dd\3\2\2\2\u06f6\u06e4\3\2\2\2\u06f6\u06ed\3\2\2\2\u06f7"+
		"}\3\2\2\2\u06f8\u06f9\7P\2\2\u06f9\u06fe\5P)\2\u06fa\u06fb\7\u0408\2\2"+
		"\u06fb\u06fd\5P)\2\u06fc\u06fa\3\2\2\2\u06fd\u0700\3\2\2\2\u06fe\u06fc"+
		"\3\2\2\2\u06fe\u06ff\3\2\2\2\u06ff\u071d\3\2\2\2\u0700\u06fe\3\2\2\2\u0701"+
		"\u0702\7P\2\2\u0702\u0703\7\u0151\2\2\u0703\u071d\7\u0415\2\2\u0704\u0705"+
		"\7P\2\2\u0705\u0706\7t\2\2\u0706\u070a\7\u0415\2\2\u0707\u0708\7\30\2"+
		"\2\u0708\u0709\7\u008c\2\2\u0709\u070b\5\u009cO\2\u070a\u0707\3\2\2\2"+
		"\u070a\u070b\3\2\2\2\u070b\u0712\3\2\2\2\u070c\u070e\t\37\2\2\u070d\u070f"+
		"\5\u0080A\2\u070e\u070d\3\2\2\2\u070f\u0710\3\2\2\2\u0710\u070e\3\2\2"+
		"\2\u0710\u0711\3\2\2\2\u0711\u0713\3\2\2\2\u0712\u070c\3\2\2\2\u0712\u0713"+
		"\3\2\2\2\u0713\u071a\3\2\2\2\u0714\u0716\7]\2\2\u0715\u0717\5\u0082B\2"+
		"\u0716\u0715\3\2\2\2\u0717\u0718\3\2\2\2\u0718\u0716\3\2\2\2\u0718\u0719"+
		"\3\2\2\2\u0719\u071b\3\2\2\2\u071a\u0714\3\2\2\2\u071a\u071b\3\2\2\2\u071b"+
		"\u071d\3\2\2\2\u071c\u06f8\3\2\2\2\u071c\u0701\3\2\2\2\u071c\u0704\3\2"+
		"\2\2\u071d\177\3\2\2\2\u071e\u071f\7\u009d\2\2\u071f\u0720\7\22\2\2\u0720"+
		"\u072b\7\u0415\2\2\u0721\u0723\7o\2\2\u0722\u0721\3\2\2\2\u0722\u0723"+
		"\3\2\2\2\u0723\u0724\3\2\2\2\u0724\u0725\7\65\2\2\u0725\u0726\7\22\2\2"+
		"\u0726\u072b\7\u0415\2\2\u0727\u0728\7\66\2\2\u0728\u0729\7\22\2\2\u0729"+
		"\u072b\7\u0415\2\2\u072a\u071e\3\2\2\2\u072a\u0722\3\2\2\2\u072a\u0727"+
		"\3\2\2\2\u072b\u0081\3\2\2\2\u072c\u072d\7\u009a\2\2\u072d\u072e\7\22"+
		"\2\2\u072e\u0733\7\u0415\2\2\u072f\u0730\7\u009d\2\2\u0730\u0731\7\22"+
		"\2\2\u0731\u0733\7\u0415\2\2\u0732\u072c\3\2\2\2\u0732\u072f\3\2\2\2\u0733"+
		"\u0083\3\2\2\2\u0734\u0735\7?\2\2\u0735\u0738\5`\61\2\u0736\u0737\7\u00ae"+
		"\2\2\u0737\u0739\5\u00eav\2\u0738\u0736\3\2\2\2\u0738\u0739\3\2\2\2\u0739"+
		"\u0085\3\2\2\2\u073a\u073b\7D\2\2\u073b\u073c\7\22\2\2\u073c\u0741\5\u008a"+
		"F\2\u073d\u073e\7\u0408\2\2\u073e\u0740\5\u008aF\2\u073f\u073d\3\2\2\2"+
		"\u0740\u0743\3\2\2\2\u0741\u073f\3\2\2\2\u0741\u0742\3\2\2\2\u0742\u0746"+
		"\3\2\2\2\u0743\u0741\3\2\2\2\u0744\u0745\7\u00b0\2\2\u0745\u0747\7\u0201"+
		"\2\2\u0746\u0744\3\2\2\2\u0746\u0747\3\2\2\2\u0747\u0087\3\2\2\2\u0748"+
		"\u0749\7E\2\2\u0749\u074a\5\u00eav\2\u074a\u0089\3\2\2\2\u074b\u074d\5"+
		"\u00eav\2\u074c\u074e\t\31\2\2\u074d\u074c\3\2\2\2\u074d\u074e\3\2\2\2"+
		"\u074e\u008b\3\2\2\2\u074f\u075a\7[\2\2\u0750\u0751\5\u008eH\2\u0751\u0752"+
		"\7\u0408\2\2\u0752\u0754\3\2\2\2\u0753\u0750\3\2\2\2\u0753\u0754\3\2\2"+
		"\2\u0754\u0755\3\2\2\2\u0755\u075b\5\u008eH\2\u0756\u0757\5\u008eH\2\u0757"+
		"\u0758\7\u01c7\2\2\u0758\u0759\5\u008eH\2\u0759\u075b\3\2\2\2\u075a\u0753"+
		"\3\2\2\2\u075a\u0756\3\2\2\2\u075b\u008d\3\2\2\2\u075c\u0760\5\u00b0Y"+
		"\2\u075d\u0760\5\u009aN\2\u075e\u0760\5\u00acW\2\u075f\u075c\3\2\2\2\u075f"+
		"\u075d\3\2\2\2\u075f\u075e\3\2\2\2\u0760\u008f\3\2\2\2\u0761\u0766\5H"+
		"%\2\u0762\u0766\5D#\2\u0763\u0766\5F$\2\u0764\u0766\5J&\2\u0765\u0761"+
		"\3\2\2\2\u0765\u0762\3\2\2\2\u0765\u0763\3\2\2\2\u0765\u0764\3\2\2\2\u0766"+
		"\u076b\3\2\2\2\u0767\u0768\7<\2\2\u0768\u0769\7\u013a\2\2\u0769\u076b"+
		"\5\u00aaV\2\u076a\u0765\3\2\2\2\u076a\u0767\3\2\2\2\u076b\u0091\3\2\2"+
		"\2\u076c\u0770\5\u00aaV\2\u076d\u0771\7\u041c\2\2\u076e\u076f\7\u0405"+
		"\2\2\u076f\u0771\5\u00aaV\2\u0770\u076d\3\2\2\2\u0770\u076e\3\2\2\2\u0770"+
		"\u0771\3\2\2\2\u0771\u0093\3\2\2\2\u0772\u0773\5\u0092J\2\u0773\u0095"+
		"\3\2\2\2\u0774\u0779\5\u00aaV\2\u0775\u0777\5\u00aeX\2\u0776\u0778\5\u00ae"+
		"X\2\u0777\u0776\3\2\2\2\u0777\u0778\3\2\2\2\u0778\u077a\3\2\2\2\u0779"+
		"\u0775\3\2\2\2\u0779\u077a\3\2\2\2\u077a\u0781\3\2\2\2\u077b\u077c\13"+
		"\2\2\2\u077c\u077e\5\u00aeX\2\u077d\u077f\5\u00aeX\2\u077e\u077d\3\2\2"+
		"\2\u077e\u077f\3\2\2\2\u077f\u0781\3\2\2\2\u0780\u0774\3\2\2\2\u0780\u077b"+
		"\3\2\2\2\u0781\u0097\3\2\2\2\u0782\u0785\5\u00aaV\2\u0783\u0785\7\u0415"+
		"\2\2\u0784\u0782\3\2\2\2\u0784\u0783\3\2\2\2\u0785\u078a\3\2\2\2\u0786"+
		"\u0787\7\u0406\2\2\u0787\u0788\5\u00b0Y\2\u0788\u0789\7\u0407\2\2\u0789"+
		"\u078b\3\2\2\2\u078a\u0786\3\2\2\2\u078a\u078b\3\2\2\2\u078b\u078d\3\2"+
		"\2\2\u078c\u078e\t\31\2\2\u078d\u078c\3\2\2\2\u078d\u078e\3\2\2\2\u078e"+
		"\u0099\3\2\2\2\u078f\u0790\t \2\2\u0790\u009b\3\2\2\2\u0791\u0796\7\u00d2"+
		"\2\2\u0792\u0796\5\u00fc\177\2\u0793\u0796\7\u0415\2\2\u0794\u0796\7\u0412"+
		"\2\2\u0795\u0791\3\2\2\2\u0795\u0792\3\2\2\2\u0795\u0793\3\2\2\2\u0795"+
		"\u0794\3\2\2\2\u0796\u009d\3\2\2\2\u0797\u079a\5\u00aaV\2\u0798\u079a"+
		"\7\u0415\2\2\u0799\u0797\3\2\2\2\u0799\u0798\3\2\2\2\u079a\u009f\3\2\2"+
		"\2\u079b\u079c\t!\2\2\u079c\u00a1\3\2\2\2\u079d\u079e\5\u00b0Y\2\u079e"+
		"\u079f\7\u03fa\2\2\u079f\u07a0\5\u00b0Y\2\u07a0\u07a1\7\u03fa\2\2\u07a1"+
		"\u07a2\5\u00b0Y\2\u07a2\u07a3\7\u03fa\2\2\u07a3\u07a4\5\u00b0Y\2\u07a4"+
		"\u07a5\7\u03fa\2\2\u07a5\u07ab\5\u00b0Y\2\u07a6\u07a7\7\u0411\2\2\u07a7"+
		"\u07a8\5\u00b0Y\2\u07a8\u07a9\7\u03fa\2\2\u07a9\u07aa\5\u00b0Y\2\u07aa"+
		"\u07ac\3\2\2\2\u07ab\u07a6\3\2\2\2\u07ac\u07ad\3\2\2\2\u07ad\u07ab\3\2"+
		"\2\2\u07ad\u07ae\3\2\2\2\u07ae\u00a3\3\2\2\2\u07af\u07b6\5\u00a6T\2\u07b0"+
		"\u07b1\7\u0408\2\2\u07b1\u07b4\5\u00a6T\2\u07b2\u07b3\7\u0408\2\2\u07b3"+
		"\u07b5\5\u00b0Y\2\u07b4\u07b2\3\2\2\2\u07b4\u07b5\3\2\2\2\u07b5\u07b7"+
		"\3\2\2\2\u07b6\u07b0\3\2\2\2\u07b6\u07b7\3\2\2\2\u07b7\u00a5\3\2\2\2\u07b8"+
		"\u07c0\7\u0415\2\2\u07b9\u07c0\7\u041a\2\2\u07ba\u07bc\7\u0417\2\2\u07bb"+
		"\u07ba\3\2\2\2\u07bc\u07bd\3\2\2\2\u07bd\u07bb\3\2\2\2\u07bd\u07be\3\2"+
		"\2\2\u07be\u07c0\3\2\2\2\u07bf\u07b8\3\2\2\2\u07bf\u07b9\3\2\2\2\u07bf"+
		"\u07bb\3\2\2\2\u07c0\u00a7\3\2\2\2\u07c1\u07c4\5\u00aaV\2\u07c2\u07c4"+
		"\7\u0415\2\2\u07c3\u07c1\3\2\2\2\u07c3\u07c2\3\2\2\2\u07c4\u00a9\3\2\2"+
		"\2\u07c5\u07c9\5\u00acW\2\u07c6\u07c9\7\u041e\2\2\u07c7\u07c9\7\u0412"+
		"\2\2\u07c8\u07c5\3\2\2\2\u07c8\u07c6\3\2\2\2\u07c8\u07c7\3\2\2\2\u07c9"+
		"\u00ab\3\2\2\2\u07ca\u07d4\7\u041d\2\2\u07cb\u07d4\5\u00fc\177\2\u07cc"+
		"\u07d4\5\u00fe\u0080\2\u07cd\u07d4\5\u00a0Q\2\u07ce\u07d4\5\u0100\u0081"+
		"\2\u07cf\u07d4\5\u0102\u0082\2\u07d0\u07d4\5\u0104\u0083\2\u07d1\u07d4"+
		"\5\u0106\u0084\2\u07d2\u07d4\5\u0108\u0085\2\u07d3\u07ca\3\2\2\2\u07d3"+
		"\u07cb\3\2\2\2\u07d3\u07cc\3\2\2\2\u07d3\u07cd\3\2\2\2\u07d3\u07ce\3\2"+
		"\2\2\u07d3\u07cf\3\2\2\2\u07d3\u07d0\3\2\2\2\u07d3\u07d1\3\2\2\2\u07d3"+
		"\u07d2\3\2\2\2\u07d4\u00ad\3\2\2\2\u07d5\u07d9\7\u041c\2\2\u07d6\u07d7"+
		"\7\u0405\2\2\u07d7\u07d9\5\u00aaV\2\u07d8\u07d5\3\2\2\2\u07d8\u07d6\3"+
		"\2\2\2\u07d9\u00af\3\2\2\2\u07da\u07db\t\"\2\2\u07db\u00b1\3\2\2\2\u07dc"+
		"\u07df\7\u0413\2\2\u07dd\u07df\5\u00b0Y\2\u07de\u07dc\3\2\2\2\u07de\u07dd"+
		"\3\2\2\2\u07df\u00b3\3\2\2\2\u07e0\u07e2\7\u041b\2\2\u07e1\u07e0\3\2\2"+
		"\2\u07e1\u07e2\3\2\2\2\u07e2\u07e3\3\2\2\2\u07e3\u07e6\7\u0415\2\2\u07e4"+
		"\u07e6\7\u0414\2\2\u07e5\u07e1\3\2\2\2\u07e5\u07e4\3\2\2\2\u07e6\u07e8"+
		"\3\2\2\2\u07e7\u07e9\7\u0415\2\2\u07e8\u07e7\3\2\2\2\u07e9\u07ea\3\2\2"+
		"\2\u07ea\u07e8\3\2\2\2\u07ea\u07eb\3\2\2\2\u07eb\u07f8\3\2\2\2\u07ec\u07ee"+
		"\7\u041b\2\2\u07ed\u07ec\3\2\2\2\u07ed\u07ee\3\2\2\2\u07ee\u07ef\3\2\2"+
		"\2\u07ef\u07f2\7\u0415\2\2\u07f0\u07f2\7\u0414\2\2\u07f1\u07ed\3\2\2\2"+
		"\u07f1\u07f0\3\2\2\2\u07f2\u07f5\3\2\2\2\u07f3\u07f4\7\32\2\2\u07f4\u07f6"+
		"\5\u009eP\2\u07f5\u07f3\3\2\2\2\u07f5\u07f6\3\2\2\2\u07f6\u07f8\3\2\2"+
		"\2\u07f7\u07e5\3\2\2\2\u07f7\u07f1\3\2\2\2\u07f8\u00b5\3\2\2\2\u07f9\u07fa"+
		"\t#\2\2\u07fa\u00b7\3\2\2\2\u07fb\u07fd\7\u041b\2\2\u07fc\u07fb\3\2\2"+
		"\2\u07fc\u07fd\3\2\2\2\u07fd\u07fe\3\2\2\2\u07fe\u07ff\7\u0417\2\2\u07ff"+
		"\u00b9\3\2\2\2\u0800\u0802\7h\2\2\u0801\u0800\3\2\2\2\u0801\u0802\3\2"+
		"\2\2\u0802\u0803\3\2\2\2\u0803\u0804\t$\2\2\u0804\u00bb\3\2\2\2\u0805"+
		"\u0812\5\u00b4[\2\u0806\u0812\5\u00b0Y\2\u0807\u0808\7\u03fa\2\2\u0808"+
		"\u0812\5\u00b0Y\2\u0809\u0812\5\u00b8]\2\u080a\u0812\5\u00b6\\\2\u080b"+
		"\u0812\7\u0418\2\2\u080c\u0812\7\u041a\2\2\u080d\u080f\7h\2\2\u080e\u080d"+
		"\3\2\2\2\u080e\u080f\3\2\2\2\u080f\u0810\3\2\2\2\u0810\u0812\t$\2\2\u0811"+
		"\u0805\3\2\2\2\u0811\u0806\3\2\2\2\u0811\u0807\3\2\2\2\u0811\u0809\3\2"+
		"\2\2\u0811\u080a\3\2\2\2\u0811\u080b\3\2\2\2\u0811\u080c\3\2\2\2\u0811"+
		"\u080e\3\2\2\2\u0812\u00bd\3\2\2\2\u0813\u0815\t%\2\2\u0814\u0816\7\u00de"+
		"\2\2\u0815\u0814\3\2\2\2\u0815\u0816\3\2\2\2\u0816\u0818\3\2\2\2\u0817"+
		"\u0819\5\u00c4c\2\u0818\u0817\3\2\2\2\u0818\u0819\3\2\2\2\u0819\u081b"+
		"\3\2\2\2\u081a\u081c\7\u00d2\2\2\u081b\u081a\3\2\2\2\u081b\u081c\3\2\2"+
		"\2\u081c\u0823\3\2\2\2\u081d\u081e\7\30\2\2\u081e\u0821\7\u008c\2\2\u081f"+
		"\u0821\7\u02e5\2\2\u0820\u081d\3\2\2\2\u0820\u081f\3\2\2\2\u0821\u0822"+
		"\3\2\2\2\u0822\u0824\5\u009cO\2\u0823\u0820\3\2\2\2\u0823\u0824\3\2\2"+
		"\2\u0824\u0828\3\2\2\2\u0825\u0826\7\32\2\2\u0826\u0829\5\u009eP\2\u0827"+
		"\u0829\7\u00d2\2\2\u0828\u0825\3\2\2\2\u0828\u0827\3\2\2\2\u0828\u0829"+
		"\3\2\2\2\u0829\u0897\3\2\2\2\u082a\u082b\7\u00d1\2\2\u082b\u082d\t&\2"+
		"\2\u082c\u082e\5\u00c4c\2\u082d\u082c\3\2\2\2\u082d\u082e\3\2\2\2\u082e"+
		"\u0830\3\2\2\2\u082f\u0831\7\u00d2\2\2\u0830\u082f\3\2\2\2\u0830\u0831"+
		"\3\2\2\2\u0831\u0897\3\2\2\2\u0832\u0833\7\u01c0\2\2\u0833\u0835\7\u00cf"+
		"\2\2\u0834\u0836\5\u00c4c\2\u0835\u0834\3\2\2\2\u0835\u0836\3\2\2\2\u0836"+
		"\u0838\3\2\2\2\u0837\u0839\7\u00d2\2\2\u0838\u0837\3\2\2\2\u0838\u0839"+
		"\3\2\2\2\u0839\u0897\3\2\2\2\u083a\u083b\7\u00d1\2\2\u083b\u083c\t\'\2"+
		"\2\u083c\u083e\7\u00de\2\2\u083d\u083f\5\u00c4c\2\u083e\u083d\3\2\2\2"+
		"\u083e\u083f\3\2\2\2\u083f\u0841\3\2\2\2\u0840\u0842\7\u00d2\2\2\u0841"+
		"\u0840\3\2\2\2\u0841\u0842\3\2\2\2\u0842\u0897\3\2\2\2\u0843\u0845\t("+
		"\2\2\u0844\u0846\5\u00c4c\2\u0845\u0844\3\2\2\2\u0845\u0846\3\2\2\2\u0846"+
		"\u0848\3\2\2\2\u0847\u0849\t)\2\2\u0848\u0847\3\2\2\2\u0848\u0849\3\2"+
		"\2\2\u0849\u084b\3\2\2\2\u084a\u084c\7\u00b3\2\2\u084b\u084a\3\2\2\2\u084b"+
		"\u084c\3\2\2\2\u084c\u0897\3\2\2\2\u084d\u084f\7\u00c0\2\2\u084e\u0850"+
		"\5\u00c6d\2\u084f\u084e\3\2\2\2\u084f\u0850\3\2\2\2\u0850\u0852\3\2\2"+
		"\2\u0851\u0853\t)\2\2\u0852\u0851\3\2\2\2\u0852\u0853\3\2\2\2\u0853\u0855"+
		"\3\2\2\2\u0854\u0856\7\u00b3\2\2\u0855\u0854\3\2\2\2\u0855\u0856\3\2\2"+
		"\2\u0856\u0897\3\2\2\2\u0857\u0859\7\u00c1\2\2\u0858\u085a\7\u00c2\2\2"+
		"\u0859\u0858\3\2\2\2\u0859\u085a\3\2\2\2\u085a\u085c\3\2\2\2\u085b\u085d"+
		"\5\u00c6d\2\u085c\u085b\3\2\2\2\u085c\u085d\3\2\2\2\u085d\u085f\3\2\2"+
		"\2\u085e\u0860\t)\2\2\u085f\u085e\3\2\2\2\u085f\u0860\3\2\2\2\u0860\u0862"+
		"\3\2\2\2\u0861\u0863\7\u00b3\2\2\u0862\u0861\3\2\2\2\u0862\u0863\3\2\2"+
		"\2\u0863\u0897\3\2\2\2\u0864\u0866\t*\2\2\u0865\u0867\5\u00c8e";
	private static final String _serializedATNSegment1 =
		"\2\u0866\u0865\3\2\2\2\u0866\u0867\3\2\2\2\u0867\u0869\3\2\2\2\u0868\u086a"+
		"\t)\2\2\u0869\u0868\3\2\2\2\u0869\u086a\3\2\2\2\u086a\u086c\3\2\2\2\u086b"+
		"\u086d\7\u00b3\2\2\u086c\u086b\3\2\2\2\u086c\u086d\3\2\2\2\u086d\u0897"+
		"\3\2\2\2\u086e\u0897\t+\2\2\u086f\u0871\t,\2\2\u0870\u0872\5\u00c4c\2"+
		"\u0871\u0870\3\2\2\2\u0871\u0872\3\2\2\2\u0872\u0897\3\2\2\2\u0873\u0874"+
		"\t-\2\2\u0874\u0876\5\u00c0a\2\u0875\u0877\7\u00d2\2\2\u0876\u0875\3\2"+
		"\2\2\u0876\u0877\3\2\2\2\u0877\u087e\3\2\2\2\u0878\u0879\7\30\2\2\u0879"+
		"\u087c\7\u008c\2\2\u087a\u087c\7\u02e5\2\2\u087b\u0878\3\2\2\2\u087b\u087a"+
		"\3\2\2\2\u087c\u087d\3\2\2\2\u087d\u087f\5\u009cO\2\u087e\u087b\3\2\2"+
		"\2\u087e\u087f\3\2\2\2\u087f\u0897\3\2\2\2\u0880\u0897\t.\2\2\u0881\u0883"+
		"\7\u00d7\2\2\u0882\u0884\7\u00cf\2\2\u0883\u0882\3\2\2\2\u0883\u0884\3"+
		"\2\2\2\u0884\u0886\3\2\2\2\u0885\u0887\7\u00d2\2\2\u0886\u0885\3\2\2\2"+
		"\u0886\u0887\3\2\2\2\u0887\u088e\3\2\2\2\u0888\u0889\7\30\2\2\u0889\u088c"+
		"\7\u008c\2\2\u088a\u088c\7\u02e5\2\2\u088b\u0888\3\2\2\2\u088b\u088a\3"+
		"\2\2\2\u088c\u088d\3\2\2\2\u088d\u088f\5\u009cO\2\u088e\u088b\3\2\2\2"+
		"\u088e\u088f\3\2\2\2\u088f\u0892\3\2\2\2\u0890\u0891\7\32\2\2\u0891\u0893"+
		"\5\u009eP\2\u0892\u0890\3\2\2\2\u0892\u0893\3\2\2\2\u0893\u0897\3\2\2"+
		"\2\u0894\u0895\7\u00d7\2\2\u0895\u0897\7\u00d3\2\2\u0896\u0813\3\2\2\2"+
		"\u0896\u082a\3\2\2\2\u0896\u0832\3\2\2\2\u0896\u083a\3\2\2\2\u0896\u0843"+
		"\3\2\2\2\u0896\u084d\3\2\2\2\u0896\u0857\3\2\2\2\u0896\u0864\3\2\2\2\u0896"+
		"\u086e\3\2\2\2\u0896\u086f\3\2\2\2\u0896\u0873\3\2\2\2\u0896\u0880\3\2"+
		"\2\2\u0896\u0881\3\2\2\2\u0896\u0894\3\2\2\2\u0897\u00bf\3\2\2\2\u0898"+
		"\u0899\7\u0406\2\2\u0899\u089e\7\u0415\2\2\u089a\u089b\7\u0408\2\2\u089b"+
		"\u089d\7\u0415\2\2\u089c\u089a\3\2\2\2\u089d\u08a0\3\2\2\2\u089e\u089c"+
		"\3\2\2\2\u089e\u089f\3\2\2\2\u089f\u08a1\3\2\2\2\u08a0\u089e\3\2\2\2\u08a1"+
		"\u08a2\7\u0407\2\2\u08a2\u00c1\3\2\2\2\u08a3\u08a5\t/\2\2\u08a4\u08a6"+
		"\5\u00c4c\2\u08a5\u08a4\3\2\2\2\u08a5\u08a6\3\2\2\2\u08a6\u08bd\3\2\2"+
		"\2\u08a7\u08a9\7\u00ce\2\2\u08a8\u08aa\5\u00c4c\2\u08a9\u08a8\3\2\2\2"+
		"\u08a9\u08aa\3\2\2\2\u08aa\u08b1\3\2\2\2\u08ab\u08ac\7\30\2\2\u08ac\u08af"+
		"\7\u008c\2\2\u08ad\u08af\7\u02e5\2\2\u08ae\u08ab\3\2\2\2\u08ae\u08ad\3"+
		"\2\2\2\u08af\u08b0\3\2\2\2\u08b0\u08b2\5\u009cO\2\u08b1\u08ae\3\2\2\2"+
		"\u08b1\u08b2\3\2\2\2\u08b2\u08bd\3\2\2\2\u08b3\u08bd\t\60\2\2\u08b4\u08b6"+
		"\7\u00c6\2\2\u08b5\u08b7\5\u00c6d\2\u08b6\u08b5\3\2\2\2\u08b6\u08b7\3"+
		"\2\2\2\u08b7\u08bd\3\2\2\2\u08b8\u08ba\t)\2\2\u08b9\u08bb\7\u00be\2\2"+
		"\u08ba\u08b9\3\2\2\2\u08ba\u08bb\3\2\2\2\u08bb\u08bd\3\2\2\2\u08bc\u08a3"+
		"\3\2\2\2\u08bc\u08a7\3\2\2\2\u08bc\u08b3\3\2\2\2\u08bc\u08b4\3\2\2\2\u08bc"+
		"\u08b8\3\2\2\2\u08bd\u00c3\3\2\2\2\u08be\u08bf\7\u0406\2\2\u08bf\u08c0"+
		"\5\u00b0Y\2\u08c0\u08c1\7\u0407\2\2\u08c1\u00c5\3\2\2\2\u08c2\u08c3\7"+
		"\u0406\2\2\u08c3\u08c4\5\u00b0Y\2\u08c4\u08c5\7\u0408\2\2\u08c5\u08c6"+
		"\5\u00b0Y\2\u08c6\u08c7\7\u0407\2\2\u08c7\u00c7\3\2\2\2\u08c8\u08c9\7"+
		"\u0406\2\2\u08c9\u08cc\5\u00b0Y\2\u08ca\u08cb\7\u0408\2\2\u08cb\u08cd"+
		"\5\u00b0Y\2\u08cc\u08ca\3\2\2\2\u08cc\u08cd\3\2\2\2\u08cd\u08ce\3\2\2"+
		"\2\u08ce\u08cf\7\u0407\2\2\u08cf\u00c9\3\2\2\2\u08d0\u08d5\5\u00aaV\2"+
		"\u08d1\u08d2\7\u0408\2\2\u08d2\u08d4\5\u00aaV\2\u08d3\u08d1\3\2\2\2\u08d4"+
		"\u08d7\3\2\2\2\u08d5\u08d3\3\2\2\2\u08d5\u08d6\3\2\2\2\u08d6\u00cb\3\2"+
		"\2\2\u08d7\u08d5\3\2\2\2\u08d8\u08dd\5\u0094K\2\u08d9\u08da\7\u0408\2"+
		"\2\u08da\u08dc\5\u0094K\2\u08db\u08d9\3\2\2\2\u08dc\u08df\3\2\2\2\u08dd"+
		"\u08db\3\2\2\2\u08dd\u08de\3\2\2\2\u08de\u00cd\3\2\2\2\u08df\u08dd\3\2"+
		"\2\2\u08e0\u08e1\7\u0406\2\2\u08e1\u08e6\5\u0098M\2\u08e2\u08e3\7\u0408"+
		"\2\2\u08e3\u08e5\5\u0098M\2\u08e4\u08e2\3\2\2\2\u08e5\u08e8\3\2\2\2\u08e6"+
		"\u08e4\3\2\2\2\u08e6\u08e7\3\2\2\2\u08e7\u08e9\3\2\2\2\u08e8\u08e6\3\2"+
		"\2\2\u08e9\u08ea\7\u0407\2\2\u08ea\u00cf\3\2\2\2\u08eb\u08f0\5\u00eav"+
		"\2\u08ec\u08ed\7\u0408\2\2\u08ed\u08ef\5\u00eav\2\u08ee\u08ec\3\2\2\2"+
		"\u08ef\u08f2\3\2\2\2\u08f0\u08ee\3\2\2\2\u08f0\u08f1\3\2\2\2\u08f1\u00d1"+
		"\3\2\2\2\u08f2\u08f0\3\2\2\2\u08f3\u08f8\5\u00d4k\2\u08f4\u08f5\7\u0408"+
		"\2\2\u08f5\u08f7\5\u00d4k\2\u08f6\u08f4\3\2\2\2\u08f7\u08fa\3\2\2\2\u08f8"+
		"\u08f6\3\2\2\2\u08f8\u08f9\3\2\2\2\u08f9\u00d3\3\2\2\2\u08fa\u08f8\3\2"+
		"\2\2\u08fb\u08fe\5\u00eav\2\u08fc\u08fe\7(\2\2\u08fd\u08fb\3\2\2\2\u08fd"+
		"\u08fc\3\2\2\2\u08fe\u00d5\3\2\2\2\u08ff\u0911\5\u00d8m\2\u0900\u0911"+
		"\5\u00e0q\2\u0901\u0902\5\u00e2r\2\u0902\u0904\7\u0406\2\2\u0903\u0905"+
		"\5\u00e6t\2\u0904\u0903\3\2\2\2\u0904\u0905\3\2\2\2\u0905\u0906\3\2\2"+
		"\2\u0906\u0907\7\u0407\2\2\u0907\u0911\3\2\2\2\u0908\u0909\5\u0092J\2"+
		"\u0909\u090b\7\u0406\2\2\u090a\u090c\5\u00e6t\2\u090b\u090a\3\2\2\2\u090b"+
		"\u090c\3\2\2\2\u090c\u090d\3\2\2\2\u090d\u090e\7\u0407\2\2\u090e\u0911"+
		"\3\2\2\2\u090f\u0911\5\u00e4s\2\u0910\u08ff\3\2\2\2\u0910\u0900\3\2\2"+
		"\2\u0910\u0901\3\2\2\2\u0910\u0908\3\2\2\2\u0910\u090f\3\2\2\2\u0911\u00d7"+
		"\3\2\2\2\u0912\u0915\t\61\2\2\u0913\u0914\7\u0406\2\2\u0914\u0916\7\u0407"+
		"\2\2\u0915\u0913\3\2\2\2\u0915\u0916\3\2\2\2\u0916\u09b4\3\2\2\2\u0917"+
		"\u0918\7\37\2\2\u0918\u0919\7\u0406\2\2\u0919\u091a\5\u00eav\2\u091a\u091b"+
		"\7\u0408\2\2\u091b\u091c\5\u00c2b\2\u091c\u091d\7\u0407\2\2\u091d\u09b4"+
		"\3\2\2\2\u091e\u091f\7\37\2\2\u091f\u0920\7\u0406\2\2\u0920\u0921\5\u00ea"+
		"v\2\u0921\u0922\7\u00ab\2\2\u0922\u0923\5\u009cO\2\u0923\u0924\7\u0407"+
		"\2\2\u0924\u09b4\3\2\2\2\u0925\u0926\7\26\2\2\u0926\u0927\7\u0406\2\2"+
		"\u0927\u0928\5\u00eav\2\u0928\u0929\7\r\2\2\u0929\u092a\5\u00c2b\2\u092a"+
		"\u092b\7\u0407\2\2\u092b\u09b4\3\2\2\2\u092c\u092d\7\u00ac\2\2\u092d\u092e"+
		"\7\u0406\2\2\u092e\u092f\5\u0096L\2\u092f\u0930\7\u0407\2\2\u0930\u09b4"+
		"\3\2\2\2\u0931\u0932\7\25\2\2\u0932\u0934\5\u00eav\2\u0933\u0935\5\u00da"+
		"n\2\u0934\u0933\3\2\2\2\u0935\u0936\3\2\2\2\u0936\u0934\3\2\2\2\u0936"+
		"\u0937\3\2\2\2\u0937\u093a\3\2\2\2\u0938\u0939\7\63\2\2\u0939\u093b\5"+
		"\u00e8u\2\u093a\u0938\3\2\2\2\u093a\u093b\3\2\2\2\u093b\u093c\3\2\2\2"+
		"\u093c\u093d\7\u0156\2\2\u093d\u09b4\3\2\2\2\u093e\u0940\7\25\2\2\u093f"+
		"\u0941\5\u00dan\2\u0940\u093f\3\2\2\2\u0941\u0942\3\2\2\2\u0942\u0940"+
		"\3\2\2\2\u0942\u0943\3\2\2\2\u0943\u0946\3\2\2\2\u0944\u0945\7\63\2\2"+
		"\u0945\u0947\5\u00e8u\2\u0946\u0944\3\2\2\2\u0946\u0947\3\2\2\2\u0947"+
		"\u0948\3\2\2\2\u0948\u0949\7\u0156\2\2\u0949\u09b4\3\2\2\2\u094a\u094b"+
		"\7\u00ce\2\2\u094b\u094c\7\u0406\2\2\u094c\u094f\5\u00e6t\2\u094d\u094e"+
		"\7\u00ab\2\2\u094e\u0950\5\u009cO\2\u094f\u094d\3\2\2\2\u094f\u0950\3"+
		"\2\2\2\u0950\u0951\3\2\2\2\u0951\u0952\7\u0407\2\2\u0952\u09b4\3\2\2\2"+
		"\u0953\u0954\7\u0108\2\2\u0954\u0957\7\u0406\2\2\u0955\u0958\5\u00b4["+
		"\2\u0956\u0958\5\u00eav\2\u0957\u0955\3\2\2\2\u0957\u0956\3\2\2\2\u0958"+
		"\u0959\3\2\2\2\u0959\u095c\7I\2\2\u095a\u095d\5\u00b4[\2\u095b\u095d\5"+
		"\u00eav\2\u095c\u095a\3\2\2\2\u095c\u095b\3\2\2\2\u095d\u095e\3\2\2\2"+
		"\u095e\u095f\7\u0407\2\2\u095f\u09b4\3\2\2\2\u0960\u0961\t\62\2\2\u0961"+
		"\u0964\7\u0406\2\2\u0962\u0965\5\u00b4[\2\u0963\u0965\5\u00eav\2\u0964"+
		"\u0962\3\2\2\2\u0964\u0963\3\2\2\2\u0965\u0966\3\2\2\2\u0966\u0969\7?"+
		"\2\2\u0967\u096a\5\u00b0Y\2\u0968\u096a\5\u00eav\2\u0969\u0967\3\2\2\2"+
		"\u0969\u0968\3\2\2\2\u096a\u0970\3\2\2\2\u096b\u096e\7<\2\2\u096c\u096f"+
		"\5\u00b0Y\2\u096d\u096f\5\u00eav\2\u096e\u096c\3\2\2\2\u096e\u096d\3\2"+
		"\2\2\u096f\u0971\3\2\2\2\u0970\u096b\3\2\2\2\u0970\u0971\3\2\2\2\u0971"+
		"\u0972\3\2\2\2\u0972\u0973\7\u0407\2\2\u0973\u09b4\3\2\2\2\u0974\u0975"+
		"\7\u010c\2\2\u0975\u0976\7\u0406\2\2\u0976\u0979\t\63\2\2\u0977\u097a"+
		"\5\u00b4[\2\u0978\u097a\5\u00eav\2\u0979\u0977\3\2\2\2\u0979\u0978\3\2"+
		"\2\2\u0979\u097a\3\2\2\2\u097a\u097b\3\2\2\2\u097b\u097e\7?\2\2\u097c"+
		"\u097f\5\u00b4[\2\u097d\u097f\5\u00eav\2\u097e\u097c\3\2\2\2\u097e\u097d"+
		"\3\2\2\2\u097f\u0980\3\2\2\2\u0980\u0981\7\u0407\2\2\u0981\u09b4\3\2\2"+
		"\2\u0982\u0983\7\u010c\2\2\u0983\u0986\7\u0406\2\2\u0984\u0987\5\u00b4"+
		"[\2\u0985\u0987\5\u00eav\2\u0986\u0984\3\2\2\2\u0986\u0985\3\2\2\2\u0987"+
		"\u0988\3\2\2\2\u0988\u098b\7?\2\2\u0989\u098c\5\u00b4[\2\u098a\u098c\5"+
		"\u00eav\2\u098b\u0989\3\2\2\2\u098b\u098a\3\2\2\2\u098c\u098d\3\2\2\2"+
		"\u098d\u098e\7\u0407\2\2\u098e\u09b4\3\2\2\2\u098f\u0990\7\u03e7\2\2\u0990"+
		"\u0993\7\u0406\2\2\u0991\u0994\5\u00b4[\2\u0992\u0994\5\u00eav\2\u0993"+
		"\u0991\3\2\2\2\u0993\u0992\3\2\2\2\u0994\u099b\3\2\2\2\u0995\u0996\7\r"+
		"\2\2\u0996\u0997\t\64\2\2\u0997\u0998\7\u0406\2\2\u0998\u0999\5\u00b0"+
		"Y\2\u0999\u099a\7\u0407\2\2\u099a\u099c\3\2\2\2\u099b\u0995\3\2\2\2\u099b"+
		"\u099c\3\2\2\2\u099c\u099e\3\2\2\2\u099d\u099f\5\u00dco\2\u099e\u099d"+
		"\3\2\2\2\u099e\u099f\3\2\2\2\u099f\u09a0\3\2\2\2\u09a0\u09a1\7\u0407\2"+
		"\2\u09a1\u09b4\3\2\2\2\u09a2\u09a3\7\u0105\2\2\u09a3\u09a4\7\u0406\2\2"+
		"\u09a4\u09a5\5B\"\2\u09a5\u09a8\7?\2\2\u09a6\u09a9\5\u00b4[\2\u09a7\u09a9"+
		"\5\u00eav\2\u09a8\u09a6\3\2\2\2\u09a8\u09a7\3\2\2\2\u09a9\u09aa\3\2\2"+
		"\2\u09aa\u09ab\7\u0407\2\2\u09ab\u09b4\3\2\2\2\u09ac\u09ad\7\u031f\2\2"+
		"\u09ad\u09ae\7\u0406\2\2\u09ae\u09af\t\65\2\2\u09af\u09b0\7\u0408\2\2"+
		"\u09b0\u09b1\5\u00b4[\2\u09b1\u09b2\7\u0407\2\2\u09b2\u09b4\3\2\2\2\u09b3"+
		"\u0912\3\2\2\2\u09b3\u0917\3\2\2\2\u09b3\u091e\3\2\2\2\u09b3\u0925\3\2"+
		"\2\2\u09b3\u092c\3\2\2\2\u09b3\u0931\3\2\2\2\u09b3\u093e\3\2\2\2\u09b3"+
		"\u094a\3\2\2\2\u09b3\u0953\3\2\2\2\u09b3\u0960\3\2\2\2\u09b3\u0974\3\2"+
		"\2\2\u09b3\u0982\3\2\2\2\u09b3\u098f\3\2\2\2\u09b3\u09a2\3\2\2\2\u09b3"+
		"\u09ac\3\2\2\2\u09b4\u00d9\3\2\2\2\u09b5\u09b6\7\u00ad\2\2\u09b6\u09b7"+
		"\5\u00e8u\2\u09b7\u09b8\7\u009e\2\2\u09b8\u09b9\5\u00e8u\2\u09b9\u00db"+
		"\3\2\2\2\u09ba\u09bb\7\u0192\2\2\u09bb\u09c0\5\u00dep\2\u09bc\u09bd\7"+
		"\u0408\2\2\u09bd\u09bf\5\u00dep\2\u09be\u09bc\3\2\2\2\u09bf\u09c2\3\2"+
		"\2\2\u09c0\u09be\3\2\2\2\u09c0\u09c1\3\2\2\2\u09c1\u09c9\3\2\2\2\u09c2"+
		"\u09c0\3\2\2\2\u09c3\u09c4\7\u0192\2\2\u09c4\u09c5\5\u00b0Y\2\u09c5\u09c6"+
		"\7\u03fa\2\2\u09c6\u09c7\5\u00b0Y\2\u09c7\u09c9\3\2\2\2\u09c8\u09ba\3"+
		"\2\2\2\u09c8\u09c3\3\2\2\2\u09c9\u00dd\3\2\2\2\u09ca\u09cc\5\u00b0Y\2"+
		"\u09cb\u09cd\t\66\2\2\u09cc\u09cb\3\2\2\2\u09cc\u09cd\3\2\2\2\u09cd\u00df"+
		"\3\2\2\2\u09ce\u09cf\t\67\2\2\u09cf\u09d1\7\u0406\2\2\u09d0\u09d2\t\27"+
		"\2\2\u09d1\u09d0\3\2\2\2\u09d1\u09d2\3\2\2\2\u09d2\u09d3\3\2\2\2\u09d3"+
		"\u09d4\5\u00e8u\2\u09d4\u09d5\7\u0407\2\2\u09d5\u0a07\3\2\2\2\u09d6\u09d7"+
		"\7\u00f1\2\2\u09d7\u09dd\7\u0406\2\2\u09d8\u09de\7\u03f5\2\2\u09d9\u09db"+
		"\7\b\2\2\u09da\u09d9\3\2\2\2\u09da\u09db\3\2\2\2\u09db\u09dc\3\2\2\2\u09dc"+
		"\u09de\5\u00e8u\2\u09dd\u09d8\3\2\2\2\u09dd\u09da\3\2\2\2\u09de\u09df"+
		"\3\2\2\2\u09df\u0a07\7\u0407\2\2\u09e0\u09e1\7\u00f1\2\2\u09e1\u09e2\7"+
		"\u0406\2\2\u09e2\u09e3\7/\2\2\u09e3\u09e4\5\u00e6t\2\u09e4\u09e5\7\u0407"+
		"\2\2\u09e5\u0a07\3\2\2\2\u09e6\u09e7\t8\2\2\u09e7\u09e9\7\u0406\2\2\u09e8"+
		"\u09ea\7\b\2\2\u09e9\u09e8\3\2\2\2\u09e9\u09ea\3\2\2\2\u09ea\u09eb\3\2"+
		"\2\2\u09eb\u09ec\5\u00e8u\2\u09ec\u09ed\7\u0407\2\2\u09ed\u0a07\3\2\2"+
		"\2\u09ee\u09ef\7\u00f2\2\2\u09ef\u09f1\7\u0406\2\2\u09f0\u09f2\7/\2\2"+
		"\u09f1\u09f0\3\2\2\2\u09f1\u09f2\3\2\2\2\u09f2\u09f3\3\2\2\2\u09f3\u09fe"+
		"\5\u00e6t\2\u09f4\u09f5\7q\2\2\u09f5\u09f6\7\22\2\2\u09f6\u09fb\5^\60"+
		"\2\u09f7\u09f8\7\u0408\2\2\u09f8\u09fa\5^\60\2\u09f9\u09f7\3\2\2\2\u09fa"+
		"\u09fd\3\2\2\2\u09fb\u09f9\3\2\2\2\u09fb\u09fc\3\2\2\2\u09fc\u09ff\3\2"+
		"\2\2\u09fd\u09fb\3\2\2\2\u09fe\u09f4\3\2\2\2\u09fe\u09ff\3\2\2\2\u09ff"+
		"\u0a02\3\2\2\2\u0a00\u0a01\7\u008d\2\2\u0a01\u0a03\7\u0415\2\2\u0a02\u0a00"+
		"\3\2\2\2\u0a02\u0a03\3\2\2\2\u0a03\u0a04\3\2\2\2\u0a04\u0a05\7\u0407\2"+
		"\2\u0a05\u0a07\3\2\2\2\u0a06\u09ce\3\2\2\2\u0a06\u09d6\3\2\2\2\u0a06\u09e0"+
		"\3\2\2\2\u0a06\u09e6\3\2\2\2\u0a06\u09ee\3\2\2\2\u0a07\u00e1\3\2\2\2\u0a08"+
		"\u0a20\5\u0108\u0085\2\u0a09\u0a20\7\u0288\2\2\u0a0a\u0a20\7\u0101\2\2"+
		"\u0a0b\u0a20\7\u00fd\2\2\u0a0c\u0a20\7\u00fe\2\2\u0a0d\u0a20\7\u00ff\2"+
		"\2\u0a0e\u0a20\7\u0102\2\2\u0a0f\u0a20\7\u0103\2\2\u0a10\u0a20\7\u0104"+
		"\2\2\u0a11\u0a20\7G\2\2\u0a12\u0a20\7N\2\2\u0a13\u0a20\7\u0100\2\2\u0a14"+
		"\u0a20\7\u0106\2\2\u0a15\u0a20\7\u01b6\2\2\u0a16\u0a20\7\u0107\2\2\u0a17"+
		"\u0a20\7\u0081\2\2\u0a18\u0a20\7\u0109\2\2\u0a19\u0a20\7\u010a\2\2\u0a1a"+
		"\u0a20\7\u010b\2\2\u0a1b\u0a20\7\u010c\2\2\u0a1c\u0a20\7\u010d\2\2\u0a1d"+
		"\u0a20\7\u010e\2\2\u0a1e\u0a20\7\u010f\2\2\u0a1f\u0a08\3\2\2\2\u0a1f\u0a09"+
		"\3\2\2\2\u0a1f\u0a0a\3\2\2\2\u0a1f\u0a0b\3\2\2\2\u0a1f\u0a0c\3\2\2\2\u0a1f"+
		"\u0a0d\3\2\2\2\u0a1f\u0a0e\3\2\2\2\u0a1f\u0a0f\3\2\2\2\u0a1f\u0a10\3\2"+
		"\2\2\u0a1f\u0a11\3\2\2\2\u0a1f\u0a12\3\2\2\2\u0a1f\u0a13\3\2\2\2\u0a1f"+
		"\u0a14\3\2\2\2\u0a1f\u0a15\3\2\2\2\u0a1f\u0a16\3\2\2\2\u0a1f\u0a17\3\2"+
		"\2\2\u0a1f\u0a18\3\2\2\2\u0a1f\u0a19\3\2\2\2\u0a1f\u0a1a\3\2\2\2\u0a1f"+
		"\u0a1b\3\2\2\2\u0a1f\u0a1c\3\2\2\2\u0a1f\u0a1d\3\2\2\2\u0a1f\u0a1e\3\2"+
		"\2\2\u0a20\u00e3\3\2\2\2\u0a21\u0a22\t9\2\2\u0a22\u0a23\7\u0406\2\2\u0a23"+
		"\u0a24\5\u00e8u\2\u0a24\u0a25\7\u0407\2\2\u0a25\u00e5\3\2\2\2\u0a26\u0a2b"+
		"\5\u00bc_\2\u0a27\u0a2b\5\u0096L\2\u0a28\u0a2b\5\u00d6l\2\u0a29\u0a2b"+
		"\5\u00eav\2\u0a2a\u0a26\3\2\2\2\u0a2a\u0a27\3\2\2\2\u0a2a\u0a28\3\2\2"+
		"\2\u0a2a\u0a29\3\2\2\2\u0a2b\u0a35\3\2\2\2\u0a2c\u0a31\7\u0408\2\2\u0a2d"+
		"\u0a32\5\u00bc_\2\u0a2e\u0a32\5\u0096L\2\u0a2f\u0a32\5\u00d6l\2\u0a30"+
		"\u0a32\5\u00eav\2\u0a31\u0a2d\3\2\2\2\u0a31\u0a2e\3\2\2\2\u0a31\u0a2f"+
		"\3\2\2\2\u0a31\u0a30\3\2\2\2\u0a32\u0a34\3\2\2\2\u0a33\u0a2c\3\2\2\2\u0a34"+
		"\u0a37\3\2\2\2\u0a35\u0a33\3\2\2\2\u0a35\u0a36\3\2\2\2\u0a36\u00e7\3\2"+
		"\2\2\u0a37\u0a35\3\2\2\2\u0a38\u0a3d\5\u00bc_\2\u0a39\u0a3d\5\u0096L\2"+
		"\u0a3a\u0a3d\5\u00d6l\2\u0a3b\u0a3d\5\u00eav\2\u0a3c\u0a38\3\2\2\2\u0a3c"+
		"\u0a39\3\2\2\2\u0a3c\u0a3a\3\2\2\2\u0a3c\u0a3b\3\2\2\2\u0a3d\u00e9\3\2"+
		"\2\2\u0a3e\u0a3f\bv\1\2\u0a3f\u0a40\t:\2\2\u0a40\u0a4a\5\u00eav\6\u0a41"+
		"\u0a42\5\u00ecw\2\u0a42\u0a44\7Q\2\2\u0a43\u0a45\7h\2\2\u0a44\u0a43\3"+
		"\2\2\2\u0a44\u0a45\3\2\2\2\u0a45\u0a46\3\2\2\2\u0a46\u0a47\t;\2\2\u0a47"+
		"\u0a4a\3\2\2\2\u0a48\u0a4a\5\u00ecw\2\u0a49\u0a3e\3\2\2\2\u0a49\u0a41"+
		"\3\2\2\2\u0a49\u0a48\3\2\2\2\u0a4a\u0a51\3\2\2\2\u0a4b\u0a4c\f\5\2\2\u0a4c"+
		"\u0a4d\5\u00f4{\2\u0a4d\u0a4e\5\u00eav\6\u0a4e\u0a50\3\2\2\2\u0a4f\u0a4b"+
		"\3\2\2\2\u0a50\u0a53\3\2\2\2\u0a51\u0a4f\3\2\2\2\u0a51\u0a52\3\2\2\2\u0a52"+
		"\u00eb\3\2\2\2\u0a53\u0a51\3\2\2\2\u0a54\u0a57\bw\1\2\u0a55\u0a56\7\u0421"+
		"\2\2\u0a56\u0a58\7\u03ec\2\2\u0a57\u0a55\3\2\2\2\u0a57\u0a58\3\2\2\2\u0a58"+
		"\u0a59\3\2\2\2\u0a59\u0a5a\5\u00eex\2\u0a5a\u0a9b\3\2\2\2\u0a5b\u0a5c"+
		"\f\n\2\2\u0a5c\u0a5d\5\u00f2z\2\u0a5d\u0a5e\5\u00ecw\13\u0a5e\u0a9a\3"+
		"\2\2\2\u0a5f\u0a61\f\b\2\2\u0a60\u0a62\7h\2\2\u0a61\u0a60\3\2\2\2\u0a61"+
		"\u0a62\3\2\2\2\u0a62\u0a63\3\2\2\2\u0a63\u0a64\7\20\2\2\u0a64\u0a65\5"+
		"\u00ecw\2\u0a65\u0a66\7\f\2\2\u0a66\u0a67\5\u00ecw\t\u0a67\u0a9a\3\2\2"+
		"\2\u0a68\u0a69\f\7\2\2\u0a69\u0a6a\7\u0215\2\2\u0a6a\u0a6b\7Z\2\2\u0a6b"+
		"\u0a9a\5\u00ecw\b\u0a6c\u0a6e\f\5\2\2\u0a6d\u0a6f\7h\2\2\u0a6e\u0a6d\3"+
		"\2\2\2\u0a6e\u0a6f\3\2\2\2\u0a6f\u0a70\3\2\2\2\u0a70\u0a71\t<\2\2\u0a71"+
		"\u0a9a\5\u00ecw\6\u0a72\u0a74\f\f\2\2\u0a73\u0a75\7h\2\2\u0a74\u0a73\3"+
		"\2\2\2\u0a74\u0a75\3\2\2\2\u0a75\u0a76\3\2\2\2\u0a76\u0a77\7I\2\2\u0a77"+
		"\u0a7a\7\u0406\2\2\u0a78\u0a7b\5H%\2\u0a79\u0a7b\5\u00d0i\2\u0a7a\u0a78"+
		"\3\2\2\2\u0a7a\u0a79\3\2\2\2\u0a7b\u0a7c\3\2\2\2\u0a7c\u0a7d\7\u0407\2"+
		"\2\u0a7d\u0a9a\3\2\2\2\u0a7e\u0a7f\f\13\2\2\u0a7f\u0a80\7Q\2\2\u0a80\u0a9a"+
		"\5\u00ba^\2\u0a81\u0a82\f\t\2\2\u0a82\u0a83\5\u00f2z\2\u0a83\u0a84\t="+
		"\2\2\u0a84\u0a85\7\u0406\2\2\u0a85\u0a86\5H%\2\u0a86\u0a87\7\u0407\2\2"+
		"\u0a87\u0a9a\3\2\2\2\u0a88\u0a8a\f\6\2\2\u0a89\u0a8b\7h\2\2\u0a8a\u0a89"+
		"\3\2\2\2\u0a8a\u0a8b\3\2\2\2\u0a8b\u0a8c\3\2\2\2\u0a8c\u0a8d\7Z\2\2\u0a8d"+
		"\u0a90\5\u00ecw\2\u0a8e\u0a8f\7\u015c\2\2\u0a8f\u0a91\7\u0415\2\2\u0a90"+
		"\u0a8e\3\2\2\2\u0a90\u0a91\3\2\2\2\u0a91\u0a9a\3\2\2\2\u0a92\u0a93\f\3"+
		"\2\2\u0a93\u0a94\7\u01b3\2\2\u0a94\u0a95\7\u01c8\2\2\u0a95\u0a96\7\u0406"+
		"\2\2\u0a96\u0a97\5\u00ecw\2\u0a97\u0a98\7\u0407\2\2\u0a98\u0a9a\3\2\2"+
		"\2\u0a99\u0a5b\3\2\2\2\u0a99\u0a5f\3\2\2\2\u0a99\u0a68\3\2\2\2\u0a99\u0a6c"+
		"\3\2\2\2\u0a99\u0a72\3\2\2\2\u0a99\u0a7e\3\2\2\2\u0a99\u0a81\3\2\2\2\u0a99"+
		"\u0a88\3\2\2\2\u0a99\u0a92\3\2\2\2\u0a9a\u0a9d\3\2\2\2\u0a9b\u0a99\3\2"+
		"\2\2\u0a9b\u0a9c\3\2\2\2\u0a9c\u00ed\3\2\2\2\u0a9d\u0a9b\3\2\2\2\u0a9e"+
		"\u0a9f\bx\1\2\u0a9f\u0acc\5\u00bc_\2\u0aa0\u0acc\5\u0096L\2\u0aa1\u0acc"+
		"\5\u00d6l\2\u0aa2\u0acc\5\u009aN\2\u0aa3\u0aa4\5\u00f0y\2\u0aa4\u0aa5"+
		"\5\u00eex\f\u0aa5\u0acc\3\2\2\2\u0aa6\u0aa7\7\u00d2\2\2\u0aa7\u0acc\5"+
		"\u00eex\13\u0aa8\u0aa9\7\u0406\2\2\u0aa9\u0aae\5\u00eav\2\u0aaa\u0aab"+
		"\7\u0408\2\2\u0aab\u0aad\5\u00eav\2\u0aac\u0aaa\3\2\2\2\u0aad\u0ab0\3"+
		"\2\2\2\u0aae\u0aac\3\2\2\2\u0aae\u0aaf\3\2\2\2\u0aaf\u0ab1\3\2\2\2\u0ab0"+
		"\u0aae\3\2\2\2\u0ab1\u0ab2\7\u0407\2\2\u0ab2\u0acc\3\2\2\2\u0ab3\u0ab4"+
		"\7\u0203\2\2\u0ab4\u0ab5\7\u0406\2\2\u0ab5\u0ab8\5\u00eav\2\u0ab6\u0ab7"+
		"\7\u0408\2\2\u0ab7\u0ab9\5\u00eav\2\u0ab8\u0ab6\3\2\2\2\u0ab9\u0aba\3"+
		"\2\2\2\u0aba\u0ab8\3\2\2\2\u0aba\u0abb\3\2\2\2\u0abb\u0abc\3\2\2\2\u0abc"+
		"\u0abd\7\u0407\2\2\u0abd\u0acc\3\2\2\2\u0abe\u0abf\7\67\2\2\u0abf\u0ac0"+
		"\7\u0406\2\2\u0ac0\u0ac1\5H%\2\u0ac1\u0ac2\7\u0407\2\2\u0ac2\u0acc\3\2"+
		"\2\2\u0ac3\u0ac4\7\u0406\2\2\u0ac4\u0ac5\5H%\2\u0ac5\u0ac6\7\u0407\2\2"+
		"\u0ac6\u0acc\3\2\2\2\u0ac7\u0ac8\7O\2\2\u0ac8\u0ac9\5\u00eav\2\u0ac9\u0aca"+
		"\5B\"\2\u0aca\u0acc\3\2\2\2\u0acb\u0a9e\3\2\2\2\u0acb\u0aa0\3\2\2\2\u0acb"+
		"\u0aa1\3\2\2\2\u0acb\u0aa2\3\2\2\2\u0acb\u0aa3\3\2\2\2\u0acb\u0aa6\3\2"+
		"\2\2\u0acb\u0aa8\3\2\2\2\u0acb\u0ab3\3\2\2\2\u0acb\u0abe\3\2\2\2\u0acb"+
		"\u0ac3\3\2\2\2\u0acb\u0ac7\3\2\2\2\u0acc\u0ade\3\2\2\2\u0acd\u0ace\f\5"+
		"\2\2\u0ace\u0acf\5\u00f6|\2\u0acf\u0ad0\5\u00eex\6\u0ad0\u0add\3\2\2\2"+
		"\u0ad1\u0ad2\f\4\2\2\u0ad2\u0ad3\5\u00f8}\2\u0ad3\u0ad4\5\u00eex\5\u0ad4"+
		"\u0add\3\2\2\2\u0ad5\u0ad6\f\3\2\2\u0ad6\u0ad7\5\u00fa~\2\u0ad7\u0ad8"+
		"\5\u00eex\4\u0ad8\u0add\3\2\2\2\u0ad9\u0ada\f\16\2\2\u0ada\u0adb\7\32"+
		"\2\2\u0adb\u0add\5\u009eP\2\u0adc\u0acd\3\2\2\2\u0adc\u0ad1\3\2\2\2\u0adc"+
		"\u0ad5\3\2\2\2\u0adc\u0ad9\3\2\2\2\u0add\u0ae0\3\2\2\2\u0ade\u0adc\3\2"+
		"\2\2\u0ade\u0adf\3\2\2\2\u0adf\u00ef\3\2\2\2\u0ae0\u0ade\3\2\2\2\u0ae1"+
		"\u0ae2\t>\2\2\u0ae2\u00f1\3\2\2\2\u0ae3\u0af2\7\u03fd\2\2\u0ae4\u0af2"+
		"\7\u03fe\2\2\u0ae5\u0af2\7\u03ff\2\2\u0ae6\u0ae7\7\u03ff\2\2\u0ae7\u0af2"+
		"\7\u03fd\2\2\u0ae8\u0ae9\7\u03fe\2\2\u0ae9\u0af2\7\u03fd\2\2\u0aea\u0aeb"+
		"\7\u03ff\2\2\u0aeb\u0af2\7\u03fe\2\2\u0aec\u0aed\7\u0400\2\2\u0aed\u0af2"+
		"\7\u03fd\2\2\u0aee\u0aef\7\u03ff\2\2\u0aef\u0af0\7\u03fd\2\2\u0af0\u0af2"+
		"\7\u03fe\2\2\u0af1\u0ae3\3\2\2\2\u0af1\u0ae4\3\2\2\2\u0af1\u0ae5\3\2\2"+
		"\2\u0af1\u0ae6\3\2\2\2\u0af1\u0ae8\3\2\2\2\u0af1\u0aea\3\2\2\2\u0af1\u0aec"+
		"\3\2\2\2\u0af1\u0aee\3\2\2\2\u0af2\u00f3\3\2\2\2\u0af3\u0afb\7\f\2\2\u0af4"+
		"\u0af5\7\u0403\2\2\u0af5\u0afb\7\u0403\2\2\u0af6\u0afb\7\u00b2\2\2\u0af7"+
		"\u0afb\7p\2\2\u0af8\u0af9\7\u0402\2\2\u0af9\u0afb\7\u0402\2\2\u0afa\u0af3"+
		"\3\2\2\2\u0afa\u0af4\3\2\2\2\u0afa\u0af6\3\2\2\2\u0afa\u0af7\3\2\2\2\u0afa"+
		"\u0af8\3\2\2\2\u0afb\u00f5\3\2\2\2\u0afc\u0afd\7\u03ff\2\2\u0afd\u0b04"+
		"\7\u03ff\2\2\u0afe\u0aff\7\u03fe\2\2\u0aff\u0b04\7\u03fe\2\2\u0b00\u0b04"+
		"\7\u0403\2\2\u0b01\u0b04\7\u0404\2\2\u0b02\u0b04\7\u0402\2\2\u0b03\u0afc"+
		"\3\2\2\2\u0b03\u0afe\3\2\2\2\u0b03\u0b00\3\2\2\2\u0b03\u0b01\3\2\2\2\u0b03"+
		"\u0b02\3\2\2\2\u0b04\u00f7\3\2\2\2\u0b05\u0b06\t?\2\2\u0b06\u00f9\3\2"+
		"\2\2\u0b07\u0b08\7\u03fa\2\2\u0b08\u0b0d\7\u03fe\2\2\u0b09\u0b0a\7\u03fa"+
		"\2\2\u0b0a\u0b0b\7\u03fe\2\2\u0b0b\u0b0d\7\u03fe\2\2\u0b0c\u0b07\3\2\2"+
		"\2\u0b0c\u0b09\3\2\2\2\u0b0d\u00fb\3\2\2\2\u0b0e\u0b0f\t@\2\2\u0b0f\u00fd"+
		"\3\2\2\2\u0b10\u0b11\tA\2\2\u0b11\u00ff\3\2\2\2\u0b12\u0b13\tB\2\2\u0b13"+
		"\u0101\3\2\2\2\u0b14\u0b15\tC\2\2\u0b15\u0103\3\2\2\2\u0b16\u0b17\tD\2"+
		"\2\u0b17\u0105\3\2\2\2\u0b18\u0b19\tE\2\2\u0b19\u0107\3\2\2\2\u0b1a\u0b1b"+
		"\tF\2\2\u0b1b\u0109\3\2\2\2\u01ca\u010b\u010e\u0114\u0117\u011a\u011c"+
		"\u0121\u0124\u0127\u012b\u0131\u0137\u013b\u013e\u0143\u014b\u0150\u0155"+
		"\u0158\u015a\u0162\u016d\u0171\u0175\u017f\u0183\u0187\u018b\u018f\u0194"+
		"\u0197\u019a\u019d\u01a0\u01a6\u01aa\u01b0\u01b5\u01b8\u01bb\u01bd\u01c9"+
		"\u01d3\u01d9\u01e3\u01e6\u01eb\u01f8\u01ff\u0206\u0208\u020f\u0213\u021b"+
		"\u0220\u0225\u0228\u022d\u0230\u0234\u0236\u023b\u023e\u0244\u0249\u024b"+
		"\u024f\u0252\u0255\u025b\u0260\u0262\u0267\u026e\u0270\u0277\u027c\u0280"+
		"\u0283\u028b\u0293\u0295\u029d\u02a1\u02a4\u02aa\u02af\u02b2\u02b8\u02bb"+
		"\u02bf\u02c4\u02c9\u02cd\u02d2\u02d5\u02d9\u02dd\u02e1\u02e5\u02ea\u02ef"+
		"\u02f4\u02fa\u02ff\u0304\u030a\u030f\u0314\u0319\u031e\u0323\u0328\u032d"+
		"\u0332\u0337\u033c\u0342\u0347\u034d\u0357\u035e\u0360\u0368\u036d\u0370"+
		"\u0378\u037e\u038e\u039a\u039c\u039f\u03a7\u03ad\u03b3\u03c0\u03c7\u03d0"+
		"\u03d5\u03e0\u03e9\u03ee\u03fa\u0401\u040a\u040f\u041b\u0422\u042b\u0430"+
		"\u0437\u0440\u0445\u0447\u044c\u0454\u045d\u0461\u0465\u046a\u0470\u0476"+
		"\u047b\u0480\u0485\u048a\u048d\u049c\u04a0\u04a4\u04a7\u04aa\u04b0\u04b3"+
		"\u04b9\u04c2\u04c5\u04d0\u04d3\u04d7\u04db\u04e1\u04e5\u04e9\u04eb\u04ee"+
		"\u04f1\u04f4\u04fa\u04fe\u0501\u0504\u0507\u050a\u050c\u0510\u0516\u051c"+
		"\u0521\u0524\u052a\u052e\u0536\u053a\u053d\u0540\u0549\u054d\u0550\u0554"+
		"\u0558\u055b\u055e\u0563\u0569\u056d\u0577\u057d\u0581\u0587\u058b\u058f"+
		"\u0592\u0596\u0599\u05a1\u05a6\u05a9\u05ac\u05b0\u05b3\u05bc\u05c1\u05ca"+
		"\u05cf\u05d6\u05dd\u05e5\u05ea\u05f2\u05f5\u05f8\u05ff\u0602\u0609\u060c"+
		"\u0614\u061a\u0625\u0628\u0633\u0639\u063d\u0648\u064d\u064f\u0653\u065d"+
		"\u0667\u066d\u0672\u0675\u0678\u067b\u067e\u0681\u0687\u068c\u068f\u0692"+
		"\u0695\u0698\u069b\u069d\u06a3\u06a8\u06ab\u06ae\u06b1\u06b4\u06b8\u06be"+
		"\u06c2\u06cc\u06d0\u06d6\u06df\u06e2\u06e6\u06e9\u06ed\u06f1\u06f4\u06f6"+
		"\u06fe\u070a\u0710\u0712\u0718\u071a\u071c\u0722\u072a\u0732\u0738\u0741"+
		"\u0746\u074d\u0753\u075a\u075f\u0765\u076a\u0770\u0777\u0779\u077e\u0780"+
		"\u0784\u078a\u078d\u0795\u0799\u07ad\u07b4\u07b6\u07bd\u07bf\u07c3\u07c8"+
		"\u07d3\u07d8\u07de\u07e1\u07e5\u07ea\u07ed\u07f1\u07f5\u07f7\u07fc\u0801"+
		"\u080e\u0811\u0815\u0818\u081b\u0820\u0823\u0828\u082d\u0830\u0835\u0838"+
		"\u083e\u0841\u0845\u0848\u084b\u084f\u0852\u0855\u0859\u085c\u085f\u0862"+
		"\u0866\u0869\u086c\u0871\u0876\u087b\u087e\u0883\u0886\u088b\u088e\u0892"+
		"\u0896\u089e\u08a5\u08a9\u08ae\u08b1\u08b6\u08ba\u08bc\u08cc\u08d5\u08dd"+
		"\u08e6\u08f0\u08f8\u08fd\u0904\u090b\u0910\u0915\u0936\u093a\u0942\u0946"+
		"\u094f\u0957\u095c\u0964\u0969\u096e\u0970\u0979\u097e\u0986\u098b\u0993"+
		"\u099b\u099e\u09a8\u09b3\u09c0\u09c8\u09cc\u09d1\u09da\u09dd\u09e9\u09f1"+
		"\u09fb\u09fe\u0a02\u0a06\u0a1f\u0a2a\u0a31\u0a35\u0a3c\u0a44\u0a49\u0a51"+
		"\u0a57\u0a61\u0a6e\u0a74\u0a7a\u0a8a\u0a90\u0a99\u0a9b\u0aae\u0aba\u0acb"+
		"\u0adc\u0ade\u0af1\u0afa\u0b03\u0b0c";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}